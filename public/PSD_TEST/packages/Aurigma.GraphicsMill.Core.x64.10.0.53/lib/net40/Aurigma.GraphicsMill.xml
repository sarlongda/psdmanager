<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aurigma.GraphicsMill</name>
    </assembly>
    <members>

<!-- GraphicsMill root namespace -->		
        <member name="N:Aurigma.GraphicsMill" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill" /> is a root namespace of the Graphics Mill.</summary>
        </member>

<!-- AdvancedDrawing namespace -->		
        <member name="N:Aurigma.GraphicsMill.AdvancedDrawing" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Drawing" /> namespace represents the drawing engine in Graphics Mill. It contains classes for drawing graphics element on Canvas such as images, lines, curves, shapes, and text.</summary>
            <seealso href="advanced-drawing.htm" />
        </member>
		
<!-- AdvancedDrawing.BoundedText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" draft="yes">
            <summary>Draws the bounded text.</summary>
            <seealso href="advanced-drawing-text.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determinies the color of the drawn text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="y">The y-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="width">The width of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="height">The height of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="y">The y-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="width">The width-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="height">The height-coordinate of the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determines the color of the drawn text.</param>
            <param name="rectangle">Specifies <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object at the specified location with the specified alignement.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determines the color of the drawn text.</param>
            <param name="rectangle">Specifies <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.RectangleF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="rectangle">Specifies <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" />, wherein the text will be drawn.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Paragraph" draft="yes">
            <summary>Gets or sets paragraph settings of the text.</summary>
            <value>Paragraph settings of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Rectangle" draft="yes">
            <summary>Gets or sets the location of the bounded text.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the location of the bounded text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Underline" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is underlined.</summary>
            <value><c>true</c> if the text is underlined; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.Vertical" draft="yes">
            <summary>Gets or sets a value that indicates whether the text locates vertically.</summary>
            <value><c>true</c> if the text locates vertically; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.BoundedText.WrappingPaths" draft="yes">
			<summary>Gets the collection of paths to wrap the text around.</summary>
			<value>Paths to wrap around.</value>
			<remarks>Text will be wrapped around all paths that are in the collection.</remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#wrapBoundedText"></code></example>
        </member>
		
<!-- AdvancedDrawing.Brush -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" draft="yes">
            <summary>Represents the base class for Graphics Mill brushes.</summary>
            <remarks><para>This class is abstract, so you cannot directly instantiate it. You should create the derived <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> class.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Brush.#ctor" draft="yes">
			<exclude />
        </member>
		
<!-- AdvancedDrawing.ClippingPathCollection -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.ClippingPathCollection" draft="yes">
            <summary>Represents a collection of clipping paths.</summary>
        </member>

<!-- AdvancedDrawing.ColorStop -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.ColorStop" draft="yes">
            <summary>Represents a color-stop point for gradients.</summary>
            <seealso href="graphics.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ColorStop.Color" draft="yes">
            <summary>A color that is used to draw gradient brushes.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ColorStop.Position" draft="yes">
            <summary>A color position in gradient brushes, in relative values.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.ColorStop.#ctor" draft="yes">
            <summary>Creates the empty ColorStop object.</summary>
        </member>

<!-- AdvancedDrawing.CustomFontRegistry -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry" draft="yes">
            <summary>Creates the customer's font registry that allows managing allocation and disposal of the fonts.</summary>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry.Add(System.String)" draft="yes">
            <summary>Adds new font to the customer's font registry.</summary>
            <param name="path">A string specifying the path to the font.</param>
            <returns>The font name.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry.Add(System.IO.Stream)" draft="yes">
            <summary>Adds new font to the customer's font registry.</summary>
            <param name="stream">A file containing the font description.</param>
            <returns>The font name.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry.Clear" draft="yes">
            <summary>Deletes all fonts from the customer's font registy.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry.#ctor" draft="yes">
            <summary>Creates the empty customer's font registry.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.CustomFontRegistry.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry)" draft="yes">
            <summary>Creates a copy of <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> containing the system fonts.</summary>
            <param name="fontRegistry">The font registry containing the system fonts.</param>
        </member>

<!-- AdvancedDrawing.DigitType -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.DigitType" draft="yes">
            <summary>Contains digit representation options.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.DigitType.Arabic" draft="yes">
            <summary>Arabic digits.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.DigitType.Farsi" draft="yes">
            <summary>Farsi digits.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.DigitType.Hindi" draft="yes">
            <summary>Hindi digits.</summary>
        </member>
      
<!-- AdvancedDrawing.DoublePathText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" draft="yes">
            <summary>Creates the distorted text drawn along two paths.</summary>
            <seealso href="advanced-drawing-text.htm" />
			<seealso href="working-with-path.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.AutoExtend">
            <summary>Gets or sets a value that indicates whether the text should be drawn outside the path.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.BaseHeight" draft="yes">
            <summary>Changes the text height but preserves its length.</summary>
            <value>The greater the value is, the smaller the text height will be. The value needs to be more than zero.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.BottomPath" draft="yes">
            <summary>Gets or sets the path specifying the curve along which the bottom line of the text locates.</summary>
            <value>A vector path specifying the curve along which the bottom line of the text locates.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.Dispose(System.Boolean)" draft="yes">
			<exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.MainPath" draft="yes">
            <summary>Gets or sets along which curve the text should be aligned.</summary>
            <value><span class="code">Bottom</span> if the text locates along the bottom path; <span class="code">Top</span> if the text locates along the top path.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.MainPath)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" /> object with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="bottomPath"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.BottomPath" /> specifying the curve along which the bottom line of the text locates.</param>
            <param name="topPath"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.TopPath" /> specifying the curve along which the top line of the text locates.</param>
            <param name="baselinePath">Specifies along which curve the text should be aligned.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.MainPath,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" /> object with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="bottomPath"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.BottomPath" /> specifying the curve along which the bottom line of the text locates.</param>
            <param name="topPath"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.TopPath" /> specifying the curve along which the top line of the text locates.</param>
            <param name="baselinePath">Specifies along which curve the text should be aligned.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText.TopPath" draft="yes">
            <summary>Gets or sets the path specifying the curve along which the top line of the text locates.</summary>
            <value>A vector path specifying the curve along which the top line of the text locates.</value>
        </member>

<!-- AdvancedDrawing.Drawer -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Drawer" draft="yes">
            <summary>Provides the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics">Aurigma.GraphicsMill.AdvancedDrawing.Graphics</see> object for drawing within a pipeline.</summary>
            <seealso href="drawing-on-images-with-pipelines.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Drawer.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Drawer" /> class.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.AdvancedDrawing.Drawer.Draw" draft="yes">
            <summary>Occurs when the drawing is performed.</summary>
        </member>

<!-- AdvancedDrawing.DrawEventArgs -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.DrawEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.AdvancedDrawing.Drawer.Draw" /> event.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawEventArgs.Graphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> to draw on an image.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> providing the advanced drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawEventArgs.Height" draft="yes">
            <summary>Gets a height of the drawing surface (in pixels).</summary>
            <value>The height of the drawing surface (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawEventArgs.Width" draft="yes">
            <summary>Gets a width of the drawing surface (in pixels).</summary>
            <value>The width of the drawing surface (in pixels).</value>
        </member>

      <!-- AdvancedDrawing.DrawImageEventArgs -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.BeforeDrawPath" /> event.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.Bitmap" draft="yes">
            <summary>Gets the bitmap to draw.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Bitmap" /> providing the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.Cancel" draft="yes">
            <summary>Gets or sets the boolean value defining whether the bitmap should be added to the container.</summary>
            <value><c>false</c> if you want to draw the bitmap in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />. By default, this value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.ClippingPaths" draft="yes">
            <summary>Gets the collection of clipping paths.</summary>
            <value>The collection of clipping paths for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.Transform" draft="yes">
            <summary>Gets the transformation matrix.</summary>
            <value>The <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.X" draft="yes">
            <summary>Gets the x-coordinate of the upper-left corner of this graphics container (in pixels).</summary>
            <value>The x-coordinate of the upper-left corner (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawImageEventArgs.Y" draft="yes">
            <summary>Gets the y-coordinate of the upper-left corner of this graphics container (in pixels).</summary>
            <value>The y-coordinate of the upper-left corner (in pixels).</value>
        </member>

      <!-- AdvancedDrawing.DrawPathEventArgs -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.BeforeDrawPath" /> event.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.BlendMode" draft="yes">
            <summary>Gets the blending mode of the path.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Transforms.BlendMode" /> value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.Brush" draft="yes">
            <summary>Gets the brush defining characteristics of the fill.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.Cancel" draft="yes">
            <summary>Gets or sets the boolean value defining whether the path should be added to the container.</summary>
            <value><c>false</c> if you want to draw the path in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />. By default, this value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.ClippingPaths" draft="yes">
            <summary>Gets the collection of clipping paths.</summary>
            <value>The collection of clipping paths for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.FillingRule" draft="yes">
            <summary>Gets the filling rule.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FillingRule" /> value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.Path" draft="yes">
            <summary>Gets the path to be drawn.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.Pen" draft="yes">
            <summary>Gets the pen defining the color, width, and style of a path.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.DrawPathEventArgs.Transform" draft="yes">
            <summary>Gets the transformation matrix.</summary>
            <value>The <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>.</value>
        </member>

<!-- AdvancedDrawing.FallbackFontCollection -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FallbackFontCollection" draft="yes">
            <summary>Represents a collection of fonts where a substitution for glyphs is searched in the first place.</summary>
            <remarks><para>If there is no the glyph in the required font, then Graphics Mill looks for the substitution in this collection first. If the glyph still not found, then the first applicable glyph in <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> is used.</para></remarks>
        </member>

<!-- AdvancedDrawing.FillingRule -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FillingRule" draft="yes">
            <summary>Specifies a filling rule for a path.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.FillingRule.EvenOdd" draft="yes">
            <summary>Fills in odd segments.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.FillingRule.NonZero" draft="yes">
            <summary>Fills in non-zero segments.</summary>
        </member>
      
<!-- AdvancedDrawing.Font -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" draft="yes">
            <summary>Represents a single font.</summary>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.DpiX" draft="yes">
            <summary>Gets the horizontal DPI of glyphs in the font.</summary>
            <value>The horizontal DPI of the font's glyphs.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.DpiY" draft="yes">
            <summary>Gets the vertical DPI of glyphs in the font.</summary>
            <value>The vertical DPI of the font's glyphs.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.Family" draft="yes">
            <summary>Gets the family name of the font.</summary>
            <value>The family name of the font.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxBold" draft="yes">
            <summary>Gets or sets the bold style emulation of the font.</summary>
            <value><c>true</c> if bold style emulation is enabled; otherwise, <c>false</c>.</value>
            <remarks><para>Most font families have regular, bold, and italic styles. However, what if you need to draw a bold and/or italic text, but a font family does not contain the corresponding styles? In this case you can use the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxBold" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxItalic" /> properties for emulating bold and italic styles.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxItalic" draft="yes">
            <summary>Gets or sets the italic style emulation of the font.</summary>
            <value><c>true</c> if italic style emulation is enabled; otherwise, <c>false</c>.</value>
            <remarks><para>Most font families have regular, bold, and italic styles. However, what if you need to draw a bold and/or italic text, but a font family does not contain the corresponding styles? In this case you can use the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxBold" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FauxItalic" /> properties for emulating bold and italic styles.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.FontRegistry" draft="yes">
            <summary>Gets the font registry containing the system fonts.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> containing the system fonts.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.Hinting" draft="yes">
            <summary>Gets or sets the hinting of the font. Hinting is the adjustment of glyphs for lining them up with rasterized pixels.</summary>
            <value><c>true</c> if hinting is enabled; otherwise, <c>false</c>.</value>
			<remarks><para>This mechanism allows for displaying vector text without visible distortion even at low resolution screens.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Font.MeasureString(System.String)" draft="yes">
            <summary>Gets the measuring font characteristics.</summary>
            <param name="value">A string to measure.</param>
            <returns>The measuring font characteristics.</returns>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.Metrics" draft="yes">
            <summary>Gets font characteristics.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics" /> containing font characteristics.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.PostscriptName" draft="yes">
            <summary>Gets the postscript name of the font.</summary>
            <value>The postscript name of the font.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.Size" draft="yes">
            <summary>Gets the font size.</summary>
            <value>The size of the font.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Font.Style" draft="yes">
            <summary>Gets the font style.</summary>
            <value>The font style.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>

<!-- AdvancedDrawing.FontFallbackException -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException" draft="yes">
            <summary>Represents the error that occurs when the font fallback cannot be carried out.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontFallbackException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>

<!-- AdvancedDrawing.FontInfo -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo" draft="yes">
            <summary>Represents such font properties as a family, a full name, a postscript name, and a style.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo.Family" draft="yes">
            <summary>The font family.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo.FullName" draft="yes">
            <summary>The combination of a font family and a font name.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo.PostscriptName" draft="yes">
            <summary>The postscript name of the font.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo.Style" draft="yes">
            <summary>The font style.</summary>
        </member>

<!-- AdvancedDrawing.FontMetrics -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics" draft="yes">
            <summary>Represents font characteristics for a font at a given text size.</summary>
			<remarks><para>All metrics are measured in pixels.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics.Ascender" draft="yes">
            <summary>Gets the vertical distance from the horizontal baseline to the highest character coordinate in a font face, in pixels.</summary>
            <value>The vertical distance from the horizontal baseline to the highest character coordinate in a font face, in pixels.</value>
			<remarks><para>Unfortunately, font formats do not define the ascender in a uniform way. For some formats, it represents the ascent of all capital latin characters (without accents), for others it is the ascent of the highest accented character, and finally, other formats define it as being equal to the maximum y coordinate of the black box.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics.Descender" draft="yes">
            <summary>Gets the vertical distance from the horizontal baseline to the lowest character coordinate in a font face, in pixels.</summary>
            <value>The vertical distance from the horizontal baseline to the lowest character coordinate in a font face, in pixels.</value>
			<remarks><para>Unfortunately, font formats don't define the descender in a uniform way. For some formats, it represents the descent of all capital latin characters (without accents), for others it is the ascent of the lowest accented character, and finally, other formats define it as being equal to the minimum y coordinate of the black box. This field is negative for values below the baseline.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics.Height" draft="yes">
            <summary>Gets the default line spacing (the baseline-to-baseline distance), in pixels, when writing text with this font.</summary>
            <value>The default line spacing (the baseline-to-baseline distance), in pixels, when writing text with this font.</value>
			<remarks><para>This value usually is larger than the sum of the ascender and descender taken as absolute values. There is also no guarantee that no glyphs extend above or below subsequent baselines when using this distance. You may think of it as a value the designer of the font finds appropriate.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics.UnderlinePosition" draft="yes">
            <summary>Gets the vertical position of the underline bar's center, relative to the baseline, in pixels.</summary>
            <value>The vertical position of the underline bar's center, relative to the baseline, in pixels.</value>
			<remarks><para>It is negative if it is below the baseline.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontMetrics.UnderlineThickness" draft="yes">
            <summary>Gets the vertical thickness of the underline.</summary>
            <value>The vertical thickness of the underline.</value>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>

<!-- AdvancedDrawing.FontRegistry -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" draft="yes">
            <summary>Represents a base class for a fonts set.</summary>
            <seealso href="fonts-and-measuring-text.htm" />
        </member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Contains(System.String)">
            <overloads><summary>Checks whether the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> contains a given font.</summary></overloads>
            <summary>Checks whether the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> contains a font with the given postscript name.</summary>
			<param name="postscriptName">Postscript name of a font.</param>
            <returns><c>true</c> if the font is found in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />; otherwise, <c>false</c>.</returns>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Contains(System.String,System.String)">
            <summary>Checks whether the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> contains a font with the given family name and style.</summary>
			<param name="family">Font family name.</param>
			<param name="style">Font style.</param>
            <returns><c>true</c> if the font is found in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />; otherwise, <c>false</c>.</returns>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.CreateFont(System.String,System.Single,System.Single,System.Single)">
            <overloads><summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given parameters if such font is presented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary></overloads>
            <summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given postscript name, size, and DPI, if such font is presented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary>
			<param name="postscriptName">Postscript name of a font.</param>
			<param name="size">Font size.</param>
			<param name="dpiX">Horizontal resolution of the font's glyphs in DPI.</param>
			<param name="dpiY">Vertical resolution of the font's glyphs in DPI.</param>
			<returns>Font having the given parameters.</returns>
            <seealso href="fonts-and-measuring-text.htm" />
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.CreateFont(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given family name, style, size, and DPI, if such font is presented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary>
			<param name="family">Font family name.</param>
			<param name="style">Font style.</param>
			<param name="size">Font size.</param>
			<param name="dpiX">Horizontal resolution of the font's glyphs in DPI.</param>
			<param name="dpiY">Vertical resolution of the font's glyphs in DPI.</param>
			<returns>Font having the given parameters.</returns>
            <seealso href="fonts-and-measuring-text.htm" />
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Dispose(System.Boolean)">
			<exclude />
		</member>
		<member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.FallbackFonts">
			<summary>The collection of the fonts where a substitution for glyphs is searched.</summary>
		</member>
		<member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Families">
			<summary>Gets the collection of the font families represented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary>
			<returns>The collection of the font families represented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</returns>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Finalize">
			<exclude />
		</member>
		<member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Fonts">
			<summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo" /> collection of the fonts presented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</summary>
			<returns>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontInfo" /> collection of the fonts presented in the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" />.</returns>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.GetFontStyles(System.String)">
			<summary>Returns the available font styles for the given font family.</summary>
			<param name="family">Font family name.</param>
			<returns>The collection of the font styles.</returns>
		</member>
		<member name="P:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry.Installed">
			<summary>Gets the font registry containing the installed system fonts.</summary>
			<returns>The font registry containing the installed system fonts.</returns>
			<seealso href="fonts-and-measuring-text.htm" />
		</member>
		
<!-- AdvancedDrawing.GradientBrush -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.GradientBrush" draft="yes">
            <summary>A base class for all gradients.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GradientBrush.#ctor" draft="yes">
                <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GradientBrush.BackgroundColor" draft="yes">
            <summary>Gets or sets the background color.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GradientBrush.ColorStops" draft="yes">
            <summary>Gets or sets the array of color-stop points represented in <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.ColorStop" />.</summary>
        </member>

<!-- AdvancedDrawing.Graphics -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" draft="yes">
            <summary>Represents the advanced drawing functionality provided by Graphics Mill.</summary>
            <remarks><para>This class is implemented with Anti-Grain Geometry (AGG), that allows getting high quality and precise drawings. The class provides number of methods to draw outlined (DrawFoo methods) and filled (FillFoo methods) lines, curves, shapes, and paths.</para> 
				<para>With the set of <see cref="Overload:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage" /> methods you can combine and overlay images.</para>
				<para>Also this class provides a canvas for text output. You can create plain, bounded, distorted, and art texts on <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#UsingPenAndBrush"></code></example>
            <seealso href="advanced-drawing.htm" />
            <threadsafety static="false" instance="false" />
        </member>

<!-- AdvancedDrawing.Graphics events -->
        <member name="E:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.BeforeDrawImage" draft="yes">
            <summary>Occurs when you draw a bitmap in the graphics container.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.BeforeDrawPath" draft="yes">
            <summary>Occurs when you draw a path in the graphics container.</summary>
        </member>

<!-- AdvancedDrawing.Graphics methods -->
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Clear(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Clears the entire drawing surface and fills it with the specified background color.</summary>
			<param name="color">Color to fill the drawing surface with.</param>
        </member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.CreateFont(System.String,System.Single)">
            <summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given postscript name and size, if such font is presented in this <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FontRegistry">Graphics.FontRegistry</see>.</summary>
            <overloads><summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given parameters if such font is presented in this <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FontRegistry">Graphics.FontRegistry</see>.</summary></overloads>
			<param name="postScriptName">Postscript name of a font.</param>
			<param name="size">Font size.</param>
			<returns>Font having the given parameters.</returns>
			<remarks><para>The font's DPI is the same as the DPI of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</para></remarks>
            <seealso href="advanced-drawing-text.htm" />
            <seealso href="fonts-and-measuring-text.htm" />
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.CreateFont(System.String,System.String,System.Single)">
            <summary>Returns the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> instance with the given family name, style, and size, if such font is presented in this <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FontRegistry">Graphics.FontRegistry</see>. The font's DPI is the same as the DPI of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
			<param name="family">Font family name.</param>
			<param name="style">Font style.</param>
			<param name="size">Font size.</param>
			<returns>Font having the given parameters.</returns>
			<remarks><para>The font's DPI is the same as the DPI of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</para></remarks>
            <seealso href="advanced-drawing-text.htm" />
            <seealso href="fonts-and-measuring-text.htm" />
		</member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawBezier(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws a Bezier spline defined by four ordered pairs of coordinates that represent points.</summary>
            <overloads><summary>Draws a Bezier spline.</summary></overloads>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="x">The x-coordinate of the starting point of the curve.</param>
            <param name="y">The y-coordinate of the starting point of the curve.</param>
            <param name="controlX1">The x-coordinate of the first control point for the curve.</param>
            <param name="controlY1">The y-coordinate of the first control point for the curve.</param>
            <param name="controlX2">The x-coordinate of the second control point for the curve.</param>
            <param name="controlY2">The y-coordinate of the second control point for the curve.</param>
            <param name="endX">The x-coordinate of the ending point of the curve.</param>
            <param name="endY">The y-coordinate of the ending point of the curve.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawOneCurve"></code></example>
            <seealso href="graphics.htm#BezierCurves" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawBezier(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" draft="yes">
            <summary>Draws a Bezier spline defined by four <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF" /> structure that represents the starting point of the curve.</param>
            <param name="controlPoint1">A <see cref="T:System.Drawing.PointF" /> structure that represents the first control point for the curve.</param>
            <param name="controlPoint2">A <see cref="T:System.Drawing.PointF" /> structure that represents the second control point for the curve.</param>
            <param name="endPoint">A <see cref="T:System.Drawing.PointF" /> structure that represents the ending point of the curve.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para></remarks>
            <seealso href="graphics.htm#BezierCurves" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawBeziers(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF[])" draft="yes">
            <summary>Draws a sequence of Bezier curves defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the curves.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para><para>The ending point of one spline will be the starting point of the next one. Therefore, for splines, except for the first one in the array, you need to specify three points instead of four.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawCurves"></code></example>
            <seealso href="graphics.htm#BezierCurves" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawContainer(Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer,System.Single,System.Single)">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> at the location specified by the coordinate pair.</summary>
            <param name="container">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</param>
            <remarks><para>This method respects the container size. To verify if the content goes out of container bounds and will be croped, you can get the actual bounds by using the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetContentBounds" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</summary>
            <overloads><summary>Draws an ellipse.</summary></overloads>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To fill an ellipse, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" /> method.</para></remarks>
            <seealso href="graphics.htm#Ellipses" />
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" draft="yes">
            <summary>Draws an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" />.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the ellipse.</param>
            <param name="rectangle">A <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To fill an ellipse, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" /> method.</para></remarks>
            <seealso href="graphics.htm#Ellipses" />
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF[])" draft="yes">
            <summary>Draws a number of ellipses defined by an array of <see cref="T:System.Drawing.RectangleF" /> structures representing bounding boxes.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the ellipse.</param>
            <param name="rectangles">An array of <see cref="T:System.Drawing.RectangleF" /> structures that define the boundaries of the ellipses.</param>
            <remarks><para>Each ellipse is defined by its tightest bounding rectangle.</para><para>To draw filled ellipses, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Drawing.RectangleF)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> at the specified location and with the specified size.</summary>
			<overloads><summary>Draws the specified image on the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary></overloads>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <remarks>
				<para>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />. If the current image dimensions differ from dimensions of the destination rectangle, the image will be resized to have the same size as the destination rectangle.</para>
				<para>If you want this method to calculate width and/or height automatically, you can pass <c>0</c>s as the <b>dstRect</b> rectangle dimensions. The image dimensions will be calculated with the following way:</para>
				<list type="number">
					<item><description>If both width and heigth are <c>0</c>, the source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" />) will be taken. This way the image will not be resized during drawing.</description></item>
					<item><description>If only one of arguments is <c>0</c>, this argument will be calculated as to save image proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be <c>300</c>.</description></item>
				</list>
			</remarks>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Pipeline,System.Drawing.RectangleF)" draft="yes">
			<summary>Draws an image produced by a pipeline on the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image to draw.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <remarks>
				<para>The image is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />. If the current image dimensions differ from dimensions of the destination rectangle, the image will be resized to have the same size as the destination rectangle.</para>
				<para>If you want this method to calculate width and/or height automatically, you can pass <c>0</c>s as the <b>dstRect</b> rectangle dimensions. The image dimensions will be calculated with the following way:</para>
				<list type="number">
					<item><description>If both width and heigth are <c>0</c>, the source image dimensions will be taken. This way the image will not be resized during drawing.</description></item>
					<item><description>If only one of arguments is <c>0</c>, this argument will be calculated as to save image proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be <c>300</c>.</description></item>
				</list>
			</remarks>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Drawing.RectangleF,System.Single)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> at the specified location and with the specified size.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <remarks>
				<para>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />. If the current image dimensions differ from dimensions of the destination rectangle, the image will be resized to have the same size as the destination rectangle.</para>
				<para>If you want this method to calculate width and/or height automatically, you can pass <c>0</c>s as the <b>dstRect</b> rectangle dimensions. The image dimensions will be calculated with the following way:</para>
				<list type="number">
					<item><description>If both width and heigth are <c>0</c>, the source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" />) will be taken. This way the image will not be resized during drawing.</description></item>
					<item><description>If only one of arguments is <c>0</c>, this argument will be calculated as to save image proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be <c>300</c>.</description></item>
				</list>
			</remarks>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Pipeline,System.Drawing.RectangleF,System.Single)" draft="yes">
			<summary>Draws an image produced by a pipeline on the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image to draw.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <remarks>
				<para>The image is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />. If the current image dimensions differ from dimensions of the destination rectangle, the image will be resized to have the same size as the destination rectangle.</para>
				<para>If you want this method to calculate width and/or height automatically, you can pass <c>0</c>s as the <b>dstRect</b> rectangle dimensions. The image dimensions will be calculated with the following way:</para>
				<list type="number">
					<item><description>If both width and heigth are <c>0</c>, the source image dimensions will be taken. This way the image will not be resized during drawing.</description></item>
					<item><description>If only one of arguments is <c>0</c>, this argument will be calculated as to save image proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be <c>300</c>.</description></item>
				</list>
			</remarks>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Single,System.Single)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> using its original physical size at the location specified by the coordinate pair.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Pipeline,System.Single,System.Single)" draft="yes">
            <summary>Draws an image produced by a pipeline using image's original physical size at the location specified by the coordinate pair.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> using its original physical size at the location specified by the coordinate pair.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawImage(Aurigma.GraphicsMill.Pipeline,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws an image produced by a pipeline using image's original physical size at the location specified by the coordinate pair.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <seealso href="overlaying-images-advanced-drawing.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawLine(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws a line connecting the two points specified by the coordinate pairs.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the line.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
            <remarks><para>In this method line is defined with two points which should be connected with this line.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawLine"></code></example>
            <seealso href="graphics.htm#DrawLineCurves" />
            <overloads><summary>Draws a line connecting the two points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawLine(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" draft="yes">
            <summary>Draws a line connecting two points defined by <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the line.</param>
            <param name="pt1">A <see cref="T:System.Drawing.PointF" /> structure that represents the first point to connect.</param>
            <param name="pt2">A <see cref="T:System.Drawing.PointF" /> structure that represents the second point to connect.</param>
            <remarks><para>In this method line is defined with two points which should be connected with this line.</para></remarks>
            <seealso href="graphics.htm#DrawLineCurves" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawLines(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF[])" draft="yes">
            <summary>Draws a series of line segments that connect number of points defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the line segments.</param>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" /> structures that represent the points to connect.</param>
            <remarks><para>Polyline is a set of connected lines (end point of some polyline segment is a start point of the next segment). It is defined with an array of points which should be connected with this polyline (polyline vertices).</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawPolyline"></code></example>
            <seealso href="graphics.htm#DrawLineCurves" />
            <overloads><summary>Draws a series of line segments.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPath(Aurigma.GraphicsMill.AdvancedDrawing.Pen,Aurigma.GraphicsMill.AdvancedDrawing.Path)" draft="yes">
            <summary>Draws a path defined by a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> instance.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the path.</param>
            <param name="path">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> to draw.</param>
            <remarks><para>A path is a set of geometric elements (curves, text, and graphics shapes) that can be used as a single object. Paths can be used different operations: drawing outlined or filled path, drawing a text string along a path, and cropping an image.</para>
			<para>To fill the path, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPath(Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawPath"></code></example>
            <seealso href="graphics.htm#ClippingPath" />
            <seealso href="working-with-path.htm" />
			<seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPath(Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF[])" draft="yes">
            <summary>Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the polygon.</param>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" />  structures that represent the vertices of the polygon.</param>
            <remarks><para>Polygon can be treated as closed polyline, where last point is connected with the first one.</para><para>To fill the polygon, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF[])" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawPolygon"></code></example>
            <seealso href="graphics.htm#Polygons" />
			<seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF[])" />
            <overloads><summary>Draws a polygon defined by an array of points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Draws a rectangle specified by a coordinate pair, a width, and a height.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">The width of the rectangle to draw.</param>
            <param name="height">The height of the rectangle to draw.</param>
            <remarks><para>To fill a rectangle, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
            <seealso href="graphics.htm#Rectangles" />
            <overloads><summary>Draws a rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" draft="yes">
            <summary>Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the rectangle.</param>
            <param name="rectagle">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
            <remarks><para>To fill a rectangle, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawRectangle"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" />
            <seealso href="graphics.htm#Rectangles" />
        </member>		
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF[])" draft="yes">
            <summary>Draws a number of rectangles specified by an array of <see cref="T:System.Drawing.RectangleF" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> that determines the color, width, and style of the rectangle.</param>
            <param name="rectangles">An array of <see cref="T:System.Drawing.RectangleF" /> structures that represents the rectangles to draw.</param>
            <remarks><para>To draw filled rectangles, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawManyRectangles"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" />
            <seealso href="graphics.htm#Rectangles" />
        </member>		
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawText(Aurigma.GraphicsMill.AdvancedDrawing.Text)" draft="yes">
            <summary>Draws a text.</summary>
            <param name="text">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" /> to draw.</param>
            <remarks><para>This method allows to draw any type of text available in Graphics Mill: plain, bounded, distorted, text on paths, and different types of art text.</para>
			</remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#plainText"></code></example>
            <seealso href="graphics.htm#ClippingPath" />
            <seealso href="advanced-drawing-text.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillBezier(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Fills the interior of a Bezier curve defined by four ordered pairs of coordinates that represent points.</summary>
            <overloads><summary>Fills the interior of a Bezier curve.</summary></overloads>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the starting point of the curve.</param>
            <param name="y">The y-coordinate of the starting point of the curve.</param>
            <param name="controlX1">The x-coordinate of the first control point for the curve.</param>
            <param name="controlY1">The y-coordinate of the first control point for the curve.</param>
            <param name="controlX2">The x-coordinate of the second control point for the curve.</param>
            <param name="controlY2">The y-coordinate of the second control point for the curve.</param>
            <param name="endX">The x-coordinate of the ending point of the curve.</param>
            <param name="endY">The y-coordinate of the ending point of the curve.</param>
            <remarks><para>A Bezier curve is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier curve bends.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillBezier(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" draft="yes">
            <summary>Fills the interior of a Bezier curve defined by four <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF" /> structure that represents the starting point of the curve.</param>
            <param name="controlPoint1">A <see cref="T:System.Drawing.PointF" /> structure that represents the first control point for the curve.</param>
            <param name="controlPoint2">A <see cref="T:System.Drawing.PointF" /> structure that represents the second control point for the curve.</param>
            <param name="endPoint">A <see cref="T:System.Drawing.PointF" /> structure that represents the ending point of the curve.</param>
            <remarks><para>A Bezier curve is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier curve bends.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillBeziers(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF[])" draft="yes">
            <summary>Fills the interior of a sequence of Bezier curves defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the curves.</param>
            <remarks><para>A Bezier curve is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier curve bends.</para><para>The ending point of one curve will be the starting point of the next one. Therefore, for splines, except for the first one in the array, you need to specify three points instead of four.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</summary>
            <overloads><summary>Fills the interior of an ellipse defined by a bounding rectangle.</summary></overloads>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To draw an outlined ellipse, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" /> method.</para></remarks>
            <seealso href="graphics.htm#Ellipses" />
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" draft="yes">
            <summary>Fills the interior of an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" />.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rectangle">A <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To draw an outlined ellipse, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" /> method.</para></remarks>
            <seealso href="graphics.htm#Ellipses" />
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" draft="yes">
            <summary>Fills the interior of a number of ellipses defined by an array of <see cref="T:System.Drawing.RectangleF" /> structures representing bounding boxes.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rectangles">An array of <see cref="T:System.Drawing.RectangleF" /> structures that define the boundaries of the ellipses.</param>
            <remarks><para>Each ellipse is defined by its tightest bounding rectangle.</para><para>To draw outlined ellipses, use the <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF[])" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawEllipses(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF[])" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPath(Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path)" draft="yes">
            <summary>Draws a path defined by a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> instance.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="path">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> to draw.</param>
            <remarks><para>A path is a set of geometric elements (curves, text, and graphics shapes) that can be used as a single object. Paths can be used different operations: drawing outlined or filled path, drawing a text string along a path, and cropping an image.</para>
			<para>To outline the path, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPath(Aurigma.GraphicsMill.AdvancedDrawing.Pen,Aurigma.GraphicsMill.AdvancedDrawing.Path)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawPath"></code></example>
            <seealso href="graphics.htm#ClippingPath" />
            <seealso href="working-with-path.htm" />
			<seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPath(Aurigma.GraphicsMill.AdvancedDrawing.Pen,Aurigma.GraphicsMill.AdvancedDrawing.Path)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF[])" draft="yes">
            <summary>Fills the interior of a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" />  structures that represent the vertices of the polygon.</param>
            <remarks><para>Polygon can be treated as closed polyline, where last point is connected with the first one.</para><para>To draw an outlined polygon, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF[])" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawPolygon"></code></example>
            <seealso href="graphics.htm#Polygons" />
			<seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.PointF[])" />
            <overloads><summary>Fills the interior of a polygon defined by an array of points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Fills the interior of a rectangle specified by a coordinate pair, a width, and a height.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">The width of the rectangle to draw.</param>
            <param name="height">The height of the rectangle to draw.</param>
            <remarks><para>To draw an outlined rectangle, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
            <seealso href="graphics.htm#Rectangles" />
            <overloads><summary>Fills the interior of a rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF)" draft="yes">
            <summary>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rectagle">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
            <remarks><para>To draw an outlined rectangle, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#SolidBrush"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.AdvancedDrawing.Pen,System.Drawing.RectangleF)" />
            <seealso href="graphics.htm#Rectangles" />
        </member>		
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" draft="yes">
            <summary>Fills the interior of a number of rectangles specified by an array of <see cref="T:System.Drawing.RectangleF" /> structures.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rectangles">An array of <see cref="T:System.Drawing.RectangleF" /> structures that represents the rectangles to draw.</param>
            <remarks><para>To draw outlined rectangles, use <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawManyRectangles"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillRectangles(Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.RectangleF[])" />
            <seealso href="graphics.htm#Rectangles" />
        </member>		
<!-- AdvancedDrawing.Graphics properties -->
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.BlendMode" draft="yes">
            <summary>Gets or sets blending modes.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.ClippingPaths" draft="yes">
            <summary>Gets or sets the collection of clipping paths for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <value>The collection of clipping paths for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</value>
            <remarks><para>Clipping path is a technique for cutting out a part of an image which is outside of a given vector path. For example, using clipping path you can select an area of the image and put it to a new background.</para></remarks>
            <seealso href="graphics.htm#ClippingPath" />
            <seealso href="working-with-path.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DpiX" draft="yes">
            <summary>Gets the horizontal resolution of the drawing surface (in pixels per inch).</summary>
            <value>The horizontal resolution of the drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.DpiY" draft="yes">
            <summary>Gets the vertical resolution of the drawing surface (in pixels per inch).</summary>
            <value>The vertical resolution of the drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FillingRule" draft="yes">
            <summary>Specifies a filling rule for a path.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FontRegistry" draft="yes">
            <summary>Gets or sets a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> associated with this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> associated with this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</value>
			<remarks><para>By default, <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.FontRegistry">Graphics.FontRegistry</see> contains the installed system fonts, but you can replace them with your own custom set.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#ReplaceGraphicsFonts"></code></example>
            <seealso href="fonts-and-measuring-text.htm#FontCreating" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Height" draft="yes">
            <summary>Gets a height of the drawing surface (in pixels).</summary>
            <value>The height of the drawing surface (in pixels).</value>
			<remarks><para>If this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> is associated with a <see cref="T:Aurigma.GraphicsMill.Bitmap" />, pixel height of this bitmap is returned. If it is associated with device context (DC), it returns DC pixel height.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Overprint" draft="yes">
            <summary>Gets or sets the overprint mode.</summary>
            <value><c>true</c> if the overprint mode is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Width" draft="yes">
            <summary>Gets a width of the drawing surface (in pixels).</summary>
            <value>The width of the drawing surface (in pixels).</value>
			<remarks><para>If this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> is associated with a <see cref="T:Aurigma.GraphicsMill.Bitmap" />, pixel width of this bitmap is returned. If it is associated with device context (DC), it returns DC pixel width.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Transform" draft="yes">
            <summary>Gets or sets a transformation matrix for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <value>The transformation matrix for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</value>
            <remarks><para>If the matrix defines some transformation, then all objects that are drawn on the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> after the transformation is set will undergo this transformation. By default no transformation is set.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#graphicsTransform"></code></example>
            <seealso href="affine-and-projective-transformations.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Graphics.Transparency" draft="yes">
            <summary>Gets or sets the transparency for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <value>The transparency for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</value>
            <seealso href="alpha-channel.htm" />
        </member>

<!-- AdvancedDrawing.GraphicsContainer -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" draft="yes">
            <summary>Represents a graphics metafile. Such containers can include composite vector images, bitmaps, and texts. They can be drawn on bitmaps, combined with each other, and used as start points of <see cref="T:Aurigma.GraphicsMill.Pipeline" />. You can find examples in the <see href="understanding-image-processing-approaches-in-graphics-mill.htm#GraphicsContainer" /> topic.</summary>
            <seealso cref="T:Aurigma.GraphicsMill.Pipeline" />
            <seealso cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />
            <seealso href="understanding-image-processing-approaches-in-graphics-mill.htm#GraphicsContainer" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.#ctor(Aurigma.GraphicsMill.IImageParams)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> class with the given <see cref="T:Aurigma.GraphicsMill.IImageParams" />.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> class.</summary></overloads>
            <param name="imageParams">An object, implementing <see cref="T:Aurigma.GraphicsMill.IImageParams" />, that contains parameters to initialize this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.#ctor(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> class with the given width, height, and resolution.</summary>
            <param name="width">The width of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</param>
            <param name="height">The height of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</param>
            <param name="dpiX">The horizontal resolution of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> in DPI.</param>
            <param name="dpiY">The vertical resolution of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.Disposed">
            <summary>Occurs when the graphics container has been disposed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetAlphaContour">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</returns>
            <remarks>For pixel formats without alpha channel, the contour is a rectangle.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetContentBounds">
            <summary>Gets the <see cref="T:System.Drawing.RectangleF" /> object that represents actual bounds of the container content.</summary>
            <returns>A <see cref="T:System.Drawing.RectangleF" /> object that contains the content bounds.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetPreferredColorProfile(Aurigma.GraphicsMill.ColorSpace)">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> that is most often used for the preferred color space in this container.</summary>
            <param name="colorSpace">A <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> for which you want to get the preffered color profile.</param>
            <returns><see cref="T:Aurigma.GraphicsMill.ColorProfile" /> that is most often used in this container.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetPreferredPixelFormat">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that is most often used in this container.</summary>
            <remarks>For an empty container <see cref="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetPreferredPixelFormat" /> returns <see cref="P:Aurigma.GraphicsMill.PixelFormat.FormatUnknown" /> because there is no any element that can define the pixel format.</remarks>
            <returns>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> object corresponding to the most often used in this container.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.GetGraphics">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.Scale(System.Single,System.Single)" draft="yes">
            <summary>Scales this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</summary>
            <param name="dx">The value to scale horizontally.</param>
            <param name="dy">The value to scale vertically.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.DpiX" draft="yes">
            <summary>Gets the horizontal resolution, in pixels per inch, of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</summary>
            <value>The horizontal resolution, in pixels per inch, of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.DpiY" draft="yes">
            <summary>Gets the vertical resolution, in pixels per inch, of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</summary>
            <value>The vertical resolution, in pixels per inch, of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.Height" draft="yes">
            <summary>Gets or sets the height of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />, in pixels.</summary>
            <value>The height of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />, in pixels.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer.Width" draft="yes">
            <summary>Gets or sets the width of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />, in pixels.</summary>
            <value>The width of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" />, in pixels.</value>
        </member>
		
		
<!-- AdvancedDrawing.InstalledFontRegistry -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.InstalledFontRegistry" draft="yes">
            <summary>Represents the set of fonts installed in the system.</summary>
            <seealso href="fonts-and-measuring-text.htm" />
            <threadsafety static="false" instance="false" />
        </member>

<!-- AdvancedDrawing.InvalidStyleValueException -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException" draft="yes">
            <summary>Represents the error that occurs when there is an invalid style in formatted text.</summary>
            <seealso href="advanced-formatted-text.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.InvalidStyleValueException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
		
<!-- AdvancedDrawing.T:Aurigma.GraphicsMill.AdvancedDrawing.IParagraphText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.IParagraphText" draft="yes">
            <summary>The interface implemented by all text classes that support paragraph settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.IParagraphText.Paragraph" draft="yes">
            <summary>Gets or sets paragraph settings of the text.</summary>
            <value>Paragraph settings of the text.</value>
        </member>

<!-- AdvancedDrawing.IWrappedText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.IWrappedText" draft="yes">
			<summary>The interface implemented by all text classes that support wrapping around paths.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.IWrappedText.WrappingPaths" draft="yes">
			<summary>Gets the collection of paths to wrap around.</summary>
			<value>Paths to wrap around.</value>
			<remarks>Text will be wrapped around all paths that are in the collection.</remarks>
        </member>

<!-- AdvancedDrawing.LinearGradientBrush -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush" draft="yes">
            <summary>Represents linear gradient brushes.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush)" draft="yes">
            <summary>Initializes a copy of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush" /> class of the specified linear gradient brush.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush.EndPoint" draft="yes">
            <summary>Gets or sets the end point of the linear gradient.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.LinearGradientBrush.StartPoint" draft="yes">
            <summary>Gets or sets the start point of the linear gradient.</summary>
        </member>

<!-- AdvancedDrawing.LineCap -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.LineCap" draft="yes">
            <summary>Contains the available cap styles with which a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> object can end a line.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineCap.Button" draft="yes">
            <summary>A flat line cap.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineCap.Round" draft="yes">
            <summary>A round line cap.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineCap.Square" draft="yes">
            <summary>A square line cap.</summary>
        </member>

<!-- AdvancedDrawing.LineJoin -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.LineJoin" draft="yes">
            <summary>Contains the type of a corner when two lines meet.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineJoin.Bevel">
            <summary>The beveled corner.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineJoin.Miter">
            <summary>The sharp corner.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.LineJoin.Round">
            <summary>The rounded corner.</summary>
        </member>
      
<!-- AdvancedDrawing.MainPath -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.MainPath">
			<summary>Specifies curve names to align double path text.</summary>
			<seelaso href="advanced-drawing-text.htm#DoublePathText" />
			<seelaso cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText" />
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.MainPath.Bottom">
			<summary>The bottom curve.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.MainPath.Top">
			<summary>The top curve.</summary>
        </member>

<!-- AdvancedDrawing.OpenTypeFeature -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature" draft="yes">
            <summary>Contains supported Open Type features. For more information about the features, refer to <see href="https://www.microsoft.com/typography/otspec/features_ae.htm" target="_blank">definitions and implementations</see>.</summary>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#DrawOpenTypeHashSet"></code></example>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Aalt" draft="yes">
            <summary>Access All Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Abvf" draft="yes">
            <summary>Above-base Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Abvm" draft="yes">
            <summary>Above-base Mark Positioning</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Abvs" draft="yes">
            <summary>Above-base Substitutions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Afrc" draft="yes">
            <summary>Alternative Fractions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Akhn" draft="yes">
            <summary>Akhand</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Blwf" draft="yes">
            <summary>Below-base Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Blwm" draft="yes">
            <summary>Below-base Mark Positioning</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Blws" draft="yes">
            <summary>Below-base Substitutions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.C2pc" draft="yes">
            <summary>Petite Capitals From Capitals</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.C2sc" draft="yes">
            <summary>Small Capitals From Capitals</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Calt" draft="yes">
            <summary>Contextual Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Case" draft="yes">
            <summary>Case-Sensitive Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ccmp" draft="yes">
            <summary>Glyph Composition/Decomposition. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Cfar" draft="yes">
            <summary>Conjunct Form After Ro</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Cjct" draft="yes">
            <summary>Conjunct Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Clig" draft="yes">
            <summary>Contextual Ligatures. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Cpct" draft="yes">
            <summary>Centered CJK Punctuation</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Cpsp" draft="yes">
            <summary>Capital Spacing</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Cswh" draft="yes">
            <summary>Contextual Swash</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Curs" draft="yes">
            <summary>Cursive Positioning. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Dist" draft="yes">
            <summary>Distances</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Dlig" draft="yes">
            <summary>Discretionary Ligatures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Dnom" draft="yes">
            <summary>Denominators</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Dtls" draft="yes">
            <summary>Dotless Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Expt" draft="yes">
            <summary>Expert Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Falt" draft="yes">
            <summary>Final Glyph on Line Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Fin2" draft="yes">
            <summary>Terminal Form #2</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Fin3" draft="yes">
            <summary>Terminal Form #3</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Fina" draft="yes">
            <summary>Terminal Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Flac" draft="yes">
            <summary>Flattened ascent forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Frac" draft="yes">
            <summary>Fractions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Fwid" draft="yes">
            <summary>Full Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Half" draft="yes">
            <summary>Half Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Haln" draft="yes">
            <summary>Halant Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Halt" draft="yes">
            <summary>Alternate Half Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hist" draft="yes">
            <summary>Historical Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hkna" draft="yes">
            <summary>Horizontal Kana Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hlig" draft="yes">
            <summary>Historical Ligatures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hngl" draft="yes">
            <summary>Hangul</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hojo" draft="yes">
            <summary>Hojo Kanji Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Hwid" draft="yes">
            <summary>Half Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Init" draft="yes">
            <summary>Initial Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Isol" draft="yes">
            <summary>Isolated Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ital" draft="yes">
            <summary>Italics</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Jalt" draft="yes">
            <summary>Justification Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Jp04" draft="yes">
            <summary>JIS2004 Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Jp78" draft="yes">
            <summary>JIS78 Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Jp83" draft="yes">
            <summary>JIS83 Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Jp90" draft="yes">
            <summary>JIS90 Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Kern" draft="yes">
            <summary>Kerning. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Lfbd" draft="yes">
            <summary>Left Bounds</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Liga" draft="yes">
            <summary>Standard Ligatures. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ljmo" draft="yes">
            <summary>Leading Jamo Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Lnum" draft="yes">
            <summary>Lining Figures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Locl" draft="yes">
            <summary>Localized Forms. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ltra" draft="yes">
            <summary>Left-to-right glyph alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ltrm" draft="yes">
            <summary>Left-to-right mirrored forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Mark" draft="yes">
            <summary>Mark Positioning. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Med2" draft="yes">
            <summary>Medial Forms #2</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Medi" draft="yes">
            <summary>Medial Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Mgrk" draft="yes">
            <summary>Mathematical Greek</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Mkmk" draft="yes">
            <summary>Mark to Mark Positioning. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Mset" draft="yes">
            <summary>Mark Positioning via Substitution</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Nalt" draft="yes">
            <summary>Alternate Annotation Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Nlck" draft="yes">
            <summary>NLC Kanji Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Nukt" draft="yes">
            <summary>Nukta Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Numr" draft="yes">
            <summary>Numerators</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Onum" draft="yes">
            <summary>Oldstyle Figures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Opbd" draft="yes">
            <summary>Optical Bounds</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ordn" draft="yes">
            <summary>Ordinals</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ornm" draft="yes">
            <summary>Ornaments</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Palt" draft="yes">
            <summary>Proportional Alternate Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pcap" draft="yes">
            <summary>Petite Capitals</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pkna" draft="yes">
            <summary>Proportional Kana</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pnum" draft="yes">
            <summary>Proportional Figures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pref" draft="yes">
            <summary>Pre-base Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pres" draft="yes">
            <summary>Pre-base Substitutions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pstf" draft="yes">
            <summary>Post-base Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Psts" draft="yes">
            <summary>Post-base Substitutions</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Pwid" draft="yes">
            <summary>Proportional Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Qwid" draft="yes">
            <summary>Quarter Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rand" draft="yes">
            <summary>Randomize</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rclt" draft="yes">
            <summary>Required Contextual Alternates. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rkrf" draft="yes">
            <summary>Rakar Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rlig" draft="yes">
            <summary>Required Ligatures. By default, this feature is enabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rphf" draft="yes">
            <summary>Reph Form</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rtbd" draft="yes">
            <summary>Right Bounds</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rtla" draft="yes">
            <summary>Right-to-left alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rtlm" draft="yes">
            <summary>Right-to-left mirrored forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ruby" draft="yes">
            <summary>Ruby Notation Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Rvrn" draft="yes">
            <summary>Required Variation Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Salt" draft="yes">
            <summary>Stylistic Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Sinf" draft="yes">
            <summary>Scientific Inferiors</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Size" draft="yes">
            <summary>Optical size</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Smcp" draft="yes">
            <summary>Small Capitals</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Smpl" draft="yes">
            <summary>Simplified Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss01" draft="yes">
            <summary>Stylistic Set 1</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss02" draft="yes">
            <summary>Stylistic Set 2</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss03" draft="yes">
            <summary>Stylistic Set 3</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss04" draft="yes">
            <summary>Stylistic Set 4</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss05" draft="yes">
            <summary>Stylistic Set 5</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss06" draft="yes">
            <summary>Stylistic Set 6</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss07" draft="yes">
            <summary>Stylistic Set 7</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss08" draft="yes">
            <summary>Stylistic Set 8</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss09" draft="yes">
            <summary>Stylistic Set 9</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss10" draft="yes">
            <summary>Stylistic Set 10</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss11" draft="yes">
            <summary>Stylistic Set 11</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss12" draft="yes">
            <summary>Stylistic Set 12</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss13" draft="yes">
            <summary>Stylistic Set 13</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss14" draft="yes">
            <summary>Stylistic Set 14</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss15" draft="yes">
            <summary>Stylistic Set 15</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss16" draft="yes">
            <summary>Stylistic Set 16</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss17" draft="yes">
            <summary>Stylistic Set 17</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss18" draft="yes">
            <summary>Stylistic Set 18</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss19" draft="yes">
            <summary>Stylistic Set 19</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ss20" draft="yes">
            <summary>Stylistic Set 20</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Ssty" draft="yes">
            <summary>Math script style alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Stch" draft="yes">
            <summary>Stretching Glyph Decomposition</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Subs" draft="yes">
            <summary>Subscript</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Sups" draft="yes">
            <summary>Superscript</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Swsh" draft="yes">
            <summary>Swash</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Titl" draft="yes">
            <summary>Titling</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Tjmo" draft="yes">
            <summary>Trailing Jamo Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Tnam" draft="yes">
            <summary>Traditional Name Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Tnum" draft="yes">
            <summary>Tabular Figures</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Trad" draft="yes">
            <summary>Traditional Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Twid" draft="yes">
            <summary>Third Widths</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Unic" draft="yes">
            <summary>Unicase</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Valt" draft="yes">
            <summary>Alternate Vertical Metrics</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vatu" draft="yes">
            <summary>Vattu Variants</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vert" draft="yes">
            <summary>Vertical Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vhal" draft="yes">
            <summary>Alternate Vertical Half Metrics</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vjmo" draft="yes">
            <summary>Vowel Jamo Forms</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vkna" draft="yes">
            <summary>Vertical Kana Alternates</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vkrn" draft="yes">
            <summary>Vertical Kerning</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vpal" draft="yes">
            <summary>Proportional Alternate Vertical Metrics</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vrt2" draft="yes">
            <summary>Vertical Alternates and Rotation</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Vrtr" draft="yes">
            <summary>Vertical Alternates for Rotation</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature.Zero" draft="yes">
            <summary>Slashed Zero</summary>
        </member>
      
<!-- AdvancedDrawing.ParagraphDirection -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphDirection" draft="yes">
            <summary>Contains the text direction options for paragraphs.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphDirection.LTR" draft="yes">
            <summary>The left-to-right direction.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphDirection.RTL" draft="yes">
            <summary>The right-to-left direction.</summary>
        </member>
      
<!-- AdvancedDrawing.ParagraphSettings -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings" draft="yes">
            <summary>Contains main paragraph settings.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.Direction" draft="yes">
            <summary>Gets or sets the text direction.</summary>
            <value>The direction of text in a paragraph.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.FirstLineIndent" draft="yes">
            <summary>Gets or sets the first line indent of the text.</summary>
            <value>The first line indent of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.LeftIndent" draft="yes">
            <summary>Gets or sets the left indent of the text.</summary>
            <value>The the left indent of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.OverlapLines" draft="yes">
            <summary>Gets or sets the overlap lines property of the text.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.RightIndent" draft="yes">
            <summary>Gets or sets the right indent of the text.</summary>
            <value>The right indent of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.SpaceAfter" draft="yes">
            <summary>Gets or sets the space after a paragraph in the text.</summary>
            <value>The space after a paragraph in the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.ParagraphSettings.SpaceBefore" draft="yes">
            <summary>Gets or sets the space before a paragraph in the text.</summary>
            <value>The space before a paragraph in the text.</value>
        </member>
		
<!-- AdvancedDrawing.Path -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Path">
			<summary>Represents a set of geometric elements (lines, curves, text, and graphics shapes) that can be used as a single object.</summary>
            <remarks><para>Paths can be used different operations: drawing outlined or filled path, drawing a text string along a path, and cropping an image.</para></remarks>
            <seealso href="graphics.htm#ClippingPath" />
            <seealso href="working-with-path.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.Path)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> class from the specified existing path.</summary>
			<param name="path">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.ApplyTransform(System.Drawing.Drawing2D.Matrix)">
			<summary>Applies the specified linear transfromation to this path.</summary>
			<param name="matrix">The matrix of the transformation.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#TransformPath"></code></example>
			<seealso href="working-with-path.htm#TransformPath" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Clear">
			<summary>Removes all elements of the path.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Close">
			<summary>Closes the path by copying the starting point to the ending one.</summary>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#ClosePath"></code></example>
			<seealso href="working-with-path.htm#ClosedPath" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Create(Aurigma.GraphicsMill.Codecs.ClippingPath.Path,System.Int32,System.Int32)">
			<summary>Creates a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> from the existing clipping path.</summary>
			<overloads><summary>Creates a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> from the existing path.</summary></overloads>
			<param name="clippingPath">The clipping path.</param>
			<param name="width">Width of an image containing the clipping path.</param>
			<param name="height">Height of an image containing the clipping path.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#CopyClippingPath"></code></example>
			<remarks><para>The clipping path is represented in relative coordinates, therefore you need to specify the height and width of the image.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Create(System.Drawing.Drawing2D.GraphicsPath)">
			<summary>Creates a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> from the existing <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
			<param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> from which to create the new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.CurveTo(System.Drawing.PointF,System.Drawing.PointF)">
			<summary>Adds a quadratic Bezier curve to the path.</summary>
			<overloads><summary>Adds a Bezier curve to the path.</summary></overloads>
			<param name="ctrlPoint">The control point for the curve.</param>
			<param name="point">The ending point of the curve.</param>
			<remarks><para>The starting point of the curve is the last point in the path.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#QuadraticPath"></code></example>
			<seealso href="working-with-path.htm#CopyingPath" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.CurveTo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
			<summary>Adds a cubic Bezier curve to the path.</summary>
			<param name="ctrlPoint1">The first control point for the curve.</param>
			<param name="ctrlPoint2">The second control point for the curve.</param>
			<param name="point">The ending point of the curve.</param>
			<remarks><para>The starting point of the curve is the last point in the path.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#CubicPath"></code></example>
			<seealso href="working-with-path.htm#CurveSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.CurveTo(System.Single,System.Single,System.Single,System.Single)">
			<summary>Adds a quadratic Bezier curve to the path.</summary>
			<param name="ctrlX">The x-coordinate of the curve control point.</param>
			<param name="ctrlY">The y-coordinate of the curve control point.</param>
			<param name="x">The x-coordinate of the curve ending point.</param>
			<param name="y">The y-coordinate of the curve ending point.</param>
			<remarks><para>The starting point of the curve is the last point in the path.</para></remarks>
			<seealso href="working-with-path.htm#CopyingPath" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
			<summary>Adds a cubic Bezier curve to the path.</summary>
			<param name="ctrlX1">The x-coordinate of the curve first control point.</param>
			<param name="ctrlY1">The y-coordinate of the curve first control point.</param>
			<param name="ctrlX2">The x-coordinate of the curve second control point.</param>
			<param name="ctrlY2">The y-coordinate of the curve second control point.</param>
			<param name="x">The x-coordinate of the curve ending point.</param>
			<param name="y">The y-coordinate of the curve ending point.</param>
			<seealso href="working-with-path.htm#CurveSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Dispose">
			<summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawEllipse(System.Drawing.RectangleF)">
			<summary>Adds an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" /> to the path.</summary>
			<overloads><summary>Adds an ellipse to the path.</summary></overloads>
			<param name="rectangle">A <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#FigurePath"></code></example>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawEllipse(System.Single,System.Single,System.Single,System.Single)">
			<summary>Adds an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width to the path.</summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawPath(Aurigma.GraphicsMill.AdvancedDrawing.Path)">
			<summary>Adds a new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> to the path.</summary>
			<param name="path">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> to add.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#CopyPath"></code></example>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawRectangle(System.Drawing.RectangleF)">
			<summary>Adds a rectangle defined by the <see cref="T:System.Drawing.RectangleF" /> structure to the path.</summary>
			<overloads><summary>Adds a rectangle to the path.</summary></overloads>
			<param name="rectangle">A rectangle to add.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#FigurePath"></code></example>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawRectangle(System.Single,System.Single,System.Single,System.Single)">
			<summary>Adds a rectangle defined by a pair of coordinates, a height, and a width to the path.</summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.DrawText(Aurigma.GraphicsMill.AdvancedDrawing.Text)">
			<summary>Adds a text outline to the path.</summary>
			<param name="text">A text to outline.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#CopyOutline"></code></example>
			<seealso href="working-with-path.htm#FigureSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetAlphaContour(Aurigma.GraphicsMill.Bitmap)">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</summary>
			<param name="bitmap">A bitmap to find contour in.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</returns>
			<remarks>For pixel formats without alpha channel, the contour is a rectangle.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetAlphaContour(Aurigma.GraphicsMill.Pipeline)">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</summary>
			<param name="pipeline">A pipeline to find contour in.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object that contains the perimeter of transparency mask.</returns>
			<remarks>For pixel formats without alpha channel, the contour is a rectangle.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetBounds">
			<summary>Returns the bounding rectangle of the path.</summary>
            <returns>The <see cref="T:System.Drawing.RectangleF" /> that represents the tightest bounding rectangle of the path.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetHashCode">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetLength">
			<summary>Returns length of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />, in pixels.</summary>
            <returns>The length of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" />, in pixels.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> object.</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Intersect(Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path)">
			<summary>Returns an intersection of the two specified paths.</summary>
			<param name="path1">The first path.</param>
			<param name="path2">The second path.</param>
			<returns>The path that contains elements included in the both given paths.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.LineTo(System.Drawing.PointF)">
			<summary>Adds a line to the path.</summary>
			<overloads><summary>Adds a line to the path.</summary></overloads>
			<param name="point">The ending point of the line.</param>
			<remarks><para>The starting point of the line is the last point in the path.</para></remarks>
			<seealso href="working-with-path.htm#LineSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.LineTo(System.Single,System.Single)">
			<summary>Adds a line to the path.</summary>
			<param name="x">The x-coordinate of the line ending point.</param>
			<param name="y">The y-coordinate of the line ending point.</param>
			<remarks><para>The starting point of the line is the last point in the path.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#LinePath"></code></example>
			<seealso href="working-with-path.htm#LineSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.MoveTo(System.Drawing.PointF)">
			<summary>Adds a point to the path.</summary>
			<overloads><summary>Adds a point to the path.</summary></overloads>
			<param name="point">The point to add.</param>
			<seealso href="working-with-path.htm#LineSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.MoveTo(System.Single,System.Single)">
			<summary>Adds a point to the path.</summary>
			<param name="x">The x-coordinate of the point.</param>
			<param name="y">The y-coordinate of the point.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#LinePath"></code></example>
			<seealso href="working-with-path.htm#LineSegment" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Path.Points">
			<summary>Gets the points of the path.</summary>
			<value>The collection that includes points of the path.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Rotate(System.Single)">
			<summary>Rotates the path by the given angle.</summary>
			<param name="angle">The value in radians by which the path is rotated.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Scale(System.Single,System.Single)">
			<summary>Scales coordinates of all points in the path.</summary>
			<param name="scaleX">The value by which to scale x-coordinates of the path points.</param>
			<param name="scaleY">The value by which to scale y-coordinates of the path points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Split">
            <summary>Splits a path into separate paths.</summary>
            <returns>The array of <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> objects.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Subtract(Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path)">
			<summary>Returns a result of subtraction of the second path from the first path.</summary>
			<param name="path1">The first path.</param>
			<param name="path2">The second path.</param>
			<returns>The path that contains elements included in the first path only.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.ToGdiPlusGraphicsPath">		
			<summary>Converts the path to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
			<returns>The converted path as the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.</returns>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#LinePath"></code></example>
			<seealso href="working-with-path.htm#LineSegment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Translate(System.Single,System.Single)">
			<summary>Translates the path.</summary>
			<param name="dx">The value by which path moved on the x-axis.</param>
			<param name="dy">The value by which path moved on the y-axis.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Union(Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path)">
			<summary>Returns a union of the two specified paths.</summary>
			<param name="path1">The first path.</param>
			<param name="path2">The second path.</param>
			<returns>The path that contains elements included in any of the given paths.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Path.Xor(Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.Path)">
			<summary>Returns a result of exclusive disjunction of the two paths.</summary>
			<param name="path1">The first path.</param>
			<param name="path2">The second path.</param>
			<returns>The path that contains elements included in any of the given paths, but not in the both. Elements that are included in the both paths are removed from the result path.</returns>
        </member>

<!-- AdvancedDrawing.PathBoundedText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText">
            <summary>Draws the bounded text.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determinies the color of the drawn text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.BoundingPaths" draft="yes">
            <summary>Gets the bounding paths for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText" /> object.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.Paragraph" draft="yes">
            <summary>Gets paragraph settings of the text.</summary>
            <value>Paragraph settings of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.Underline" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is underlined.</summary>
            <value><c>true</c> if the text is underlined; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.Vertical" draft="yes">
            <summary>Gets or sets a value that indicates whether the text locates vertically.</summary>
            <value><c>true</c> if the text locates vertically; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathBoundedText.WrappingPaths" draft="yes">
            <summary>Gets the collection of paths to wrap the text around.</summary>
            <value>Paths to wrap around.</value>
            <remarks>Text will be wrapped around all paths that are in the collection.</remarks>
        </member>
      
<!-- AdvancedDrawing.PathPoint -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint">
			<summary>Represents a point in a path.</summary>
            <seealso href="working-with-path.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint.#ctor(System.Single,System.Single,Aurigma.GraphicsMill.AdvancedDrawing.PathPointType)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint" /> class.</summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="type">The type of the point.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint.op_Implicit(Aurigma.GraphicsMill.AdvancedDrawing.PathPoint)~System.Drawing.PointF" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint" /> to a <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see>.</summary>
            <param name="pathPoint">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint" /> to convert.</param>
            <returns>A <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see> that represents the converted PathPoint object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint.Type">
            <summary>Gets or sets the type of the point.</summary>
            <value>The type of the point.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint.X">
            <summary>Gets or sets the x-coordinate of the point.</summary>
            <value>The x-coordinate of the point.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathPoint.Y">
            <summary>Gets or sets the y-coordinate of the point.</summary>
            <value>The y-coordinate of the point.</value>
        </member>

<!-- AdvancedDrawing.PathPointCollection -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection">
			<summary>Represents a collection of the points in a path.</summary>
            <seealso href="working-with-path.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.Path)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection" /> class with the points from the path.</summary>
            <param name="path">The path to get points from.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection.Count" draft="yes">
            <summary>Gets the number of points in collection.</summary>
            <value>The number of the points in collection.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection.GetEnumerator" draft="yes"> 
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection.GetEnumerator2" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection" />.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathPointCollection.Item(System.Int32)" draft="yes">
            <summary>Gets a point with the given index from collection.</summary>
            <param name="index">Index of the point to get.</param>
            <value>The point with the given index.</value>
        </member>

<!-- AdvancedDrawing.PathPointType -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PathPointType">
			<summary>Specifies types of points in a path.</summary>
			<seelaso href="working-with-path.htm" />
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.PathPointType.Bezier">
			<summary>The ending point of a Bezier curve.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.PathPointType.Line">
			<summary>The ending point of a line.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.PathPointType.Move">
			<summary>The point that can be starting point of a line or a curve.</summary>
        </member>

<!-- AdvancedDrawing.PathText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" draft="yes">
            <summary>Represents the distorted text drawn along a path.</summary>
            <seealso href="advanced-drawing-text.htm" />
			<seealso href="working-with-path.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" /> class with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" /> class with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" /> class with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="path"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Path" /> specifying the curve along which the the text locates.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#distortedText"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,Aurigma.GraphicsMill.AdvancedDrawing.Path,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" /> class with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="path"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Path" /> specifying the curve along which the text locates.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.AutoExtend">
            <summary>Gets or sets a value that indicates whether the text should be drawn outside the path.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Dispose(System.Boolean)">
                <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.End" draft="yes">
            <summary>Gets or sets the end point of the text on the path .</summary>
            <value>An end point of the text on the path. <c>0</c> is the beginning of the path, <c>0.5</c> is the middle of the path, and <c>1</c> is the end of the path.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PathText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PathText" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Path" draft="yes">
            <summary>Gets or sets the path specifying the curve along which the text locates.</summary>
            <value>A vector path specifying the curve along which the text locates.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Start" draft="yes">
            <summary>Gets or sets the start point of the text on the path .</summary>
            <value>A start point of the text on the path. <c>0</c> is the beginning of the path, <c>0.5</c> is the middle of the path, and <c>1</c> is the end of the path.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PathText.Stretch" draft="yes">
            <summary>Gets or sets the glyphs stretching.</summary>
            <value><c>true</c> if the glyphs should be stretched; otherwise, <c>false</c>.</value>
			<remarks><para>Glyphs could be stretched if the path has sharp curves.</para></remarks>
        </member>

<!-- AdvancedDrawing.Pen -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" draft="yes">
            <summary>Defines an object used to draw lines and curves.</summary>
            <seealso href="graphics.htm#PenBrush" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Pen.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.Pen)" draft="yes">
            <summary>Initializes new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> from the specified existing pen.</summary>
            <overloads><summary>Initializes new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary></overloads>
            <param name="pen">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Pen.#ctor(Aurigma.GraphicsMill.Color,System.Single)">
            <summary>Initializes new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> with the given color and width.</summary>
            <param name="color">Color of this pen.</param>
            <param name="width">Width of this pen.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Pen.#ctor(Aurigma.GraphicsMill.Color)">
            <summary>Initializes new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> with the given color.</summary>
            <param name="color">Color of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</param>
            <remarks><para>The default width of this pen is <c>1</c>.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.Color">
            <summary>Gets or sets the color of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary>
            <value>The color of the pen.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.DashOffset">
            <summary>Gets or sets the dash offset of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary>
            <value>The dash offset of the pen.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.DashPattern">
            <summary>Gets or sets the dash pattern of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary>
            <value>The array representing a sequence of painted and unpainted units.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Pen.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.LineCap">
            <summary>Gets or sets the cap style with which this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" /> object can end a line.</summary>
            <value>The cap style.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.LineJoin">
            <summary>Gets or sets the type of a corner when two lines meet.</summary>
            <value>The line join style.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.MiterLimit">
            <summary>Gets or sets the value that defines how sharp should be a line join.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Pen.Width">
            <summary>Gets or sets the width of this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Pen" />.</summary>
            <value>The width of the pen.</value>
        </member>

<!-- AdvancedDrawing.PlainText -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" draft="yes">
            <summary>Represents the plain text.</summary>
            <seealso href="advanced-drawing-text.htm#PlainText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> class with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> class.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> class with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the starting point of the baseline.</param>
            <param name="y">The y-coordinate of the starting point of the baseline.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#plainText"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="position">The starting point of the baseline.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#plainText"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="point">The starting point of the baseline.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the starting point of the baseline.</param>
            <param name="y">The y-coordinate of the starting point of the baseline.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment" />, and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the starting point of the baseline.</param>
            <param name="y">The y-coordinate of the starting point of the baseline.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment" />, and baseline coordinates.</summary>
            <param name="text">A string to draw.</param>
            <param name="font">Defines the font characteristics of the text.</param>
            <param name="brush"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="point">The starting point of the baseline.</param>
            <param name="alignment">Specifies alignment of the text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.Alignment" draft="yes">
            <summary>Gets or sets the text alignment.</summary>
            <value>The text alignment.</value>
            <seealso href="advanced-drawing-text.htm#Alignment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.PlainText" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.Paragraph" draft="yes">
            <summary>Gets or sets paragraph settings of the text.</summary>
            <value>Paragraph settings of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.Position" draft="yes">
            <summary>Gets or sets the starting point coordinates of the baseline of the first text line.</summary>
            <value>Coordinates of the the starting point of the baseline.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.Underline" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is underlined.</summary>
            <value><c>true</c> if the text is underlined; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.Vertical" draft="yes">
            <summary>Gets or sets a value that indicates whether the text locates vertically.</summary>
            <value><c>true</c> if the text locates vertically; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.PlainText.WrappingPaths" draft="yes">
			<summary>Gets the collection of paths to wrap the text around.</summary>
			<value>Paths to wrap around.</value>
			<remarks>Text will be wrapped around all paths that are in the collection.</remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#wrapPlainText"></code></example>
        </member>

<!-- AdvancedDrawing.RadialGradientBrush -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush" draft="yes">
            <summary>Represents radial gradient brushes.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush)" draft="yes">
            <summary>Initializes a copy of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush" /> class of the specified radial gradient brush.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.EndPoint" draft="yes">
            <summary>Gets or sets the end point of the radial gradient.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.EndRadius" draft="yes">
            <summary>Gets or sets the end radius of the radial gradient.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.StartPoint" draft="yes">
            <summary>Gets or sets the start point of the radial gradient.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.RadialGradientBrush.StartRadius" draft="yes">
            <summary>Gets or sets the start radius of the radial gradient.</summary>
        </member>      
      
<!-- AdvancedDrawing.SolidBrush -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" draft="yes">
            <summary>Represents a brush of a dingle color.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush)" draft="yes">
            <summary>Initializes new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> from the specified existing solid brush.</summary>
            <overloads><summary>Initializes new <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />.</summary></overloads>
            <param name="brush">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush.#ctor(Aurigma.GraphicsMill.Color)">
            <summary>Initializes new <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> with the given color.</summary>
            <param name="color">Color of the brush.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush.Color">
            <summary>Gets or sets the color of the brush.</summary>
            <value>The color of the brush.</value>
        </member>
		
<!-- AdvancedDrawing.StringMeasure -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure" draft="yes">
            <summary>Contains string measurments.</summary>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#stringMetrics"></code></example>
            <seealso href="fonts-and-measuring-text.htm#TextMeasuring" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure.Ascender" draft="yes">
            <summary>Gets or sets string ascender.</summary>
            <value>The string ascender.</value>
			<remarks><para>String ascender is the vertical distance from the horizontal baseline to the highest character coordinate in a string, in pixels.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm#FontMetrics" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure.Descender" draft="yes">
            <summary>Gets or sets string descender.</summary>
            <value>The string descender.</value>
			<remarks><para>String descender is the vertical distance from the horizontal baseline to the lowest character coordinate in a string, in pixels.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm#FontMetrics" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure.Height" draft="yes">
            <summary>Gets or sets string height.</summary>
            <value>The string height.</value>
			<remarks><para>String height is the default line spacing (the baseline-to-baseline distance) in pixels. This value usually is larger than the sum of the ascender and descender taken as absolute values. There is also no guarantee that no glyphs extend above or below subsequent baselines when using this distance. You may think of it as a value the designer of the font finds appropriate.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm#FontMetrics" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure.Width" draft="yes">
            <summary>Gets or sets string width.</summary>
            <value>The string width in pixels.</value>
            <seealso href="fonts-and-measuring-text.htm#FontMetrics" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure.IsEmpty" draft="yes">
            <summary>Gets a value indicating whether this string is empty.</summary>
            <value><c>true</c> if the string is empty; otherwise, <c>false</c>.</value>
        </member>

<!-- AdvancedDrawing.Text -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" draft="yes">
            <summary>A base class for all text classes.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" /> class with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A text string.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Alignment" draft="yes">
            <summary>Gets or sets the text alignment.</summary>
            <value>The text alignment.</value>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#AligningText"></code></example>
            <seealso href="advanced-drawing-text.htm#Alignment" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.Apply(boost.shared_ptr&lt;ImagingFramework::Drawing::TextBase&gt;|System.Runtime.CompilerServices.IsCopyConstructed*)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.Apply(boost.shared_ptr&lt;ImagingFramework::Drawing::Text::TextBase&gt;|System.Runtime.CompilerServices.IsCopyConstructed*)" draft="yes">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Brush">
            <summary>Gets or sets the fill of the text.</summary>
            <value>The fill of the text.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.Create(Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame,Aurigma.GraphicsMill.AdvancedDrawing.Graphics)">
            <summary>Creates an appropriate text object based on the specified PSD text layer and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" />.</summary>
            <param name="psdTextFrame">A PSD text layer to get text from.</param>
            <param name="graphics">A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> to get settings from.</param>
            <returns>The appropriate descendant of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" /> class.</returns>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#LoadFromPSD"></code></example>
            <seealso href="advanced-drawing-text.htm#LoadingFromPSD" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.DigitType" draft="yes">
            <summary>Gets or sets the digit type.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.DigitType" /> of digits.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Effect">
            <summary>Gets or sets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Effect" /> of the text.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Effect" /> of the text.</value>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#ColoringText"></code></example>
            <seealso href="advanced-drawing-text.htm#Effects" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.FitTo(System.Drawing.RectangleF)" draft="yes">
            <summary>Configures text settings to fit the text to the given rectangle.</summary>
			<param name="rect">The rectangle to fit text to.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Font">
            <summary>Gets or sets the font of the text.</summary>
            <value>The font of the text.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.GetBlackBox" draft="yes">
            <summary>Returns the black box for the text.</summary>
            <returns>The rectangle that describes the text black box.</returns>
            <remarks><para>Text black box is a tightest bounding rectangle of the text.</para></remarks>
            <seealso href="fonts-and-measuring-text.htm#FontMetrics" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Text.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Kernings">
            <summary>Gets or sets the value of spacing between characters.</summary>
            <value>The text kernings. These values are measured in 1/1000 em.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Leading" draft="yes">
            <summary>Gets or sets text leading.</summary>
            <value>The text leading.</value>
            <remarks>Leading is the amount of extra space between rows.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.OpenTypeFeatures" draft="yes">
            <summary>Gets the Open Type features.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.OpenTypeFeature" /> applied to text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Pen">
            <summary>Gets or sets the outline of the text.</summary>
            <value>The outline of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.String">
            <summary>Gets or sets the text string.</summary>
            <value>The text string.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Tracking" draft="yes">
            <summary>Gets or sets a text tracking (also known as intercharacter spacing).</summary>
            <value>The text tracking. The default value is <c>0</c>.</value>
            <remarks>Text tracking is a spacing between characters in the text string. It is added to each character, including break character.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.Transform" draft="yes">
            <summary>Gets or sets a transformation matrix for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" />.</summary>
            <value>The transformation matrix for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Text" />.</value>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#Transformation"></code></example>
            <seealso href="affine-and-projective-transformations.htm" />
            <seealso href="advanced-drawing-text.htm#Transformation" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Text.WordSpacingScale">
            <summary>Gets or sets the word spacing in text rendering.</summary>
            <value>The word spacing value.</value>
        </member>
		
<!-- AdvancedDrawing.TextAlignment -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment">
            <summary>Specifies text alignment (left, center, or right for horizontal text; top, center, or bottom for vertical text).</summary>
            <remarks><para>Alignment of each text is performed relatively to its location.</para></remarks>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#AligningText"></code></example>
            <seealso href="advanced-drawing-text.htm#Alignment" />
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Bottom">
            <summary>Aligns vertical text to the bottom.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Center">
            <summary>Aligns horizontal or vertical text to the center.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Justification">
            <summary>Distributes horizontal or vertical text along the text area.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Left">
            <summary>Aligns horizontal text to the left side.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Right">
            <summary>Aligns horizontal text to the right side.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.AdvancedDrawing.TextAlignment.Top">
            <summary>Aligns vertical text to the top.</summary>
        </member>

<!-- AdvancedDrawing.TilingBrush -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" draft="yes">
            <summary>Represents the tiling brush.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush.#ctor(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" /> class with the given width, height, and resolution.</summary>
            <param name="width">The width of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" />.</param>
            <param name="height">The height of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" />.</param>
            <param name="dpiX">The horizontal resolution of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" /> in DPI.</param>
            <param name="dpiY">The vertical resolution of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" /> in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.TilingBrush.Graphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> to draw on an image.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> providing the advanced drawing surface.</value>
        </member>
      
<!-- AdvancedDrawing.UnknownStyleNameException -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException" draft="yes">
            <summary>Represents the error that occurs when there is an unknown style in formatted text.</summary>
            <seealso href="advanced-formatted-text.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownStyleNameException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
		
<!-- AdvancedDrawing.UnknownTagException -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException" draft="yes">
            <summary>Represents the error that occurs when there is an unknown tag in formatted text.</summary>
            <seealso href="advanced-formatted-text.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.UnknownTagException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>

<!-- AdvancedDrawing.Art namespace -->
        <member name="N:Aurigma.GraphicsMill.AdvancedDrawing.Art" draft="yes">
            <summary>Represents a gallery of artistic texts.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
		
<!-- AdvancedDrawing.Art.ArtText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" draft="yes">
            <summary>Represents the base class for the gallery of artistic texts.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" /> class with the given string and font.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" /> class.</summary></overloads>
            <param name="text">A text string.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" /> class with the given string, font, and central point.</summary>
            <param name="text">A text string.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.PointF" /> structure that specifies the center of the art text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" draft="yes">
            <summary>Gets or sets the center of the art text.</summary>
            <value>A <see cref="T:System.Drawing.PointF" /> structure that specifies the center of the art text.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.InitPathText(Aurigma.GraphicsMill.AdvancedDrawing.PathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.BridgeText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" draft="yes">
            <summary>Draws the bridge text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the bridge text is bended.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> class.</summary></overloads>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the bridge text is bended. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> specifying how much the bridge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bridge text.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#ArtText"></code></example>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bridge text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> specifying how much the bridge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bridge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> specifying how much the bridge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bridge text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bridge text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.Bend" /> specifying how much the bridge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BridgeText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.BulgeText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" draft="yes">
            <summary>Draws the bulge text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the bulge text is bended.</summary>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the bulge text is bended. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> class.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> specifying how much the bulge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bulge text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bulge text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> specifying how much the bulge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the bulge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> specifying how much the bulge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bulge text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the bulge text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.Bend" /> specifying how much the bulge text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.BulgeText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.PinchText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" draft="yes">
            <summary>Draws the pinch text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the pinch text is bended.</summary>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the pinch text is bended. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> class.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> specifying how much the pinch text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the pinch text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the pinch text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> specifying how much the pinch text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the pinch text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> specifying how much the pinch text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the pinch text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the pinch text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.Bend" /> specifying how much the pinch text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.PinchText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.RoofText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" draft="yes">
            <summary>Draws the roof text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the roof text is bended.</summary>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the roof text is bended. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> class.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> specifying how much the roof text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the roof text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the roof text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> specifying how much the roof text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the roof text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> specifying how much the roof text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the roof text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the roof text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.Bend" /> specifying how much the roof text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoofText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.RoundText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" draft="yes">
            <summary>Draws the round text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the round text is rounded.</summary>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the round text is rounded. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> class.</summary></overloads>
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> specifying how much the text is rounded.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the rounded text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the rounded text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> specifying how much the text is rounded.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the round text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> specifying how much the text is rounded.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the rounded text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the rounded text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.Bend" /> specifying how much the text is rounded.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.RoundText.InitPathText(Aurigma.GraphicsMill.AdvancedDrawing.PathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.ValleyText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" draft="yes">
            <summary>Draws the valley text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" draft="yes">
            <summary>Gets or sets the value indicating how much the valley text is bended.</summary>
            <value>The <see cref="T:System.Single" /> value can be in the range <span class="code">[0; 1]</span>, where the more the value is, the more the valley text is bended. By default, the <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> value is <span class="code">0</span>.</value>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> class.</summary></overloads>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> specifying how much the valley text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the valley text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />, <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" />, and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the valley text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> specifying how much the valley text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the valley text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> specifying how much the valley text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the valley text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the valley text.</param>
            <param name="bend"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.Bend" /> specifying how much the valley text is bended.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.ValleyText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Art.WedgeText -->		
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" draft="yes">
            <summary>Draws the wedge text.</summary>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.LeftScale" draft="yes">
            <summary>Gets or sets the value scaling the left edge of the wedge text.</summary>
            <value><see cref="T:System.Single" /> scaling the left edge of the text. The default value is <span class="code">1</span>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font)" draft="yes">
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> class.</summary></overloads>
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="x">The x-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="leftScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.LeftScale" /> scales the left edge of the text.</param>
            <param name="rightScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <param name="tilt"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.Tilt" /> specifies the extent of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the wedge text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,Aurigma.GraphicsMill.AdvancedDrawing.Brush,System.Drawing.PointF,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="color"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.SolidBrush" /> determining the color of the drawn text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the wedge text.</param>
            <param name="leftScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.LeftScale" /> scales the left edge of the text.</param>
            <param name="rightScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <param name="tilt"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="x">The x-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="y">The y-coordinate of the wedge text's <see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.ArtText.Center" />.</param>
            <param name="leftScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.LeftScale" /> scales the left edge of the text.</param>
            <param name="rightScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <param name="tilt"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" />.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the wedge text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.Font,System.Drawing.PointF,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText" /> object at the specified location with the specified settings.</summary>
            <param name="text">A string to draw.</param>
            <param name="font"><see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Font" /> defining the font characteristics of the text.</param>
            <param name="center"><see cref="T:System.Drawing.Point" /> specifying the center of the wedge text.</param>
            <param name="leftScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.LeftScale" /> scales the left edge of the text.</param>
            <param name="rightScale"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <param name="tilt"><see cref="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" /> scales the right edge of the text.</param>
            <seealso href="advanced-drawing-text.htm#ArtText" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.RightScale" draft="yes">
            <summary>Gets or sets the value scaling the right edge of the wedge text.</summary>
            <value><see cref="T:System.Single" /> scaling the right edge of the text. The default value is <span class="code">1</span>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.Tilt" draft="yes">
            <summary>Gets or sets the extent of the slanting text.</summary>
            <value><see cref="T:System.Single" /> specifying the extent of the text. The more the value is, the more text will be slanted. The default value is <span class="code">0</span>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Art.WedgeText.InitDoublePathText(Aurigma.GraphicsMill.AdvancedDrawing.DoublePathText,System.Int32,Aurigma.GraphicsMill.AdvancedDrawing.StringMeasure)" draft="yes">
            <exclude />
        </member>
		
<!-- AdvancedDrawing.Effects Namespace -->
        <member name="N:Aurigma.GraphicsMill.AdvancedDrawing.Effects" draft="yes">
            <summary>Specifies the text effects.</summary>
            <seealso href="advanced-drawing-text.htm#Effects" />
        </member>

<!-- AdvancedDrawing.Effects.Effect -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Effect" draft="yes">
            <summary>Represents the base class for text effects.</summary>
            <remarks><para>This class is abstract, so you cannot directly instantiate it. You should create a derived class.</para></remarks>
            <seealso href="advanced-drawing-text.htm#Effects" />
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Effect.#ctor" draft="yes">
			<exclude />
        </member>

<!-- AdvancedDrawing.Effects.Glow -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" draft="yes">
            <summary>Creates the glowing effect.</summary>
            <seealso href="advanced-drawing-text.htm#Effects" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.Color" draft="yes">
            <summary>Gets or sets the color of the glow.</summary>
            <value>The color of the glow.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.#ctor" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" /> effect.</summary>
            <overloads><summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" /> effect.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" /> effect with the specified color.</summary>
            <param name="color">The color of the glow.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.#ctor(Aurigma.GraphicsMill.Color,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" /> effect with the specified color and size.</summary>
            <param name="color">The color of the glow.</param>
            <param name="size">The size of the glow in points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.#ctor(Aurigma.GraphicsMill.Color,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow" /> effect with the specified color, size, and opacity.</summary>
            <param name="color">The color of the glow.</param>
            <param name="size">The size of the glow in points.</param>
            <param name="opacity">The opacity of the glow.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#GlowAndShadow"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.Opacity" draft="yes">
            <summary>Gets or sets the opacity of the glow.</summary>
            <value>The opacity of the glow.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Glow.Size" draft="yes">
            <summary>Gets or sets the size of the glow in points.</summary>
            <value>The size of the glow in points.</value>
        </member>

<!-- AdvancedDrawing.Effects.Shadow -->
        <member name="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" draft="yes">
            <summary>Creates the shadowing effect.</summary>
            <seealso href="advanced-drawing-text.htm#Effects" />
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.Color" draft="yes">
            <summary>Gets or sets the color of the shadow.</summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor" draft="yes">
            <overloads><summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified color.</summary>
            <param name="color">The color of the shadow.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(Aurigma.GraphicsMill.Color,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified color and size.</summary>
            <param name="color">The color of the shadow.</param>
            <param name="size">The size of the shadow in points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(Aurigma.GraphicsMill.Color,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified color, size, and offset.</summary>
            <param name="color">The color of the shadow.</param>
            <param name="size">The size of the shadow in points.</param>
            <param name="offsetX">The x-coordinate of the offset of the shadow in points.</param>
            <param name="offsetY">The y-coordinate of the offset of the shadow in points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(Aurigma.GraphicsMill.Color,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified color, size, offset, and opacity.</summary>
            <param name="color">The color of the shadow.</param>
            <param name="size">The size of the shadow in points.</param>
            <param name="offsetX">The x-coordinate of the offset of the shadow in points.</param>
            <param name="offsetY">The y-coordinate of the offset of the shadow in points.</param>
            <param name="opacity">The opacity of the shadow.</param>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#GlowAndShadow"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified size.</summary>
            <param name="size">The size of the shadow in points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified size and offset.</summary>
            <param name="size">The size of the shadow in points.</param>
            <param name="offsetX">The x-coordinate of the offset of the shadow in points.</param>
            <param name="offsetY">The y-coordinate of the offset of the shadow in points.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.#ctor(System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" /> effect with the specified size, offset, and opacity.</summary>
            <param name="offsetX">The x-coordinate of the offset of the shadow in points.</param>
            <param name="offsetY">The y-coordinate of the offset of the shadow in points.</param>
            <param name="opacity">The opacity of the shadow.</param>
        </member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.Dispose">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow" />.</summary>
		</member>
		<member name="M:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.Dispose(System.Boolean)">
			<exclude />
		</member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.OffsetX" draft="yes">
            <summary>Gets or sets the x-coordinate of the offset of the shadow in points.</summary>
            <value>The x-coordinate of the offset of the shadow in points.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.OffsetY" draft="yes">
            <summary>Gets or sets the y-coordinate of the offset of the shadow in points.</summary>
            <value>The y-coordinate of the offset of the shadow in points.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.Opacity" draft="yes">
            <summary>Gets or sets the opacity of the shadow.</summary>
            <value>The opacity of the shadow.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.AdvancedDrawing.Effects.Shadow.Size" draft="yes">
            <summary>Gets or sets the size of the shadow in points.</summary>
            <value>The size of the shadow in points.</value>
        </member>

<!-- Bitmap -->		
        <member name="T:Aurigma.GraphicsMill.Bitmap" draft="yes">
            <summary>Represents a bitmap, i.e. an object which stores raster data.</summary>
            <remarks><para>This class incapsulates a raster image and stores a bitmap as well as other related data.</para><para>Using appropriate properties you can get such details about loaded image as <see cref="P:Aurigma.GraphicsMill.Bitmap.Width" />, <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" />, <see cref="P:Aurigma.GraphicsMill.Bitmap.PixelFormat" />, etc.</para><para>To apply some effect or transform, you should pass this bitmap into the <see cref="M:Aurigma.GraphicsMill.Transforms.Transform.Apply(Aurigma.GraphicsMill.Bitmap)" /> method of an appropriate <see cref="T:Aurigma.GraphicsMill.Transforms.Transform" /> class descendant. Alternatively, you can use the <see cref="P:Aurigma.GraphicsMill.Bitmap.Transforms" /> property which returns the <see cref="T:Aurigma.GraphicsMill.TransformsProvider" />. It is less flexible, but has shorter syntax.</para><para>If you need to work with bitmap channels: split channels into several grayscale bitmaps, replace some channel with a grayscale image, swap channels, add/remove an alpha channel, etc. In this case you can use the <see cref="P:Aurigma.GraphicsMill.Bitmap.Channels" /> property which returns the <see cref="T:Aurigma.GraphicsMill.ChannelsProvider" />.</para><para>If you need to get/set the single pixel value, you can use easy-to-use pair of methods <see cref="M:Aurigma.GraphicsMill.Bitmap.GetPixel(System.Int32,System.Int32)" />/<see cref="M:Aurigma.GraphicsMill.Bitmap.SetPixel(System.Int32,System.Int32,Aurigma.GraphicsMill.Color)" />.</para><para>To save the result to file you can either use format writers or the <see cref="M:Aurigma.GraphicsMill.Bitmap.Save(System.String)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.new"></code></example>
            <seealso href="understanding-image-processing-approaches-in-graphics-mill.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.ApplyTransform(Aurigma.GraphicsMill.Transforms.IBitmapTransform)" draft="yes">
            <summary>Applies the specified transfrom to this bitmap.</summary>
            <param name="bitmapTransform">A <see cref="T:Aurigma.GraphicsMill.Transforms.IBitmapTransform" /> to apply.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Channels" draft="yes">
            <summary>Gets an object which provides access to various operations with bitmap channels.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ChannelsProvider" /> object containing methods which allow operating with bitmap channels.</value>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.channels"></code></example>
            <seealso href="reading-and-writing-channels.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.ColorAdjustment" draft="yes">
            <summary>Gets an object providing methods which are responsible for color adjustment and tone correction (brightness/contrast, levels, hue/saturation/lightness adjustment, etc.).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorAdjustmentProvider" /> class instance providing methods which are responsible for color adjustment and tone correction.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.ColorManagement" draft="yes">
            <summary>Gets an object providing methods which are responsible for color management.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorManagementProvider" /> class instance providing methods which are responsible for color management.</value>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#cmykToRgbCMInPlace"></code></example>
            <seealso href="converting-color-with-color-management.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.ColorProfile" draft="yes">
            <summary>Gets or sets a color profile associated with this bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with this bitmap.</value>
            <remarks>If no color profile was loaded from a file (e.g. file has no embedded profile) this property returns <c>null</c>.</remarks>
            <example><para>ColorProfile property can be also used to embed another profile into the image:</para><code language="CS" source="Samples/Code/Reference.cs#bitmap.colorProfile"></code></example>
            <seealso href="converting-color-with-color-management.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.DpiX" draft="yes">
            <summary>Gets or sets the horizontal resolution, in pixels per inch, of this bitmap.</summary>
            <value>The horizontal resolution, in pixels per inch, of this bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.DpiY" draft="yes">
            <summary>Gets or sets the vertical resolution, in pixels per inch, of this bitmap.</summary>
            <value>The vertical resolution, in pixels per inch, of this bitmap.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <seealso href="combine-modes.htm" />
            <overloads><summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="topPlacement"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> on the current bitmap.</summary>
            <param name="topBitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="topPlacement"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="combineMode">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <seealso href="combine-modes.htm" />
            <overloads><summary>Draws a bitmap on various surfaces as <see cref="T:Aurigma.GraphicsMill.Bitmap" /> or <see cref="T:System.Drawing.Graphics" /> classes, or Windows GDI device context.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationWidth">Width of the drawn image.</param>
            <param name="destinationHeight">Height of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationWidth">Width of the drawn image.</param>
            <param name="destinationHeight">Height of the drawn image.</param>
            <param name="sourceX">The x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceY">The y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceWidth">Width of the source rectangle.</param>
            <param name="sourceHeight">Height of the source rectangle.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object (standard .NET class for drawing).</summary>
            <param name="destinationGraphics">A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object on which the current bitmap should be drawn.</param>
            <param name="destinationRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="sourceRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the image object to draw.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given HDC with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given HDC with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationWidth">Width of the drawn image.</param>
            <param name="destinationHeight">Height of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationWidth">Width of the drawn image.</param>
            <param name="destinationHeight">Height of the drawn image.</param>
            <param name="sourceX">The x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceY">The y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="sourceWidth">Width of the source rectangle.</param>
            <param name="sourceHeight">Height of the source rectangle.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.DrawOn(System.IntPtr,System.Drawing.Rectangle,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the current bitmap on a given Windows GDI device context (represented as handle to device context, i.e. HDC).</summary>
            <param name="hdc">A handle to device context on which the current bitmap should be drawn.</param>
            <param name="destinationRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image.</param>
            <param name="sourceRectangle"><see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the image object to draw.</param>
            <param name="combine">The images blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on the given <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Fill(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Fills the current bitmap with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Finalize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.FromClipboard" draft="yes">
            <summary>Creates a <see cref="T:Aurigma.GraphicsMill.Bitmap" /> from the clipboard.</summary>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> that this method creates.</returns>
            <remarks><para>If no bitmap is available in the clipboard, the exception is thrown.</para><para>To put the bitmap into the clipboard, you can use the <see cref="M:Aurigma.GraphicsMill.Bitmap.SaveToClipboard" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Bitmap.SaveToClipboard" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.FromHdc(System.IntPtr,System.Drawing.Rectangle)" draft="yes">
            <summary>Creates a <see cref="T:Aurigma.GraphicsMill.Bitmap" /> from the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="rect">The rectangle that specifies a viewport to get the bitmap from.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> that this method creates.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.GetGdiPlusGraphics" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <returns>A <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</returns>
            <example><code language="CS" source="Samples/Code/Drawing.cs#penGDIPlus"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.GetAdvancedGraphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</returns>
            <example><code language="CS" source="Samples/Code/AdvancedDrawing.cs#plainText"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.GetGraphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</returns>
            <remarks><para>Several calls of this method will return the same object.</para><para>You can freely dispose the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> returned with this method, although it is not necessary. If you dispose this graphics object, next call of the <see cref="M:Aurigma.GraphicsMill.Bitmap.GetGraphics" /> method will create new instance of this class.</para><note>GDI cannot handle bitmaps with an alpha channel when it draws anything on it. As the high byte of 4-byte color must be zero in GDI, each pixel drawn with GDI becomes transparent. So now, if you try to call any drawing methods for the bitmaps with an alpha channel when using GDI, the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> exception will be thrown.</note></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#penGM"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" draft="yes">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> object.</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.GetPixel(System.Int32,System.Int32)" draft="yes">
            <summary>Gets the color of the specified pixel in this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color" /> that represents the color of the specified pixel. The actual type of the returned object depends on color space of the bitmap. E.g. if the bitmap is RGB, actual type will be <see cref="T:Aurigma.GraphicsMill.RgbColor" />, etc.</returns>
            <remarks><para>This method was implemented for easy but slow access to pixels. It works ideally if you need to get one pixel value, for example, when you implement color picker.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.pixel"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Handle" draft="yes">
            <summary>Gets a GDI handle to this bitmap (HBITMAP).</summary>
            <value>The handle to this bitmap.</value>
            <remarks><para>A handle to bitmap (HBITMAP) is often needed when it is necessary to use GDI functions to deal with the bitmap (as well as certain WinAPI functions which are responsible for the user interface rendering).</para><note>HBITMAP is available only if the bitmap is GDI-compatible, i.e. it has a pixel format which is supported by GDI. In other words, it will work for indexed bitmaps, as well as for 24-bit and 32-bit RGB bitmaps. If you have, say, CMYK bitmap, you should convert it to some GDI-compatible pixel format before using this property.  </note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.HasAlpha" draft="yes">
            <summary>Gets a value indicating whether the current pixel format supports alpha channel (information about opacity of pixels).</summary>
            <value><c>true</c> if the current pixel format supports alpha channel; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Height" draft="yes">
            <summary>Gets the height, in pixels, of this bitmap.</summary>
            <value>The height, in pixels, of this bitmap.</value>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.info"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.IsEmpty" draft="yes">
            <summary>Gets a value indicating whether this bitmap is empty (no bitmap data loaded).</summary>
            <value><c>true</c> if no data is loaded into bitmap; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Ink" draft="yes">
            <summary>Gets or sets ink characteristics of a spot color of this bitmap.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class from the specified existing bitmap.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class with the specified size and pixel format.</summary>
            <param name="width">The width, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="format">The pixel format for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. If you specify indexed pixel format, uninitialized palette will be generated. You must fill entries by yourself. Palette will have maximum possible for given pixel format colors number (2 colors for 1-bit images, 16 colors for 4-bit images, and 256 colors for 8-bit images).</param>
            <remarks><para>All pixel data are filled with 0. So if pixel format:</para><list type="bullet"><item><term>supports alpha channel</term><description> - image is fully transparent;</description></item><item><term>is RGB</term><description> - image is filled with black color;</description></item><item><term>is CMYK</term><description> - image is filled with white color;</description></item><item><term>is indexed</term><description> - image has color of the first palette entry.</description></item></list></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class with the specified size, pixel format, and background color.</summary>
            <param name="width">The width, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="format">The pixel format for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. If you specify indexed pixel format, uninitialized palette will be generated. You must fill entries by yourself. Palette will have maximum possible for given pixel format colors number (2 colors for 1-bit images, 16 colors for 4-bit images, and 256 colors for 8-bit images).</param>
            <param name="color">The background color for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <remarks>If color space of the color does not fit color space of the pixel format, color is converted to necessary color space.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorPalette)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class with the specified size, pixel format, background color, and palette.</summary>
            <param name="width">The width, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="format">The pixel format for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. If you specify indexed pixel format, uninitialized palette will be generated. You must fill entries by yourself. Palette will have maximum possible for given pixel format colors number (2 colors for 1-bit images, 16 colors for 4-bit images, and 256 colors for 8-bit images).</param>
            <param name="color">The background color for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="palette">The palette attached to the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. Note, this palette object is binded to bitmap, not copied. It means that if you later change anything in this palette object, changes will be reflected in the palette of bitmap.</param>
            <remarks>If color space of the color does not fit color space of the pixel format, color is converted to necessary color space.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.ColorPalette)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class with the specified size, pixel format, and palette.</summary>
            <param name="width">The width, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="height">The height, in pixels, of the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <param name="format">The pixel format for the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. If you specify indexed pixel format, uninitialized palette will be generated. You must fill entries by yourself. Palette will have maximum possible for given pixel format colors number (2 colors for 1-bit images, 16 colors for 4-bit images, and 256 colors for 8-bit images).</param>
            <param name="palette">The palette attached to the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />. Note, this palette object is binded to bitmap, not copied. It means that if you later change anything in this palette object, changes will be reflected in the palette of bitmap.</param>
            <remarks><para>All pixel data are filled with 0. So if pixel format:</para><list type="bullet"><item><term>supports alpha channel</term><description> - image is fully transparent;</description></item><item><term>is RGB</term><description> - image is filled with black color;</description></item><item><term>is CMYK</term><description> - image is filled with white color;</description></item><item><term>is indexed</term><description> - image has color of the first palette entry.</description></item></list></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class from the specified file.</summary>
            <param name="fileName">The bitmap file name and path.</param>
            <remarks><para>If a multiframe file is loaded, the first frame is taken.</para><para>The file name and path can be relative to the application or an absolute path.</para></remarks>
            <seealso href="supported-file-formats.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.Drawing.Bitmap)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class by copying bitmap data from the specified <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> object.</summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> from which to create the new <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class from the specified data stream.</summary>
            <param name="stream">The data stream used to load the image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.op_Explicit(Aurigma.GraphicsMill.Bitmap)~System.Drawing.Bitmap" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> instance to a <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see>.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.op_Explicit(System.Drawing.Bitmap)~Aurigma.GraphicsMill.Bitmap" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> instance to a <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see>.</summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> to which this operator converts.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Palette" draft="yes">
            <summary>Gets a palette associated with this bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with this bitmap.</value>
            <remarks><para>A palette makes sense only for indexed bitmaps. No palette is returned if the bitmap is not indexed.</para><para>Once palette is attached to the bitmap (either in constructor or during color conversion), you cannot change entries number as well as attach another palette. In this case you need to initiate color conversion one more time. However it is not necessary if you need to modify values of palette entries.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.PixelFormat" draft="yes">
            <summary>Gets a pixel format of the current bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the current bitmap.</value>
            <remarks><para>You can use the following properties to get more detailed information about current pixel format:</para><list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.ColorSpace" /></term><description>Color space of pixels represented with current pixel format.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.HasAlpha" /></term><description>Whether current pixel format supports alpha channel (transparency information).</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.IsCmyk" /></term><description>Whether color space of pixels represented with current pixel format is CMYK.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.IsRgb" /></term><description>Whether color space of pixels represented with current pixel format is RGB.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.IsGrayscale" /></term><description>Whether color space of pixels represented with current pixel format is grayscale.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.IsExtended" /></term><description>Whether current pixel format is extended (16 bits per channel).</description></item><item><term><see cref="P:Aurigma.GraphicsMill.PixelFormat.IsIndexed" /></term><description>Whether current pixel format is indexed (palette-based).</description></item></list></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.info"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Save(System.String)" draft="yes">
            <summary>Saves this bitmap to the specified file.</summary>
            <param name="fileName">A string that contains the name of the file to which to save this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <remarks><para>This method analyzes a file extension to determine the file format to save bitmap to. If an extention is unknown, this method fails (exception is thrown).</para>&gt;<para>Using this method is the same as creating an appropriate writer derived from the <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class and running it in synchronous mode.</para></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#fileSave1"></code></example>
            <overloads><summary>Saves the bitmap to the specified file.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Save(System.String,Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Saves this bitmap to the specified file using the provided settings.</summary>
            <param name="fileName">A string that contains the name of the file to which to save this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</param>
            <remarks><para>This method determines an output file format from the <see cref="T:Aurigma.GraphicsMill.Codecs.WriterSettings" /> (regardless to the file extension).</para><para>Using this method is the same as creating appropriate writer derived from <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> and running it in synchronous mode.</para></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#fileSave2"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.Save(System.IO.Stream,Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Saves this bitmap to the specified <see cref="T:System.IO.Stream" /> using the provided settings.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where the image will be saved.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.SaveToClipboard" draft="yes">
            <summary>Saves the bitmap into the clipboard.</summary>
            <remarks><para>To load the bitmap from the clipboard, use the <see cref="M:Aurigma.GraphicsMill.Bitmap.FromClipboard" /> method.</para><note>The copy of the bitmap is converted into the format which is supported by Windows so that other applications could load it. It means that if the bitmap has some non-standard pixel format (e.g. CMYK), it is automatically converted to 24-bit RGB. Therefore when you load the bitmap back from buffer using <see cref="M:Aurigma.GraphicsMill.Bitmap.FromClipboard" /> method, it may have another pixel format.</note></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Bitmap.FromClipboard" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Scan0" draft="yes">
            <summary>Gets the pointer to the very first pixel of this bitmap.</summary>
            <value>The address of the first pixel of this bitmap.</value>
            <example><code language="CS" source="Samples/Code/Channels.cs#invert"></code></example>
            <seealso href="accessing-pixel-data.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.SetPixel(System.Int32,System.Int32,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Sets the color of the specified pixel in this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> that represents the color to assign to the specified pixel. It is recommended to make sure that this object has the same color space as the bitmap itself. If color spaces are not match (e.g. the bitmap is CMYK and this color is RGB), color will be automatically converted, but no color management will be applied.</param>
            <remarks><para>This method was implemented for easy but slow access to pixels. It works ideally if you need to set one pixel value, for example, when you implement pencil tool.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.pixel"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Statistics" draft="yes">
            <summary>Gets an object providing methods which retrieve bitmap statistics (like histogram, etc).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.BitmapStatisticsProvider" /> containing methods to retrieve bitmap statistics.</value>
            <example><code language="CS" source="Samples/Code/Reference.cs#statistics"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.BitmapStatisticsProvider" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Stride" draft="yes">
            <summary>Gets the width (in bytes) of the scan line.</summary>
            <value>The width of the scan line.</value>
            <remarks>Since the <see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> property returns a number of pixels in single scan line, this property contains number of bytes in a scan line. As scan line may be aligned on four-bytes boundary, stride may differ from bitmap data width multiplied on number of bytes per pixel. That's why you should use this property to move to the same position on the next row instead of any other methods.</remarks>
            <example><code language="CS" source="Samples/Code/Channels.cs#invert"></code></example>
            <seealso href="accessing-pixel-data.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Bitmap.ToGdiPlusBitmap" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> containing a copy of the image stored in this <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <returns>A <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> containing a copy of this bitmap.</returns>
            <remarks>This method returns a copy of the image.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Transforms" draft="yes">
            <summary>Gets an object providing methods which are responsible for geometric transformations of the bitmap (resize, rotate, crop, etc).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.TransformsProvider" /> containing methods which are responsible for geometric transformations of the bitmap.</value>
            <example><code language="CS" source="Samples/Code/Transforms.cs#inPlace"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Bitmap.Width" draft="yes">
            <summary>Gets the width, in pixels, of this bitmap.</summary>
            <value>The width, in pixels, of this bitmap.</value>
            <example><code language="CS" source="Samples/Code/Reference.cs#bitmap.info"></code></example>
        </member>

<!-- BitmapEmptyException -->
        <member name="T:Aurigma.GraphicsMill.BitmapEmptyException" draft="yes">
            <summary>Represents the error that occurs when you try to manipulate with an empty bitmap.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapEmptyException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.BitmapEmptyException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.BitmapEmptyException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapEmptyException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.BitmapEmptyException" /> class with a specified error message.</summary>
            <param name="name">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapEmptyException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.BitmapEmptyException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- BitmapStatisticsProvider -->
        <member name="T:Aurigma.GraphicsMill.BitmapStatisticsProvider" draft="yes">
            <summary>Contains methods used to retrieve various bitmap statistics.</summary>
            <remarks>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Bitmap.Statistics">Bitmap.Statistics</see> property. Its main feature is the ability to calculate a bitmap histogram. A histogram is an array of values that specify how much pixels has a luminosity (or other value that specifies pixel brightness level) equal to appropriate array index. It can be either calculated as histogram of bitmap luminosity (<see cref="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetLuminosityHistogram" /> method) or histogram of the channels sum (<see cref="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetSumHistogram" /> method). Last method is used in Adobe® Photoshop® by default.</remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#statistics"></code></example>
            <seealso cref="P:Aurigma.GraphicsMill.Bitmap.Statistics" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetLuminosityHistogram" draft="yes">
            <summary>Calculates and returns a histogram built from the bitmap luminosity.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> containing luminosity histogram of this bitmap.</returns>
            <remarks>This histogram is equivalent to the histogram built from the same bitmap converted to grayscale.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetSumHistogram" draft="yes">
            <summary>Calculates and returns a histogram built from the sum of each channel luminosities of the pixel.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> containing sum histogram of this bitmap.</returns>
            <remarks>This histogram type is used in Adobe® Photoshop®.</remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#statistics"></code></example>
            <overloads><summary>Calculates and returns a sum histogram.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetSumHistogram(Aurigma.GraphicsMill.Channel)" draft="yes">
            <summary>Calculates and returns a histogram built from luminosity of the single channel of the pixel.</summary>
            <param name="channel">A <see cref="T:Aurigma.GraphicsMill.Channel" /> to build histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> containing sum histogram of this bitmap.</returns>
            <remarks>This histogram type is used in Adobe® Photoshop®.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.BitmapStatisticsProvider.GetSumHistogram(System.Int32)" draft="yes">
            <summary>Calculates and returns a histogram built from luminosity of the single channel of the pixel.</summary>
            <param name="channel">A channel number to build histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> containing sum histogram of this bitmap.</returns>
            <remarks>This histogram type is used in Adobe® Photoshop®.</remarks>
        </member>

<!-- Channel -->
        <member name="T:Aurigma.GraphicsMill.Channel" draft="yes">
            <summary>Contains aliases for numbers of color channels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Alpha" draft="yes">
            <summary>Alpha channel (for all).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Black" draft="yes">
            <summary>Black channel (for CMYK).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Blue" draft="yes">
            <summary>Blue channel (for RGB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Cyan" draft="yes">
            <summary>Cyan channel (for CMYK).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Gray" draft="yes">
            <summary>Luminosity channel (for grayscale).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Green" draft="yes">
            <summary>Green channel (for RGB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.LabA" draft="yes">
            <summary>A channel (for LAB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.LabB" draft="yes">
            <summary>B channel (for LAB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Lightness" draft="yes">
            <summary>Lightness channel (for LAB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Magenta" draft="yes">
            <summary>Magenta channel (for CMYK).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Red" draft="yes">
            <summary>Red channel (for RGB).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Channel.Yellow" draft="yes">
            <summary>Yellow channel (for CMYK).</summary>
        </member>

<!-- ChannelCombiner -->
        <member name="T:Aurigma.GraphicsMill.ChannelCombiner" draft="yes">
            <summary>Represents the base class for classes that create an image by combining several grayscale images.</summary>
            <remarks><para>Merging channels into a single image allows the creating of color images by combining several grayscale images. It is useful when, for example, you have 4 grayscale bitmaps prepared for printing (cyan, magenta, yellow, and black) and you need to make a color preview of the resulting image. The easiest way to merge channels into one image is to use one of the following descendant classes:</para><list type="bullet"><item><description><see cref="T:Aurigma.GraphicsMill.RgbChannelCombiner" /> is specified to work with RGB images.</description></item><item><description><see cref="T:Aurigma.GraphicsMill.CmykChannelCombiner" /> is specified to work with CMYK images.</description></item><item><description><see cref="T:Aurigma.GraphicsMill.GrayscaleChannelCombiner" /> is specified to work with grayscale images containing the alpha channel.</description></item></list><note>The merging channels must be of the same dimensions and resolution.</note></remarks>
            <example><para>The following code creates a CMYK image by combining 4 grayscale bitmaps (one bitmap per color channel):</para><code language="CS" source="Samples/Code/Channels.cs#channelsCombine"></code></example>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelCombiner.AutoDisposeSources" draft="yes">
            <summary>Gets or sets a value indicating whether the channel sources should be disposed along with this <see cref="T:Aurigma.GraphicsMill.ChannelCombiner" />.</summary>
            <value><c>true</c> if the channel sources (provided via the <see cref="P:Aurigma.GraphicsMill.ChannelCombiner.Sources" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.ChannelCombiner" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelCombiner.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelCombiner.#ctor(Aurigma.GraphicsMill.ColorSpace)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ChannelCombiner" /> class for the specified color space.</summary>
            <param name="colorSpace">A <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> to create this <see cref="T:Aurigma.GraphicsMill.ChannelCombiner" /> for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelCombiner.Sources" draft="yes">
            <summary>Gets an array of pipelines producing grayscale images for channel sources.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Pipeline" /> representing grayscale images to be combined.</value>
        </member>

<!-- ChannelSplitter -->
        <member name="T:Aurigma.GraphicsMill.ChannelSplitter" draft="yes">
            <summary>Represents the base class for classes that separate an image by color channels.</summary>
            <remarks><para>The result of channels separation is a number of grayscale images that are used to create printing plates. The number of images depends on the source image color space. You can use one of the following descendant classes, which allow the separation of images by channels:</para><list type="bullet"><item><description><see cref="T:Aurigma.GraphicsMill.RgbChannelSplitter" /> is specified to work with RGB images.</description></item><item><description><see cref="T:Aurigma.GraphicsMill.CmykChannelSplitter" /> is specified to work with CMYK images.</description></item><item><description><see cref="T:Aurigma.GraphicsMill.GrayscaleChannelSplitter" /> is specified to work with grayscale images containing the alpha channel.</description></item></list><para>The pixel format of the resulting image depends on the source image pixel format. The resulting image is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> if the source bitmap is not extended, and <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> otherwise.</para></remarks>
            <example><para>The following code separates a CMYK image by color channels:</para><code language="CS" source="Samples/Code/Channels.cs#channelsSplit"></code></example>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelSplitter.Channel(Aurigma.GraphicsMill.Channel)" draft="yes">
            <summary>Gets or sets a pipeline element which receives the specified channel.</summary>
            <param name="index">A <see cref="T:Aurigma.GraphicsMill.Channel" /> to get or set a pipeline element for.</param>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> associated with a given channel.</value>
            <overloads><summary>Gets or sets a pipeline element which receives the specified channel.</summary></overloads>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelSplitter.Channel(System.Int32)" draft="yes">
            <summary>Gets or sets a pipeline element which receives the channel at the specified index.</summary>
            <param name="index">An index of the channel to get or set a pipeline element for.</param>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> associated with the channel at a given index.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelSplitter.ChannelCount">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelSplitter.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelSplitter.ExpectedColorSpace">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelSplitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ChannelSplitter" /> class.</summary>
        </member>

<!-- ChannelsProvider -->
        <member name="T:Aurigma.GraphicsMill.ChannelsProvider" draft="yes">
            <summary>Contains methods and properties providing access to bitmap channels.</summary>
            <remarks>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Bitmap.Channels">Bitmap.Channels</see> property. It allows you to extract bitmap channels to separate grayscale images, or replace some channel with another grayscale bitmap. You can do that using <see cref="Overload:Aurigma.GraphicsMill.ChannelsProvider.Channel" /> properties. Here you can set an alpha channel (<see cref="Overload:Aurigma.GraphicsMill.ChannelsProvider.SetAlpha" />) or remove it (<see cref="Overload:Aurigma.GraphicsMill.ChannelsProvider.RemoveAlpha" /> method). Using <see cref="M:Aurigma.GraphicsMill.ChannelsProvider.Transparentize(Aurigma.GraphicsMill.Color,System.Single)" /> method you can make alpha channel transparent at the areas with specified color.</remarks>
            <example><code language="CS" source="Samples/Code/Channels.cs#channelsRead"></code></example>
            <seealso cref="P:Aurigma.GraphicsMill.Bitmap.Channels" />
<seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelsProvider.AlphaIndex" draft="yes">
            <summary>Gets an index of the alpha channel.</summary>
            <value>The index of the alpha channel for the current bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelsProvider.Channel(Aurigma.GraphicsMill.Channel)" draft="yes">
            <summary>Gets or sets the specified bitmap channel.</summary>
            <param name="channel">A <see cref="T:Aurigma.GraphicsMill.Channel" /> to get or set.</param>
            <value>A grayscale <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the specified channel. It always has the same dimensions as a source bitmap. Its pixel format is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> (if a source bitmap is not extended) or <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> (if a source bitmap is extended).</value>
            <overloads><summary>Gets or sets the specified bitmap channel.</summary></overloads>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelsProvider.Count" draft="yes">
            <summary>Gets the number of channels for the current bitmap.</summary>
            <value>The number of channels for the current bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ChannelsProvider.Channel(System.Int32)" draft="yes">
            <summary>Gets or sets the specified bitmap channel.</summary>
            <param name="channelIndex">The number of channel to get or set.</param>
            <value><see cref="T:Aurigma.GraphicsMill.Bitmap" /> class instance specifying a bitmap channel. It always has the same dimensions as source bitmap and its pixel format is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> (if source bitmap is not extended) or <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> (if source bitmap is extended).</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.RemoveAlpha" draft="yes">
            <summary>Removes the alpha channel from the current bitmap. Alpha channel is just discarded without affecting other channels.</summary>
            <remarks>This method does not flatten the alpha channel (it will be discarded without additional processing). If you need to flatten the alpha channel by blending it with some color, use <see cref="M:Aurigma.GraphicsMill.ChannelsProvider.RemoveAlpha(Aurigma.GraphicsMill.Color)" /> version of this method.</remarks>
            <overloads><summary>Removes the alpha channel from the current bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.RemoveAlpha(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Removes the alpha channel from the current bitmap. The alpha channel is flattened using specified color (i.e. each pixel is alpha-blended with this color).</summary>
            <param name="backgroundColor">The <see cref="T:Aurigma.GraphicsMill.Color" /> to blend semi-transparent areas with.</param>
            <remarks>If you do not want to flatten the alpha channel, use <see cref="M:Aurigma.GraphicsMill.ChannelsProvider.RemoveAlpha" /> version of this method.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.ScaleAlpha(System.Single)" draft="yes">
            <summary>Scales the alpha channel.</summary>
            <param name="scale">The scale factor (up to <c>100</c>).</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.SetAlpha(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Sets the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> as the alpha channel to the current bitmap.</summary>
            <param name="alpha">A grayscale <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to initialize alpha channel with. The bitmap should have the same dimensions and color depth as the current bitmap.</param>
            <remarks>If alpha channel is already presented in the bitmap, this method will throw an exception. To check if alpha channel is available, use <see cref="P:Aurigma.GraphicsMill.Bitmap.HasAlpha" /> property of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class.</remarks>
            <overloads><summary>Sets the alpha channel to the current bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.SetAlpha(System.Single)" draft="yes">
            <summary>Sets the alpha channel to the current bitmap.</summary>
            <param name="opacity">The opacity (in range <c>[0, 1]</c>) to initialize the alpha channel with. Depending on the channel color depth this value is normalized to 255 (for non-extended 8 bits per channel pixel formats) or to 65535 (for extended 16 bits per channel pixel formats).</param>
            <remarks>If alpha channel is already presented in the bitmap, this method will throw an exception. To check if alpha channel is available, use <see cref="P:Aurigma.GraphicsMill.Bitmap.HasAlpha" /> property of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.SwapChannels(System.Int32[])" draft="yes">
            <summary>Swaps channels.</summary>
            <param name="channels">An array of channel indices sorted in the necessary order. E.g. if you need to swap blue and green channel in an RGB bitmap, this array should contain: <c>(1, 0, 2)</c>.</param>
            <remarks>If number of indices in <i>channels</i> argument is less than number of channels in the current bitmap, the rest channels will be unchanged. If there are more indices than current bitmap provides, all extra indices will be ignored.</remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#swapChannels"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelsProvider.Transparentize(Aurigma.GraphicsMill.Color,System.Single)" draft="yes">
            <summary>Sets alpha values of pixels with a given color (and tolerant ones) to transparent.</summary>
            <param name="bgColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to transparentize.</param>
            <param name="threshold">The threshold in range [0, 1].</param>
            <remarks>This method is very useful when you need to blend two images and "upper" image does not have alpha channel, but it has a background color. For example, you draw a logo placed in the center of the image on white background. In this case you set <i>bgColor</i> to white color. You can also adjust a <i>threshold</i> parameter to make colors close to white color semi-transparent (to get smooth colors). Besides of that threshold is useful when background color is not completely uniform (for example, you loaded JPEG file with low quality).</remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#transparentize"></code></example>
        </member>

<!-- ChannelTransmitter -->
        <member name="T:Aurigma.GraphicsMill.ChannelTransmitter" draft="yes">
            <summary>Transmitts image data from <see cref="T:Aurigma.GraphicsMill.ChannelSplitter" /> to receivers.</summary>
            <remarks>This class is used in conjunction with <see cref="T:Aurigma.GraphicsMill.ChannelSplitter" /> and you should not instantiate it direclty.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ChannelTransmitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ChannelTransmitter" /> class.</summary>
        </member>

<!-- CMAdobeModuleLoadException -->
        <member name="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" draft="yes">
            <summary>Represents the error that occurs when you try to convert colors using Adobe CMM whereas it is not installed on the system.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CMAdobeModuleLoadException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMAdobeModuleLoadException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMAdobeModuleLoadException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMAdobeModuleLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- CMException -->
        <member name="T:Aurigma.GraphicsMill.CMException" draft="yes">
            <summary>Represents the error that occurs when you work with color management.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CMException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMAdobeModuleLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- CMInappropriateProfileException -->
        <member name="T:Aurigma.GraphicsMill.CMInappropriateProfileException" draft="yes">
            <summary>Represents the error that occurs when you try to specify a color profile which does not conform target color space.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CMInappropriateProfileException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMInappropriateProfileException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMInappropriateProfileException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMInappropriateProfileException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMInappropriateProfileException" /> class with a name of the profile which causes a error.</summary>
            <param name="profileName">The name of the profile which causes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMInappropriateProfileException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMInappropriateProfileException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMInappropriateProfileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- CMOpenProfileException -->
        <member name="T:Aurigma.GraphicsMill.CMOpenProfileException" draft="yes">
            <summary>Represents the error that occurs when you try to open a color profile from a file, but it fails for some reason (e.g. file not found, access is denied, profile is corrupted, or any other).</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CMOpenProfileException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMOpenProfileException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMOpenProfileException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMOpenProfileException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMOpenProfileException" /> class with a name of the profile which causes a error.</summary>
            <param name="profileName">The name of the profile which causes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMOpenProfileException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMOpenProfileException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMOpenProfileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- CMTransformException -->
        <member name="T:Aurigma.GraphicsMill.CMTransformException" draft="yes">
            <summary>Represents the error that occurs when some errors encountered during some color space transform made by color management module.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CMTransformException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMTransformException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMTransformException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMTransformException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMTransformException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMTransformException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CMTransformException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CMTransformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- Cmyk16Color -->
        <member name="T:Aurigma.GraphicsMill.Cmyk16Color" draft="yes">
            <summary>Represents 16-bit (extended) color value in CMYK color space.</summary>
            <remarks><para>To get access to cyan, magenta, yellow, and black components use <see cref="P:Aurigma.GraphicsMill.Cmyk16Color.C" />, <see cref="P:Aurigma.GraphicsMill.Cmyk16Color.M" />, <see cref="P:Aurigma.GraphicsMill.Cmyk16Color.Y" />, and <see cref="P:Aurigma.GraphicsMill.Cmyk16Color.K" /> properties accordingly. An alpha channel is available through the <see cref="P:Aurigma.GraphicsMill.Cmyk16Color.A" /> property. There is also a non-extended version of this class named <see cref="T:Aurigma.GraphicsMill.CmykColor" /> which represents 8-bit color value.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Cmyk16Color.A" draft="yes">
            <summary>Gets 16-bit alpha channel value (color opacity).</summary>
            <value>16-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Cmyk16Color.C" draft="yes">
            <summary>Gets 16-bit cyan channel value.</summary>
            <value>16-bit cyan channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Cmyk16Color.K" draft="yes">
            <summary>Gets 16-bit black channel value.</summary>
            <value>16-bit black channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Cmyk16Color.M" draft="yes">
            <summary>Gets 16-bit magenta channel value.</summary>
            <value>16-bit magenta channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class.</summary>
            <remarks>All the channels are initialized with zeros, therefore this color will be absolutely white and transparent.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified channel values.</summary>
            <param name="c">A cyan channel value.</param>
            <param name="m">A magent channel value.</param>
            <param name="y">A yellow channel value.</param>
            <param name="k">A black channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified channel values.</summary>
            <param name="c">A cyan channel value.</param>
            <param name="m">A magenta channel value.</param>
            <param name="y">A yellow channel value.</param>
            <param name="k">A black channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.FromPercentages(System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> object by using the specified channel values in percentage.</summary>
            <param name="c">A cyan channel percentage value.</param>
            <param name="m">A magenta channel percentage value.</param>
            <param name="y">A yellow channel percentage value.</param>
            <param name="k">A black channel percentage value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.FromPercentages(System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> object by using the specified channel values in percentage.</summary>
            <param name="c">A cyan channel percentage value.</param>
            <param name="m">A magenta channel percentage value.</param>
            <param name="y">A yellow channel percentage value.</param>
            <param name="k">A black channel percentage value.</param>
            <param name="a">An alpha channel percentage value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Cmyk16Color.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Cmyk16Color.Y" draft="yes">
            <summary>Gets 16-bit yellow channel value.</summary>
            <value>16-bit yellow channel value.</value>
        </member>

<!-- CmykChannelCombiner -->
        <member name="T:Aurigma.GraphicsMill.CmykChannelCombiner" draft="yes">
            <summary>Creates a CMYK image by combining several grayscale images.</summary>
            <remarks><note>The merging channels must be of the same dimensions and resolution.</note></remarks>
            <example><para>The following code creates a CMYK image by combining 4 grayscale bitmaps (one bitmap per color channel):</para><code language="CS" source="Samples/Code/Channels.cs#channelsCombine"></code></example>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelCombiner.A" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelCombiner.C" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the cyan channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the cyan channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelCombiner.K" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the black channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the black channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelCombiner.M" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the magenta channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the magenta channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykChannelCombiner.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CmykChannelCombiner" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelCombiner.Y" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the yellow channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the yellow channel.</value>
        </member>

<!-- CmykChannelSplitter -->
        <member name="T:Aurigma.GraphicsMill.CmykChannelSplitter" draft="yes">
            <summary>Separates a CMYK image by color channels.</summary>
            <remarks><para>The result of channels separation is a number of grayscale images that are used to create printing plates. The number of images depends on the source image color space. The pixel format of the resulting image depends on the source image pixel format. The resulting image is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> if the source bitmap is not extended, and <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> otherwise.</para></remarks>
            <example><para>The following code separates a CMYK image by color channels:</para><code language="CS" source="Samples/Code/Channels.cs#channelsSplit"></code></example>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelSplitter.A" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelSplitter.C" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the cyan channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the cyan channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelSplitter.K" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the black channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the black channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelSplitter.M" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the magenta channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the magenta channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykChannelSplitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CmykChannelSplitter" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykChannelSplitter.Y" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the yellow channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the yellow channel.</value>
        </member>

<!-- CmykColor -->
        <member name="T:Aurigma.GraphicsMill.CmykColor" draft="yes">
            <summary>Represents color value in CMYK color space.</summary>
            <remarks><para>To get access to cyan, magenta, yellow, and black components use <see cref="P:Aurigma.GraphicsMill.CmykColor.C" />, <see cref="P:Aurigma.GraphicsMill.CmykColor.M" />, <see cref="P:Aurigma.GraphicsMill.CmykColor.Y" />, and <see cref="P:Aurigma.GraphicsMill.CmykColor.K" /> properties accordingly. An alpha channel is available through the <see cref="P:Aurigma.GraphicsMill.CmykColor.A" /> property. There is also an extended version of this class named <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> which represents 16-bit color value.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykColor.A" draft="yes">
            <summary>Gets 8-bit alpha channel value (color opacity).</summary>
            <value>8-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykColor.C" draft="yes">
            <summary>Gets 8-bit cyan channel value.</summary>
            <value>Cyan channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykColor.K" draft="yes">
            <summary>Gets 8-bit black channel value.</summary>
            <value>Black channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykColor.M" draft="yes">
            <summary>Gets 8-bit magenta channel value.</summary>
            <value>Magenta channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.CmykColor" /> class.</summary>
            <remarks>All the channels are initialized with zeros, therefore this color will be absolutely white and transparent.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified channel values.</summary>
            <param name="c">A cyan channel value.</param>
            <param name="m">A magent channel value.</param>
            <param name="y">A yellow channel value.</param>
            <param name="k">A black channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Cmyk16Color" /> class with the specified channel values.</summary>
            <param name="c">A cyan channel value.</param>
            <param name="m">A magent channel value.</param>
            <param name="y">A yellow channel value.</param>
            <param name="k">A black channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.FromPercentages(System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a <see cref="T:Aurigma.GraphicsMill.CmykColor" /> object by using the specified channel values in percentage.</summary>
            <param name="c">A cyan channel percentage value.</param>
            <param name="m">A magenta channel percentage value.</param>
            <param name="y">A yellow channel percentage value.</param>
            <param name="k">A black channel percentage value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.FromPercentages(System.Single,System.Single,System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a <see cref="T:Aurigma.GraphicsMill.CmykColor" /> object by using the specified channel values in percentage.</summary>
            <param name="c">A cyan channel percentage value.</param>
            <param name="m">A magenta channel percentage value.</param>
            <param name="y">A yellow channel percentage value.</param>
            <param name="k">A black channel percentage value.</param>
            <param name="a">An alpha channel percentage value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.CmykColor.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.CmykColor.Y">
            <summary>Returns 8-bit yellow channel value.</summary>
            <value>Yellow channel value.</value>
        </member>

<!-- CodecAdapter -->
        <member name="T:Aurigma.GraphicsMill.CodecAdapter" draft="yes">
            <summary>Converts file name to the corresponding image reader of writer.</summary>
            <remarks>This class is used for conversion file names to corresponding image readers and writers.</remarks>
            <example><code language="CS" source="Samples/Code/API.cs#shortPipeline"></code></example>
            <seealso href="understanding-image-processing-approaches-in-graphics-mill.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.CodecAdapter.op_Implicit(System.String)~Aurigma.GraphicsMill.CodecAdapter" draft="yes">
            <summary>Converts the specified file name to a <see cref="T:Aurigma.GraphicsMill.CodecAdapter" />.</summary>
            <param name="fileName">The file name to <see cref="T:Aurigma.GraphicsMill.CodecAdapter" />.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.CodecAdapter" /> that represents the converted file name.</returns>
        </member>

<!-- Codecs namespace -->
        <member name="N:Aurigma.GraphicsMill.Codecs" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Codecs" /> namespace contains classes intended to work with files that have one or more images (frames) inside, such as multipage TIFF files, animated GIF, etc. These classes support a lot of file formats and allow working with metadata.</summary>
        </member>
		
<!-- Codecs.AdobeResourceBlock -->
        <member name="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" draft="yes">
            <summary>Represents the Adobe® image resource block.</summary>
            <remarks><para>Image resource blocks are one of the basic building units of several file formats, including Photoshop native file format, JPEG, and TIFF. Image resources are used to store non-pixel data associated with an image, such as pen tool paths.</para><note>Graphics Mill does not perform any validation of the resource data internal structure while encoding. So, you should provide correctly generated <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> instances. Files containing incorrect Adobe® image resource blocks can produce errors during opening or processing in Adobe® applications.</note></remarks>
            <example><para>The following code removes the thumbnail from Adobe image resource blocks and marks the image as copyrighted. Thumbnail block ID is 0x0409 and copyright flag ID is 0x040A.</para><code language="CS" source="Samples/Code/Metadata.cs#arb"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" />
			<seealso href="adobe-image-resource-blocks.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.~AdobeResourceBlock">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.Data" draft="yes">
            <summary>Gets or sets the data of this Adobe® image resource block.</summary>
            <value>The data of this block.</value>
            <remarks><note>Graphics Mill does not perform any validation of the resource data internal structure while encoding. So, you should provide correctly generated <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> instances. Files containing incorrect Adobe® image resource blocks can produce errors during opening or processing in Adobe® applications.</note></remarks>
            <seealso href="adobe-image-resource-blocks.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.Name" draft="yes">
            <summary>Gets or sets the name of this Adobe® image resource block.</summary>
            <value>The name of this block.</value>
            <remarks><note>Graphics Mill does not perform any validation of the resource data internal structure while encoding. So, you should provide correctly generated <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> instances. Files containing incorrect Adobe® image resource blocks can produce errors during opening or processing in Adobe® applications.</note></remarks>
            <seealso href="adobe-image-resource-blocks.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock.#ctor(System.String,System.Byte[])" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> class using the specified name and data.</summary>
            <param name="name">The name to initialize this block with.</param>
            <param name="blockData">The data to initialize this block with.</param>
        </member>
		
<!-- Codecs.AdobeResourceDictionary -->
        <member name="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" draft="yes">
            <summary>Represents a dictionary of Adobe® image resource blocks, each block is represented by the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> class.</summary>
            <remarks><para>Adobe® applications (first of all Adobe® Photoshop®) store meta-information in so called Adobe® image resource blocks. Graphics Mill provides the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> class to facilitate work with these data.</para><para>All functionality of this class is implemented in base class <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />. To put or get some Adobe® image resource block, you should use the <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property. Just pass ID of the Adobe® image resource block as an argument into this property. Refer <see href="http://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm">Adobe® Photoshop® File Formats Specification</see> for exact Adobe® image resource block ID values.</para></remarks>
            <example><para>The following code removes the thumbnail from Adobe image resource blocks and marks the image as copyrighted. Thumbnail block ID is 0x0409 and copyright flag ID is 0x040A.</para><code language="CS" source="Samples/Code/Metadata.cs#arb"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" />
			<seealso href="adobe-image-resource-blocks.htm" />
			<seealso href="http://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm">Adobe® Photoshop® File Formats Specification</seealso>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary.Clone" draft="yes">
            <summary>Returns a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> instance.</summary>
            <returns>An object containing a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary.#ctor(Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> class from the specified existing dictionary.</summary>
            <param name="adobeResources">The <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> to be copied.</param>
        </member>
		
<!-- Codecs.BmpReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.BmpReader" draft="yes">
            <summary>Contains methods and properties used to read BMP images.</summary>
            <remarks><para>BMP (<strong>B</strong>it<strong>m</strong>ap <strong>P</strong>icture) is a standard bitmap image format used to store digital images on Microsoft Windows operating systems. BMP files range from monochrome (1 bit per pixel) to 32 bit color images. The BMP  format can store both indexed and full-color images in various color depths, and optionally with data compression, and color profiles.</para><para>BMP files can store only single image per file.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bmpReadWrite"></code></example>
            <seealso href="supported-file-formats.htm#bmpFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpReader" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
		
<!-- Codecs.BmpSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.BmpSettings" draft="yes">
            <summary>Contains all the possible BMP writing settings.</summary>
            <remarks><para>BMP (<strong>B</strong>it<strong>m</strong>ap <strong>P</strong>icture) is a standard bitmap image format used to store digital images on Microsoft Windows operating systems. BMP files range from monochrome (1 bit per pixel) to 32 bit color images. The BMP  format can store both indexed and full-color images in various color depths, and optionally with data compression, and color profiles.</para><note type="note">BMP supports only RLE compression for 4-bit and 8-bit images.</note></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bmpSettings"></code></example>
            <seealso href="supported-file-formats.htm#bmpFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.BmpSettings.Compression" draft="yes">
            <summary>Gets or sets a BMP compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" />.</value>
            <remarks><para>BMP format has a very limited compression support. The table below specifies what compression types are supported by this format:</para>
				<list type="table">
					<listheader><term>Compression Type</term><description>Limitations</description></listheader>
					<item>
						<term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term>
						<description>No limitations. Supported with all pixel formats allowed for BMP files.</description>
					</item>
					<item>
						<term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle" /></term>
						<description>Can be used only if the bitmap has 4 or 8 bits per pixel (<see cref="P:Aurigma.GraphicsMill.Bitmap.PixelFormat" /> is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format4bppIndexed" />, <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppIndexed" />, or <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" />).</description>
					</item>
				</list>
			</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpSettings" /> class using the specified compression type.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.BmpSettings.Compression" /> property.</param>
        </member>
		
<!-- Codecs.BmpWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.BmpWriter" draft="yes">
            <summary>Contains methods and properties used to write BMP images.</summary>
            <remarks><para>BMP (<strong>B</strong>it<strong>m</strong>ap <strong>P</strong>icture) is a standard bitmap image format used to store digital images on Microsoft Windows operating systems. BMP files range from monochrome (1 bit per pixel) to 32 bit color images. The BMP  format can store both indexed and full-color images in various color depths, and optionally with data compression, and color profiles.</para><para>BMP files can store only single image per file.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#bmpReadWrite"></code></example>
            <seealso href="supported-file-formats.htm#bmpFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.BmpWriter.Compression" draft="yes">
            <summary>Gets or sets a BMP compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" />.</value>
            <remarks><para>BMP format has a very limited compression support. The table below specifies what compression types are supported by this format:</para>
				<list type="table">
					<listheader><term>Compression Type</term><description>Limitations</description></listheader>
					<item>
						<term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term>
						<description>No limitations. Supported with all pixel formats allowed for BMP files.</description>
					</item>
					<item>
						<term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle" /></term>
						<description>Can be used only if the bitmap has 4 or 8 bits per pixel (<see cref="P:Aurigma.GraphicsMill.Bitmap.PixelFormat" /> is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format4bppIndexed" />, <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppIndexed" />, or <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" />).</description>
					</item>
				</list>
			</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.BmpWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.BmpWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.BmpWriter.InverseOrder" draft="yes">
            <summary>Gets or sets a value indicating whether scanlines should be written in the reverse order (from the last to the first scanline) when you save the BMP file.</summary>
            <value><c>true</c> if the image scanlines should be written in an inverse order; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpWriter" /> class</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.BmpWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.BmpWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
	
<!-- Codecs.CompressionType -->
        <member name="T:Aurigma.GraphicsMill.Codecs.CompressionType" draft="yes">
            <summary>Contains possible compression types for various image writers.</summary>
            <remarks><note>Some media formats support only few of these formats. Check <b>Remarks</b> section of the <b>Compression</b> property of appropriate image format settings to get information what compression types are supported with this format.</note></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt3">
            <summary>CCITT Group 3 compression (used for sending fax documents, for 1-bit images only).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt4">
            <summary>CCITT Group 4 compression (used for sending fax documents, for 1-bit images only).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.CcittRle">
            <summary>CCITT RLE compression (used for sending fax documents, for 1-bit images only).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg">
            <summary>JPEG compression (lossy algorithm, used mostly for TrueColor images like photos).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Lzw">
            <summary>LZW compression algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.None">
            <summary>No compression.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle">
            <summary>RLE compression algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Unknown">
            <summary>Some unsupported compression method.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip">
            <summary>Deflate compression algorithm (the same is used in ZIP files).</summary>
        </member>

<!-- Codecs.DisposalMethod -->
        <member name="T:Aurigma.GraphicsMill.Codecs.DisposalMethod">
            <summary>Contains values for disposal methods used in animated GIFs to specify what to do with a frame after it has been displayed.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.Background">
            <summary>Restore to background color. The area used by a frame will be restored to the background color.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.None">
            <summary>A frame will be left in place.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.NotSpecified">
            <summary>The decoder is not required to take any action.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.Previous">
            <summary>Restore to previous. The decoder is required to restore the area overwritten by a frame with what was there prior to rendering the frame.</summary>
        </member>
		
<!-- Codecs.EpsReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.EpsReader" draft="yes">
            <summary>Contains methods and properties used to read EPS images.</summary>
            <remarks><para>EPS (<strong>E</strong>Encapsulated <strong>P</strong>ost<strong>S</strong>cript) is a PostScript document used as a graphics file format. 
            An EPS file may contain both raster and vector data descripted by the PostScript language.</para></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#CreatingEps2"></code></example>
            <seealso href="working-with-eps.htm" />
            <seealso href="supported-file-formats.htm#epsFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsReader" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
		
<!-- Codecs.EpsSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.EpsSettings" draft="yes">
            <summary>Contains all the possible EPS  writing settings.</summary>
            <remarks><para>EPS (<strong>E</strong>Encapsulated <strong>P</strong>ost<strong>S</strong>cript) is a PostScript document used as a graphics file format. 
            An EPS file may contain both raster and vector data descripted by the PostScript language.</para></remarks>
            <seealso href="working-with-eps.htm" />
            <seealso href="supported-file-formats.htm#epsFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsSettings" /> class using the specified compression type.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsSettings" /> class.</summary></overloads>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.EpsSettings.Compression" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsSettings" /> class using the specified compression type and quality.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.EpsSettings.Compression" /> property.</param>
            <param name="quality">Raster quality in range <c>[0, 100]</c>. The default value is <c>75</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.EpsSettings.Compression" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsSettings.Compression" draft="yes">
            <summary>Gets or sets an EPS compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsSettings.Quality" draft="yes">
            <summary>Gets or sets raster images quality.</summary>
            <value>Raster quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
        </member>
		
<!-- Codecs.EpsWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.EpsWriter" draft="yes">
            <summary>Contains methods and properties used to write BMP images.</summary>
            <remarks><para>EPS (<strong>E</strong>Encapsulated <strong>P</strong>ost<strong>S</strong>cript) is a PostScript document used as a graphics file format. 
            An EPS file may contain both raster and vector data descripted by the PostScript language.</para></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#CreatingEps2"></code></example>
            <seealso href="working-with-eps.htm" />
            <seealso href="supported-file-formats.htm#epsFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.String,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified file name, width, and height.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.IO.Stream,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified <see cref="T:System.IO.Stream" />, width and height.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.String,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified file name, width, height, and resolution.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="dpiX">The horizontal resolution of the resulting image in DPI.</param>
            <param name="dpiY">The vertical resolution of the resulting image in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> class using the specified <see cref="T:System.IO.Stream" />, width, height, and resolution.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="dpiX">The horizontal resolution of the resulting image in DPI.</param>
            <param name="dpiY">The vertical resolution of the resulting image in DPI.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsWriter.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks of the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks of the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsWriter.AlphaThreshold" draft="yes">
            <summary>Gets or sets an alpha threshold for this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</summary>
            <value>An alpha threshold for this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</value>
			<remarks><para>An image, drawn on the EPS document, may have the alpha channel specifying an opacity degree for each pixel. However, the EPS format cannot handle semi-transparency, that is, each pixel on EPS images can be displayed with full opacity or fully transparent. <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" /> allows you to specify a threshold for transparency. Alpha threshold values are accepted in the range <c>[0, 1]</c>. If a pixel alpha value is greater than the threshold value, the pixel will be fully opaque; otherwise, it will be fully transparent.</para></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#BitmapWithTransparency"></code></example>
           <seealso href="working-with-eps.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsWriter.Compression" draft="yes">
            <summary>Gets or sets an EPS compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.EpsWriter.Quality" draft="yes">
            <summary>Gets or sets raster images quality.</summary>
            <value>Raster quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.GetGraphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.EpsWriter" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.EpsWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>

<!-- Codecs.ExifDictionary -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" draft="yes">
            <summary>Represents a dictionary of EXIF fields.</summary>
            <remarks>All functionality of this class is implemented in base class <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />. To put or get some EXIF field, you should use the <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property. Just pass ID of the EXIF field as an argument into this property. Refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for exact field ID values. Alternatively you can use static members <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Artist" />, <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTime" />, <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Make" />, <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Orientation" />, and others. Exact interpretations of these parameters can be found at <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>. Currently specification 2.2 is supported.</remarks>
            <example><para>The code below demonstrates how to extract and display both EXIF and IPTC data.</para><code language="CS" source="Samples/Code/Metadata.cs#exifIptcRead"></code></example>
            <seealso href="exif-and-iptc-metadata.htm" />
			<seealso href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</seealso>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ApertureValue">
            <summary>The lens aperture (in APEX units).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Artist">
            <summary>The name of photographer or image creator.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.BitsPerSample">
            <summary>The number of bits per image component.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.BrightnessValue">
            <summary>The brightness value (in APEX units).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.CfaPattern">
            <summary>The color filter pattern.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifDictionary.Clone" draft="yes">
            <summary>Returns a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> instance.</summary>
            <returns>An object containing a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" />.</returns>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ColorSpace">
            <summary>The color space of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ComponentsConfiguration">
            <summary>The order of pixel channels (components).</summary>
            <remarks><para>Makes sense only for compressed images.</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.CompressedBitsPerPixel">
            <summary>The number of bits per pixel in the compressed image.</summary>
            <remarks><para>Makes sense only for compressed images.</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Compression">
            <summary>The compression type.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Contrast">
            <summary>The contrast settings applied when images was captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Copyright">
            <summary>The copyright information.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifDictionary.CopyTo(Aurigma.GraphicsMill.Codecs.ExifItemInfo[],System.Int32)" draft="yes">
            <summary>Copies the entire array of <see cref="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" /> to this dictionary, starting at the specified index.</summary>
            <param name="array">An array of <see cref="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" /> to copy from.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.CustomRendered">
            <summary>Value that indicates that special processing on image was applied.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTime">
            <summary>The date and time of image creation.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTimeDigitized">
            <summary>The date and time when the images was converted into digital representation.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTimeOriginal">
            <summary>The date and time of the original file was created.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DeviceSettingDescription">
            <summary>The description of the image capturing device settings.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DigitalZoomRatio">
            <summary>The digital zoom ratio.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExifVersion">
            <summary>The version of the EXIF specification this data is stored at.</summary>
            <remarks><para>Due specification this field should be always presented at correct EXIF data block. Otherwise it should be treated as corrupted or unsupported by standard. So you should never remove this tag.</para><para>
To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.
</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExposureBiasValue">
            <summary>The exposure bias (in APEX units).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExposureIndex">
            <summary>The exposure index of the device when image is being captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExposureMode">
            <summary>The exposure mode.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExposureProgram">
            <summary>The exposure program.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ExposureTime">
            <summary>The exposure time (in seconds).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FileSource">
            <summary>The image source.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Flash">
            <summary>The flash status.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FlashEnergy">
            <summary>The flash energy (in BCPS).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FlashPixVersion">
            <summary>The version of FlashPix format.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FNumber">
            <summary>The F number.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalLength">
            <summary>The focal length of the lens (in millimeters).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalLengthIn35mmFilm">
            <summary>The focal length of the lens assuming 35mm film camera (in millimeters).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalPlaneResolutionUnit">
            <summary>The unit to measure focal plane resolution with (i.e. <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalPlaneXResolution" /> and <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalPlaneYResolution" />).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalPlaneXResolution">
            <summary>The horizontal resolution of the camera focal plane.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.FocalPlaneYResolution">
            <summary>The vertical resolution of the camera focal plane.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GainControl">
            <summary>The overall image gain adjustment.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifDictionary.GetItemInfo(System.Object)" draft="yes">
            <summary>Returns the <see cref="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" /> containing the information about the EXIF item with the specified key.</summary>
            <param name="key">The key to get the information for. It must be one of predefined keys (see static fields of <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> and <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" />).</param>
            <returns>An <see cref="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" /> containing the information about the EXIF item.</returns>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsAltitude">
            <summary>The altitude.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsAltitudeRef">
            <summary>The altitude reference.</summary>
            <remarks><para>Always sea level in the current implementation of EXIF.</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsAreaInformation">
            <summary>The name of GPS area.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDateStamp">
            <summary>The GPS datestamp.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestBearing">
            <summary>The bearing to the destination point (in degrees).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestBearingRef">
            <summary>The reference for giving the bearing to the destination point.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestDistance" draft="yes">
            <summary>The distance to the destination point.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestDistanceRef">
            <summary>The unit for distance to the destination point.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestLatitude">
            <summary>The destination point latitude.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestLatitudeRef">
            <summary>The destination point latitude reference (north or south).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestLongitude">
            <summary>The destination point longitude.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDestLongitudeRef">
            <summary>The destination point longitude reference (west or east).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDifferential">
            <summary>The GPS differencial correction.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsDop">
            <summary>The GPS data degree of precision.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsImgDirection">
            <summary>The direction of the image when it was captured (in degrees).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsImgDirectionRef">
            <summary>The reference for giving the direction of the image when it was captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsLatitude">
            <summary>The latitude.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsLatitudeRef">
            <summary>The latitude reference (north or south).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsLongitude">
            <summary>The longitude.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsLongitudeRef">
            <summary>The longitude reference (west or east).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsMapDatum">
            <summary>The geodetic survey data.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsMeasureMode">
            <summary>The GPS measurement mode.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsProcessingMethod">
            <summary>The name of GPS processing method.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsSatellites">
            <summary>The details about GPS sattelites used in measurement.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsSpeed">
            <summary>The speed of the GPS receiver movement.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsSpeedRef">
            <summary>The Unit for speed of movement of GPS receiver.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsStatus">
            <summary>The status of GPS receiver when image was recorded.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsTimeStamp">
            <summary>The GPS timestamp (in UTC).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsTrack">
            <summary>The direction of GPS receiver movement (in degrees).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsTrackRef">
            <summary>The reference for giving the direction of GPS receiver movement.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.GpsVersionId">
            <summary>The version of the GPSVersionID tag.</summary>
            <remarks><para>
When GPS details are presented, this field is mandatory.
</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.
</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ImageDescription">
            <summary>The title of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ImageLength">
            <summary>The height of the image in pixels.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ImageUniqueId">
            <summary>The 128-bit unique ID of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ImageWidth">
            <summary>The width of the image in pixels.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.InteroperabilityIndex">
            <summary>The index of interoperability rule.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.IsoSpeedRatings">
            <summary>The ISO speed and the ISO latitude of the device.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.LightSource">
            <summary>The light source.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Make">
            <summary>The name of manufacturer of the camera (or other recording equipment).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.MakerNote">
            <summary>The custom comments. May contain any information maker want to store.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.MaxApertureValue">
            <summary>The smallest F of the lens (in APEX units).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.MeteringMode">
            <summary>The metering mode.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Model">
            <summary>The name of the model of the camera (or other recording equipment).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifDictionary.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifDictionary.#ctor(Aurigma.GraphicsMill.Codecs.ExifDictionary)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> class from the specified existing dictionary.</summary>
            <param name="exif">The <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> to be copied.</param>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Oecf">
            <summary>The opto-electronic conversion function.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Orientation">
            <summary>The orientation of image (how it is rotated relatively top left corner).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.PhotometricInterpretation">
            <summary>The pixel composition.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.PixelXDimension">
            <summary>The valid width of the meaningful image.</summary>
            <remarks><para>Makes sense only for compressed images.</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.PixelYDimension">
            <summary>The valid height of the meaningful image.</summary>
            <remarks><para>Makes sense only for compressed images.</para><para>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.PlanarConfiguration">
            <summary>The planar configuration of the pixel components (planar or chunky).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.PrimaryChromaticities">
            <summary>The chromaticity of the three primary colors of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ReferenceBlackWhite">
            <summary>The reference for black and white point of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.RelatedSoundFile">
            <summary>The name of an audio file associated with this image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ResolutionUnit">
            <summary>The unit image resolution is measured at (i.e. <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.XResolution" /> and <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.YResolution" />).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.RowsPerStrip">
            <summary>Rows per strip (if image is divided into strips).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SamplesPerPixel">
            <summary>The number of components (channels) in one pixel.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Saturation">
            <summary>The saturation settings applied when images was captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SceneCaptureType">
            <summary>The type of scene was captured by camera (landscape, night scene, portrait, etc).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SceneType">
            <summary>The type of scene.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SensingMethod">
            <summary>The sensor type of the device.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Sharpness">
            <summary>The sharpness settings applied when images was captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ShutterSpeedValue">
            <summary>The shutter speed (in APEX units).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Software">
            <summary>The name of the software that created this image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SpatialFrequencyResponse">
            <summary>The spatial frequency response values.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SpectralSensitivity">
            <summary>The spectral sensitivity.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.StripByteCounts">
            <summary>The total number of bytes in one strip.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.StripOffsets">
            <summary>The bitmap stride (byte offset between strips).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubjectArea">
            <summary>The subject area.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubjectDistance">
            <summary>The distance to the subject (in meters).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubjectDistanceRange">
            <summary>The kind of distance to the subject (macro, close, or distant).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubjectLocation">
            <summary>The location of the main subject in the scene.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubSecTime">
            <summary>The fractions of seconds for <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTime" /> field.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubSecTimeDigitized">
            <summary>The fractions of seconds for <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTimeDigitized" /> field.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.SubSecTimeOriginal">
            <summary>The fractions of seconds for <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.DateTimeOriginal" /> field.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.Thumbnail">
            <summary>The image thumbnail.</summary>
            <remarks>When you pass this value into <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" />, you get a  <see cref="T:Aurigma.GraphicsMill.Bitmap" /> that contains the thumbnail stored in EXIF data. Almost all digital cameras include EXIF thumbnail into captured photos. This way of thumbnails from digital photos is much faster comparing to <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> transform.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailBitsPerSample">
            <summary>The number of bits per channel in the thumbnail.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailCompression">
            <summary>The compression type of the thumbnail.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailLength">
            <summary>The height of the thumbnail in pixel.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailOrientation">
            <summary>The orientation of the thumbnail (how it is rotated relatively top left corner).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>Orientation</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailPhotometricInterpretation">
            <summary>The pixel composition of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>PhotometricInterpretation</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailResolutionUnit">
            <summary>The unit thumbnail resolution is measured at (i.e. <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailXResolution" /> and <see cref="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailYResolution" />).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>ResolutionUnit</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailRowsPerStrip">
            <summary>Rows per strip at the thumbnail (if thumbnail is divided into strips).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>RowsPerStrip</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailSamplesPerPixel">
            <summary>The number of components (channels) in one pixel of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>SamplesPerPixel</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailStripByteCounts">
            <summary>The total number of bytes in one strip of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for <b>StripByteCounts</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailStripOffsets">
            <summary>The thumbnail stride (byte offset between strips).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for for <b>StripOffset</b> tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailWidth">
            <summary>The width of the thumbnail in pixels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailXResolution">
            <summary>The horizontal resolution of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for ThumbnailXResolution tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailYCbCrPositioning">
            <summary>YCbCr positioning of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailYCbCrSubSampling">
            <summary>YCbCr subsampling of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.ThumbnailYResolution">
            <summary>The vertical resolution of the thumbnail.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see> for ThumbnailYResolution tag.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.TransferFunction">
            <summary>The transfer function in tabular form.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.UserComment">
            <summary>The additional comments or keywords on the image available for users.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.WhiteBalance">
            <summary>The mode of the white balance when the image was captured.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.WhitePoint">
            <summary>The white point of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.XResolution">
            <summary>The horizontal resolution of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.YCbCrCoefficients">
            <summary>The coefficients used during the transformation between RGB and YCbCr color spaces.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.YCbCrPositioning">
            <summary>The position of chrominance components relatively luminosity component.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.YCbCrSubSampling">
            <summary>Sampling ratio of the chrominance components relatively luminosity component.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ExifDictionary.YResolution">
            <summary>The vertical resolution of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">EXIF specification</see>.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" draft="yes">
            <summary>Represents an EXIF item.</summary>
            <seealso cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ExifItemInfo.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.ExifItemInfo" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ExifItemInfo.Type" draft="yes">
            <summary>Gets or sets a type of this EXIF item.</summary>
            <value>The type of the EXIF item.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ExifItemInfo.ValueCount" draft="yes">
            <summary>Gets or sets a number of values stored inside this item.</summary>
            <value>A number of values stored in the item.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.FileFormat">
            <summary>Contains image file format IDs.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Bmp">
            <summary>BMP format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Gif">
            <summary>GIF format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Jpeg">
            <summary>JPEG format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Pdf">
            <summary>PDF format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Png">
            <summary>PNG format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Psd">
            <summary>PSD format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Raw" draft="yes">
            <summary>RAW format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Tiff">
            <summary>TIFF format ID.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.FileFormat.Unknown">
            <summary>"Dummy" ID of unknown format.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.Frame" draft="yes">
            <summary>Represents a base class for all image frames.</summary>
            <remarks><para>In general, frames store the following information:</para><list type="bullet"><item><description>Bitmap. You can get it using <see cref="M:Aurigma.GraphicsMill.Codecs.Frame.GetBitmap" /> method.</description></item><item><description>Bitmap characteristics such as <see cref="P:Aurigma.GraphicsMill.Codecs.Frame.Width" />, <see cref="P:Aurigma.GraphicsMill.Codecs.Frame.Height" />, <see cref="P:Aurigma.GraphicsMill.Codecs.Frame.PixelFormat" />, etc. These properties will extract these data without loading entire bitmap into memory, so it works extremely fast.</description></item></list><note type="note">These data are read from file only once. After you read some property, it is cached and next time it returns pre-loaded data.</note></remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#filesReader"></code></example>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.ColorProfile" draft="yes">
            <summary>Gets a color profile of the bitmap stored in the frame.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> of the current frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.ColorSpace" draft="yes">
            <summary>Gets a color space of the bitmap stored in the frame.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> of the current frame.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Frame.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.DpiX" draft="yes">
            <summary>Gets a horizontal resolution of the bitmap stored in the frame.</summary>
            <value>The horizontal resolution of the bitmap stored in the frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.DpiY" draft="yes">
            <summary>Gets a vertical resolution of the bitmap stored in the frame.</summary>
            <value>The vertical resolution of the bitmap stored in the frame.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Frame.Finalize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Frame.GetBitmap" draft="yes">
            <summary>Returns a bitmap stored in this frame.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> stored in this frame.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.Height" draft="yes">
            <summary>Gets the height of the bitmap stored in the frame.</summary>
            <value>The frame height (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.Index" draft="yes">
            <summary>Gets an index of this frame.</summary>
            <value>The index of the current frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.Ink" draft="yes">
            <summary>Gets ink characteristics of a spot color in the frame.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Frame.IsPixelFormatSupported(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Verifies whether the specified pixel format is supported by this <see cref="T:Aurigma.GraphicsMill.Codecs.Frame" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> value to verify.</param>
            <returns><c>true</c> if the specified pixel format is supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.Palette" draft="yes">
            <summary>Gets a palette associated with a bitmap stored in the frame.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with a bitmap stored in the frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.PixelFormat" draft="yes">
            <summary>Returns a pixel format of the bitmap stored in this frame.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the bitmap stored in this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Frame.Width" draft="yes">
            <summary>Gets the width of the bitmap stored in the frame.</summary>
            <value>The frame width (in pixels).</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" draft="yes">
            <summary>Represents a collection of frames.</summary>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#filesReader"></code></example>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.FrameCollection`1.Item(System.Int32)" draft="yes">
            <summary>Gets the frame at the specified index.</summary>
            <param name="index">The zero-based index of the frame to get.</param>
            <value>The frame at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.FrameCollection`1.#ctor(Aurigma.GraphicsMill.Codecs.ImageReader)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> class using the specified image reader.</summary>
            <param name="hostReader">The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageReader" /> create the frame collection for.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" draft="yes">
            <summary>Represents a base class for the frame collections.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.FrameCollectionBase.Count" draft="yes">
            <summary>Gets the number of frames contained in the collection.</summary>
            <value>The number of frames contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" /> instance.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.FrameCollectionBase.GetEnumerator" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.FrameCollectionBase.GetEnumerator2" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" />.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.FrameCollectionBase.Item(System.Int32)" draft="yes">
            <summary>Gets the frame at the specified index.</summary>
            <param name="index">The zero-based index of the frame to get.</param>
            <value>The <see cref="T:Aurigma.GraphicsMill.Codecs.Frame" /> at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.FrameCollectionBase.#ctor(Aurigma.GraphicsMill.Codecs.ImageReader)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" /> class using the specified image reader.</summary>
            <param name="hostReader">The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageReader" /> create the frame collection for.</param>
        </member>
		
<!-- Codecs.GifFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.GifFrame" draft="yes">
            <summary>Represents a frame of a GIF image.</summary>
            <example><para>The following code reads a GIF image and saves its frames as separate PNG files:</para><code language="CS" source="Samples/Code/LoadSave.cs#gifRead"></code></example>
            <seealso href="supported-file-formats.htm#gifFormat" />
			<seealso href="loading-and-saving-animated-gifs.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.ColorKeyIndex" draft="yes">
            <summary>Gets an index of transparent palette entry.</summary>
            <value>An index of the transparent palette entry.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.Delay" draft="yes">
            <summary>Gets a number of hundredths (1/100) of a second to wait after rendering this frame.</summary>
            <value>The number of hundredths (1/100) of a second to wait after rendering this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.DisposalMethod" draft="yes">
            <summary>Gets a disposal method, i.e. what to do with the screen when this frame is being displayed.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.DisposalMethod" /> of this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.IsInterlaced" draft="yes">
            <summary>Gets a value indicating whether this frame is interlaced.</summary>
            <value><c>true</c> if the frame is interlaced; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.Left" draft="yes">
            <summary>Gets a horizontal position of the left top corner of this frame.</summary>
            <value>The x-coordinate of the upper-left corner of this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrame.Top" draft="yes">
            <summary>Gets a vertical position of the left top corner of this frame.</summary>
            <value>The y-coordinate of the upper-left corner of this frame.</value>
        </member>
		
<!-- Codecs.GifFrameSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.GifFrameSettings" draft="yes">
            <summary>Contains all the possible GIF frame writing settings.</summary>
            <example><para>The following code creates an animated GIF file by grouping JPEG images:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesWriter"></code></example>
            <seealso href="supported-file-formats.htm#gifFormat" />
			<seealso href="loading-and-saving-animated-gifs.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.ColorKeyIndex" draft="yes">
            <summary>Gets or sets an index of transparent palette entry.</summary>
            <value>An index of the transparent palette entry.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.Delay" draft="yes">
            <summary>Gets or sets a number of hundredths (1/100) of a second to wait after rendering a frame.</summary>
            <value>The number of hundredths (1/100) of a second to wait after rendering a frame. The default value is <c>0</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.DisposalMethod" draft="yes">
            <summary>Gets or sets a disposal method, i.e. what to do with the screen when a frame is being displayed.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.DisposalMethod" /> of a frame. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.None" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.IsInterlaced" draft="yes">
            <summary>Gets or sets a value indicating whether a frame is interlaced.</summary>
            <value><c>true</c> if the frame is interlaced; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.IsLocalPaletteEnabled" draft="yes">
            <summary>Gets or sets a value indicating whether local palette of the frames should be saved (otherwise global palette will be used).</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.Left" draft="yes">
            <summary>Gets a horizontal position of the left top corner of a frame.</summary>
            <value>The y-coordinate of the upper-left corner of a frame.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifFrameSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifFrameSettings" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifFrameSettings.Top" draft="yes">
            <summary>Gets a vertical position of the left top corner of a frame.</summary>
            <value>The x-coordinate of the upper-left corner of a frame.</value>
        </member>
		
<!-- Codecs.GifReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.GifReader" draft="yes">
            <summary>Contains methods and properties used to read GIF images.</summary>
            <remarks><para>GIF (Graphics Interchange Format) is a bitmap image format which works well for saving any type of grayscale or 256 color image. The color limitation makes the GIF format unsuitable for reproducing color photographs and other images with continuous color, but it is well-suited for simpler images such as graphics or logos with solid areas of color. The GIF image format supports animations and one-dimensional interlacing (a method of progressive displaying). GIF interlacing makes this format convenient for transmission of images across slow communication links.</para><para>GIF format can store only indexed images. As soon as it supports animation, it can contain multiple frames. Frame can have its own position, and a number of other paramaters, as delay time, disposal method, etc.</para></remarks>
            <example><para>The following code reads a GIF image and saves its frames as separate PNG files:</para><code language="CS" source="Samples/Code/LoadSave.cs#gifRead"></code></example>
            <seealso href="supported-file-formats.htm#gifFormat" />
			<seealso href="loading-and-saving-animated-gifs.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifReader.BackgroundEntryIndex" draft="yes">
            <summary>Gets an index of the background color.</summary>
            <value>An index of the background color in a global palette.</value>
            <remarks><para>If this property is -1, the background color is disabled.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifReader.Frames" draft="yes">
            <summary>Gets a collection of <see cref="T:Aurigma.GraphicsMill.Codecs.GifFrame" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> containing frames loaded from the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifReader.Height" draft="yes">
            <summary>Gets an entire GIF image height.</summary>
            <value>The entire GIF image height (in pixels).</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifReader" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifReader.PlaybackCount" draft="yes">
            <summary>Gets a number of times to play the GIF image.</summary>
            <value>A number of times to play the GIF image.</value>
            <remarks><para>If this property is 0, the file is played infinitely.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifReader.Width" draft="yes">
            <summary>Gets an entire GIF image width.</summary>
            <value>The entire GIF image width (in pixels).</value>
        </member>
		
<!-- Codecs.GifSettings -->		
        <member name="T:Aurigma.GraphicsMill.Codecs.GifSettings" draft="yes">
            <summary>Contains all the possible GIF writing settings.</summary>
            <seealso href="supported-file-formats.htm#gifFormat" />
			<seealso href="loading-and-saving-animated-gifs.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifSettings.IsOptimized" draft="yes">
            <summary>Gets or sets a value indicating whether the image is optimized.</summary>
            <value><c>true</c> if the image is optimized; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifSettings.#ctor(System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifSettings" /> class specifying whether it is optimized.</summary>
            <param name="optimized"><c>true</c> if the image is optimized; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.GifSettings.IsOptimized" /> property.</param>
        </member>
		
<!-- Codecs.GifWriter -->		
        <member name="T:Aurigma.GraphicsMill.Codecs.GifWriter" draft="yes">
            <summary>Contains methods and properties used to write GIF images (both static and animated).</summary>
            <remarks><para>GIF (Graphics Interchange Format) is a bitmap image format which works well for saving any type of grayscale or 256 color image. The color limitation makes the GIF format unsuitable for reproducing color photographs and other images with continuous color, but it is well-suited for simpler images such as graphics or logos with solid areas of color. The GIF image format supports animations and one-dimensional interlacing (a method of progressive displaying). GIF interlacing makes this format convenient for transmission of images across slow communication links.</para><para>GIF format can store only indexed images. As soon as it supports animation, it can contain multiple frames. Frame can have its own position, and a number of other paramaters, as delay time, disposal method, etc.</para></remarks>
            <example><para>The following code creates an animated GIF file by grouping JPEG images:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesWriter"></code></example>
            <seealso href="supported-file-formats.htm#gifFormat" />
			<seealso href="loading-and-saving-animated-gifs.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.BackgroundIndex" draft="yes">
            <summary>Gets or sets an index of the background color.</summary>
            <value>An index in the global palette for the background color. The default value is -1.</value>
            <remarks>Using this property you can also disable background. To do this, pass -1.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.FrameOptions" draft="yes">
            <summary>Gets a <see cref="T:Aurigma.GraphicsMill.Codecs.GifFrameSettings" /> providing GIF frame writing settings.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.GifFrameSettings" /> to specify the desired frame writing settings.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.GifWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.GifWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.Height" draft="yes">
            <summary>Gets or sets an entire GIF image height.</summary>
            <value>The entire GIF image height (in pixels). The default value is <c>0</c>.</value>
            <remarks>Using the <see cref="P:Aurigma.GraphicsMill.Codecs.GifWriter.Width" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.GifWriter.Height" /> properties you specify a "viewport" for the GIF file. If you put the frame which exceeds of these dimensions, it is cropped.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.IsOptimized" draft="yes">
            <summary>Gets or sets a value indicating whether the image is optimized.</summary>
            <value><c>true</c> if the image is optimized; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.GifWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.Palette" draft="yes">
            <summary>Gets or sets a global palette for the GIF image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> for the GIF image.</value>
            <remarks><para>Using a global palette may noticeable reduce the resulting file size, however it requires some additional preparations of the GIF frames. Besides, you will not be able to use different colors in each frame.</para><para>By default the global palette is not initialized (it is set to null).</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.PlaybackCount" draft="yes">
            <summary>Gets or sets a number of times to play the GIF image.</summary>
            <value>A number of times to play the GIF image. The default value is <c>0</c>, which means playing infinitely.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.GifWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.GifWriter.Width" draft="yes">
            <summary>Gets or sets an entire GIF image width.</summary>
            <value>The entire GIF image width (in pixels). The default value is <c>0</c>.</value>
            <remarks>Using the <see cref="P:Aurigma.GraphicsMill.Codecs.GifWriter.Width" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.GifWriter.Height" /> properties you specify a "viewport" for the GIF file. If you put the frame which exceeds of these dimensions, it is cropped.</remarks>
        </member>
		
<!-- Codecs.ImageReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ImageReader" draft="yes">
            <summary>Represents a base class for all image readers.</summary>
            <remarks><para>This class is derived by all image readers. It provides the following base functionality:</para><list type="bullet"><item><description>Creating a reader on a file or stream with appropriate overload of <see cref="Overload:Aurigma.GraphicsMill.Codecs.ImageReader.Create" /> method. To check whether the reader is opened, use <see cref="P:Aurigma.GraphicsMill.Codecs.ImageReader.IsOpened" /> property.</description></item><item><description>Retrieving frames via the <see cref="P:Aurigma.GraphicsMill.Codecs.ImageReader.Frames" /> property. </description></item><item><description>Recognizing format of a file via the <see cref="Overload:Aurigma.GraphicsMill.Codecs.ImageReader.RecognizeFormat" /> methods.</description></item></list></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#base"></code></example>
            <seealso href="working-with-files.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.AdobeResources" draft="yes">
            <summary>Gets Adobe® image resource blocks from the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks obtained from the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.ClippingPaths" draft="yes">
            <summary>Gets a collection of clipping paths from the image.</summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing clipping paths obtained from the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.Close" draft="yes">
            <summary>Closes the reader and detaches it from the opened file (or other media).</summary>
            <remarks><para>If you close the reader which has not been opened, the method does nothing. So you need not do any checks to ensure if reader is opened to close it.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.CloseOnDispose" draft="yes">
            <summary>Gets or sets if the reader should be closed before disposing.</summary>
            <value><c>true</c> if the reader should be closed before disposing, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.ColorProfile" draft="yes">
            <summary>Gets a color profile associated with the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.Create(System.String)" draft="yes">
            <summary>Creates an appropriate image reader on the specified file.</summary>
            <param name="fileName">The name of the file to read from.</param>
            <returns>The appropriate descendant of the <see cref="T:Aurigma.GraphicsMill.Codecs.ImageReader" /> class.</returns>
            <example><code language="CS" source="Samples/Code/Reference.cs#base"></code></example>
            <overloads><summary>Creates an appropriate image reader on the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.Create(System.IO.Stream)" draft="yes">
            <summary>Creates an appropriate image reader on the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to read from.</param>
            <returns>The appropriate descendant of the <see cref="T:Aurigma.GraphicsMill.Codecs.ImageReader" /> class.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.DpiX" draft="yes">
            <summary>Gets an entire horizontal resolution of the image.</summary>
            <value>The entire horizontal resolution of the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.DpiY" draft="yes">
            <summary>Gets an entire vertical resolution of the image.</summary>
            <value>The entire vertical resolution of the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Exif" draft="yes">
            <summary>Gets EXIF data collection from the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection obtained from the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.FileFormat" draft="yes">
            <summary>Gets the format of the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> of the opened image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.Finalize">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Frames" draft="yes">
            <summary>Gets a collection of frames of the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollectionBase" /> containing frames (layes) of the opened image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Height" draft="yes">
            <summary>Gets an entire image height.</summary>
            <value>The entire image height (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Ink" draft="yes">
            <summary>Gets ink characteristics of a spot color of the image.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Iptc" draft="yes">
            <summary>Gets IPTC data collection from the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing EXIF data collection obtained from the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.IsOpened" draft="yes">
            <summary>Gets a value indicating whether the reader is opened.</summary>
            <value><c>true</c> if the reader is opened; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.#ctor(System.String)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Palette" draft="yes">
            <summary>Gets a palette associated with the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with the opened image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.PixelFormat" draft="yes">
            <summary>Gets a pixel format of the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the opened.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.RecognizeFormat(System.String)" draft="yes">
            <summary>Obtains a format of the specified file.</summary>
            <param name="fileName">The file name to obtain a format for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> representing the format of a given file.</returns>
            <overloads><summary>Obtains a file format from a given media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.RecognizeFormat(System.IO.Stream)" draft="yes">
            <summary>Obtains a file format from a given <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to obtain a format from.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> representing the format for a given stream.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Size" draft="yes">
            <summary>Gets an entire image size.</summary>
            <value>A <see cref="T:System.Drawing.Size" /> containing dimensions of this image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageReader.ValidateState">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Width" draft="yes">
            <summary>Gets an entire image width.</summary>
            <value>Entire image width (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageReader.Xmp" draft="yes">
            <summary>Gets the XML code containing the XMP metadata from the image.</summary>
            <value>A XML code containing the XMP metadata obtained from the image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
        </member>
		
<!-- Codecs.ImageWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ImageWriter" draft="yes">
            <summary>Represents a base class for all image writers.</summary>
            <remarks><para>This class is derived by all image writers. It allows creating a writer on a file or stream with appropriate overload of <see cref="Overload:Aurigma.GraphicsMill.Codecs.ImageWriter.Create" /> method. To check whether the writer is opened, use <see cref="P:Aurigma.GraphicsMill.Codecs.ImageWriter.IsOpened" /> property.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#base"></code></example>
            <seealso href="working-with-files.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Close" draft="yes">
            <summary>Closes the writer, flushes all unsaved data, and detaches the it from the opened file (or other media).</summary>
            <remarks><para>If you close the writer which has not been opened, the method does nothing. So you need not do any checks to ensure if writer is opened to close it.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Create(Aurigma.GraphicsMill.Codecs.FileFormat,System.String)" draft="yes">
            <summary>Creates and returns image writer on the specified file.</summary>
            <param name="format"><see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> to create reader for.</param>
            <param name="fileName">The name of the file to write to.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class instance.</returns>
            <overloads><summary>Creates and returns image writer on specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Create(Aurigma.GraphicsMill.Codecs.FileFormat,System.IO.Stream)" draft="yes">
            <summary>Creates and returns image writer on the specified stream.</summary>
            <param name="format"><see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> to create reader for.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> class instance that holds data to write to.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Create(System.String)" draft="yes">
            <summary>Creates and returns image writer on the specified file.</summary>
            <param name="fileName">The name of the file to write to.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class instance.</returns>
            <example><code language="CS" source="Samples/Code/Reference.cs#base"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Create(System.String,Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Creates and returns image writer on the specified file.</summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="settings">The writer settings.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Create(System.IO.Stream,Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Creates and returns image writer on the specified stream.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> class instance that holds data to write to.</param>
            <param name="settings">The writer settings.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Finalize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.ImageWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ImageWriter.IsOpened" draft="yes">
            <summary>Gets a value indicating whether the writer is opened.</summary>
            <value><c>true</c> if the writer is opened; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <exclude />
            <summary>Configures this image writer using the provided settings.</summary>
            <param name="settings">The <see cref="T:Aurigma.GraphicsMill.Codecs.WriterSettings" /> to configure this writer from.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ImageWriter.ValidateState">
            <exclude />
        </member>
		
<!-- Codecs.IMetadataWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.IMetadataWriter" draft="yes">
            <summary>Provides metadata-related parameters.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.IMetadataWriter.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.IMetadataWriter.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.IMetadataWriter.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.IMetadataWriter.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata.</summary>
            <value>A XML code containing the XMP metadata.</value>
        </member>
		
<!-- Codecs.IptcDictionary -->
        <member name="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" draft="yes">
            <summary>Represents a dictionary of IPTC fields.</summary>
            <remarks><para>All functionality of this class is implemented in base class <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />. To put or get some IPTC field, you should use the <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property. Just pass ID of the IPTC field as an argument into this property. Refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see> for exact field ID values. Alternatively you can use static members <see cref="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Caption" />, <see cref="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Writer" />, <see cref="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Keyword" />, and others. Exact interpretations of these parameters can be found at <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>. Currently specification 4.1 is supported.</para><para>IPTC tags consist of two numbers. For example, "2:25" means "Keywords". To be able to pass these numbers into <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" />, you should pack them as follows: first byte stores the second number (25 in this example), the second byte stores the first number (2 in this example). Other two bytes are not used.</para></remarks>
            <example><para>The code below demonstrates how to extract and display both EXIF and IPTC data.</para><code language="CS" source="Samples/Code/Metadata.cs#exifIptcRead"></code></example>
            <seealso href="exif-and-iptc-metadata.htm" />
			<seealso href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</seealso>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Byline">
            <summary>The name of the creator of the image, e.g. artist, photographer, etc.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.BylineTitle">
            <summary>The byline title (e.g. staff photographer, correspondent, etc).</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Caption">
            <summary>The textual description of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Category">
            <summary>The image category.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.City">
            <summary>The city of the image origin.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.IptcDictionary.Clone" draft="yes">
            <summary>Returns a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> instance.</summary>
            <returns>An object containing a full copy of this <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" />.</returns>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.CopyrightNotice">
            <summary>The copyright notice.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Country">
            <summary>The country of the image origin.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.CountryCode">
            <summary>The two or three letter upper-case code.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Credit">
            <summary>The provider of the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.DateCreated">
            <summary>The date the image (as an intellectual content, rather than physical file) created.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Headline">
            <summary>The brief overview for the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Keyword">
            <summary>The keywords used for search.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.IptcDictionary.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.IptcDictionary.#ctor(Aurigma.GraphicsMill.Codecs.IptcDictionary)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> class from the specified existing dictionary.</summary>
            <param name="iptc">The <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> to be copied.</param>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.ObjectName">
            <summary>The short reference for the object.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.OriginalTransmissionReference">
            <summary>The location of the original transmission.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Source">
            <summary>The original owner of the intellectual content of this image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.SpecialInstructions">
            <summary>Some custom editorial instructions.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.State">
            <summary>The state/province of the image origin.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Sublocation">
            <summary>The name of a specific area within a city, a well-known location, a monument, or a natural feature.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.SupplementaryCategory">
            <summary>The supplementary category for the image.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Urgency">
            <summary>The editorial urgency of the content.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.IptcDictionary.Writer">
            <summary>The name of editor or other person involved in the writing.</summary>
            <remarks>To get more details about exact meaning of this field, refer <see href="http://www.iptc.org/std/IIM/4.1/specification/IIMV4.1.pdf">IPTC specification</see>.</remarks>
        </member>
		
<!-- Codecs.IXmpDictionary -->
        <member name="T:Aurigma.GraphicsMill.Codecs.IXmpDictionary" draft="yes">
            <summary>Represents a nongeneric collection of key/value pairs.</summary>
            <remarks><para>This abstract class is used to retrieve XMP metadata stored in images. Such metadata is stored in the XML format (more specifically, RDF) as pairs of keys and values belonging to different namespaces. To get a collection of all namespaces, use the <see cref="P:Aurigma.GraphicsMill.Codecs.IXmpDictionary.Namespaces" /> property. To get a collection of keys contained in a specific namespace, use the <see cref="M:Aurigma.GraphicsMill.Codecs.IXmpDictionary.FindKeysByNamespace(Aurigma.GraphicsMill.Codecs.XmpNamespace)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.IXmpDictionary.FindKeysByNamespace(Aurigma.GraphicsMill.Codecs.XmpNamespace)" draft="yes">
            <summary>Returns an array of tags belonging to the specified namespace in the current tree.</summary>
            <param name="ns">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> for which the tags should be returned.</param>
            <returns>An array of tags belonging to the given namespace.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.IXmpDictionary.Namespaces">
            <summary>Gets a collection of metadata namespaces.</summary>
            <value>A collection of namespaces.</value>
        </member>
		
<!-- Codecs.JpegAlignToSampleSizeMode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode" draft="yes">
            <summary>Contains possible values for JPEG sample size alignment.</summary>
            <remarks><para>This enumeration is used in the <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize(System.Drawing.Rectangle,Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode)" /> method of the <see cref="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" /> class. It specifies whether to align only coordinates of the upper-left corner, or width and height also.</para><para>
If you need just to crop an image and you do not want to use it as patch for another image, you can use the <see cref="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Crop" /> value. In this case the width and height of the cropping rectangle can be arbitrary.</para><para>However if you are going to put this image onto another (i.e. patch it), the width and height of this image must be aligned. In this case you should use <see cref="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Patch" /> value.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Crop" draft="yes">
            <summary>Only coordinates of the upper-left corner will be aligned. Width and height will not be aligned. Should be used for <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped(System.String,System.Drawing.Rectangle)" /> if no consequent <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched(System.String,System.Drawing.Point,Aurigma.GraphicsMill.Bitmap)" /> is implied. Width and height still may be changed to preserve right and bottom position of the input rectangle. However it will not be aligned.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Patch" draft="yes">
            <summary>The entire rectangle is aligned. You should use this value if you are preparing a rectangle (offset and bitmap dimensions) for the <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched(System.String,System.Drawing.Point,Aurigma.GraphicsMill.Bitmap)" /> method.</summary>
        </member>
		
<!-- Codecs.JpegMarkerException -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegMarkerException" draft="yes">
            <summary>Represents the error that occurs when the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> tries to write an incorrect JPEG metadata.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegMarkerException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegMarkerException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegMarkerException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegMarkerException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegMarkerException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegMarkerException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegMarkerException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegMarkerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
		
<!-- Codecs.JpegReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegReader" draft="yes">
            <summary>Contains methods and properties used to read JPEG images.</summary>
            <remarks><para>JPEG (Joint Photographic Experts Group) is the most popular bitmap image format for storing digital photos using lossy compression. The JPEG format was designed for compressing either grayscale or full-color images of real-world scenes. It supports the sequential and progressive compression schemes, subsampling, and setting a quality range from 0 to 100.</para><para>JPEG files can also contain Adobe® resources, XMP, EXIF and IPTC data. However it does not support multiple images in the single file.</para><para>JPEG images support three main color spaces: </para><list type="bullet"><item><description>RGB;</description></item><item><description>CMYK;</description></item><item><description>Grayscale;</description></item></list><para>It does not support indexed images, as well as extended (16 bit per channel) pixel formats.</para></remarks>
            <example><para>The following code saves JPEG file with the quality value set to 90, disabled chroma subsampling, and the enabled JPEG progressive technique.</para><code language="CS" source="Samples/Code/LoadSave.cs#jpegWriter1"></code></example>
            <seealso href="supported-file-formats.htm#jpegFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegReader.CheckIntegrity">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegReader.Scale" draft="yes">
            <summary>Gets or sets a value specifying how to scale original image during reading.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.JpegScale" /> that specifies how the image should be scaled down during reading.</value>
        </member>
		
<!-- Codecs.JpegScale -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegScale" draft="yes">
            <summary>Contains possible values for scaling JPEG image during reading.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegScale.x1" draft="yes">
            <summary>No scale.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegScale.x2" draft="yes">
            <summary>1/2 scale. The reader returns an image that is 1/2 the width/height of the original, and 1/4 the number of pixels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegScale.x4" draft="yes">
            <summary>1/4 scale. The reader returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.JpegScale.x8" draft="yes">
            <summary>1/8 scale. The reader returns an image that is 1/8 the width/height of the original, and 1/64 the number of pixels.</summary>
        </member>

<!-- Codecs.JpegSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegSettings" draft="yes">
            <summary>Contains all the possible JPEG writing settings.</summary>
            <remarks><para>The main JPEG encoder setting is a quality/file size ratio. It is specified with <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Quality" /> property. This property accepts values in range <c>[0, 100]</c> where 0 means the lowest quality (but smallest file size) and 100 means the highest quality (but largest file size).</para><para>Besides of this you can specify is JPEG should be progressive (using <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.IsProgressive" />). It allows the browsers to display the JPEG file while it is being downloaded (displaying more and more details upon new file portions download). Unfortunately this feature is not supported with Internet Explorer browser.</para><para>Another compression setting can be changed via <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.UseSubsampling" /> property. Chroma subsampling is one of the compression methods used in JPEG. It is based on the specific of the human vision and allows to reduce size of the result file by storing color information at lower resolution than luminance information. In most cases this tradeoff will not be noticeable to the human. But sometimes such information loss may be significant (e.g. for some classes of image processing algorithms) and chroma subsampling should be turned off. Chroma subsampling is enabled by default.</para><para>You can also provide meta-information for encoding. Use <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.AdobeResources" />, <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Exif" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Iptc" /> properties to specify corresponding metadata objects.</para></remarks>
            <example><para>The following code saves JPEG file with the quality value set to 90, disabled chroma subsampling, and the enabled JPEG progressive technique.</para><code language="CS" source="Samples/Code/LoadSave.cs#jpegBitmap1"></code></example>
            <seealso href="supported-file-formats.htm#jpegFormat" />
			<seealso href="working-with-jpeg.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.IsProgressive" draft="yes">
            <summary>Gets or sets a value indicating whether the JPEG image is progressive.</summary>
            <value><c>true</c> if JPEG image is progressive; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegSettings.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegSettings" /> class using the specified JPEG quality.</summary>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Quality" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegSettings.#ctor(System.Int32,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegSettings" /> class using the specified JPEG compression settings.</summary>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Quality" /> property.</param>
            <param name="useSubsampling"><c>true</c> if chroma subsampling is used; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.UseSubsampling" /> property.</param>
            <param name="isProgressive"><c>true</c> if JPEG image is progressive; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegSettings.IsProgressive" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Quality" draft="yes">
            <summary>Gets or sets JPEG quality.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
            <remarks>The higher JPEG quality you specify, the larger file size you get.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.UseSubsampling" draft="yes">
            <summary>Gets or sets a value indicating whether to use chroma subsampling in JPEG compression or not.</summary>
            <value><c>true</c> if chroma subsampling is used; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegSettings.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata to write into the image.</summary>
            <value>A XML code containing the XMP metadata to write into the image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
		
<!-- Codecs.JpegWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.JpegWriter" draft="yes">
            <summary>Contains methods and properties used to write JPEG images.</summary>
            <remarks><para>JPEG (Joint Photographic Experts Group) is the most popular bitmap image format for storing digital photos using lossy compression. The JPEG format was designed for compressing either grayscale or full-color images of real-world scenes. It supports the sequential and progressive compression schemes, subsampling, and setting a quality range from 0 to 100.</para><para>JPEG files can also contain Adobe® resources, XMP, EXIF and IPTC data. However it does not support multiple images in the single file.</para><para>JPEG images support three main color spaces: </para><list type="bullet"><item><description>RGB;</description></item><item><description>CMYK;</description></item><item><description>Grayscale;</description></item></list><para>It does not support indexed images, as well as extended (16 bit per channel) pixel formats.</para></remarks>
            <example><para>The following code saves JPEG file with the quality value set to 90, disabled chroma subsampling, and the enabled JPEG progressive technique.</para><code language="CS" source="Samples/Code/LoadSave.cs#jpegWriter1"></code></example>
            <seealso href="supported-file-formats.htm#jpegFormat" />
			<seealso href="working-with-jpeg.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.Close" draft="yes">
            <summary>Closes the writer, flushes all unsaved data, and detaches the it from the opened file (or other media).</summary>
            <remarks><para>If you close the writer which has not been opened, the method does nothing. So you need not do any checks to ensure if writer is opened to close it.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection to write into the image.</value>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.IsProgressive" draft="yes">
            <summary>Gets or sets a value indicating whether the JPEG image is progressive.</summary>
            <value><c>true</c> if JPEG image is progressive; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.String,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified JPEG quality.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Quality" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified JPEG compression settings.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Quality" /> property.</param>
            <param name="progressive"><c>true</c> if JPEG image is progressive; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.IsProgressive" /> property.</param>
            <param name="useSubsampling"><c>true</c> if chroma subsampling is used; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.UseSubsampling" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.IO.Stream,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified JPEG quality.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Quality" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> class using the specified JPEG compression settings.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Quality" /> property.</param>
            <param name="progressive"><c>true</c> if JPEG image is progressive; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.IsProgressive" /> property.</param>
            <param name="useSubsampling"><c>true</c> if chroma subsampling is used; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.UseSubsampling" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Quality" draft="yes">
            <summary>Gets or sets JPEG quality.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
            <remarks>The higher JPEG quality you specify, the larger file size you get.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.JpegWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.UseSubsampling" draft="yes">
            <summary>Gets or sets a value indicating whether to use chroma subsampling in JPEG compression or not.</summary>
            <value><c>true</c> if chroma subsampling is used; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata to write into the image.</summary>
            <value>A XML code containing the XMP metadata to write into the image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
            <seealso href="preserving-metadata-while-processing-images.htm" />
        </member>
		
<!-- Codecs.LosslessJpeg -->
        <member name="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" draft="yes">
            <summary>Contains methods and properties used to apply lossless operations on JPEG images.</summary>
            <remarks><para>This class is intended to operate with JPEG images without recompression. It is useful if you need to modify metadata only (without modifying the image), rotate or/and flip  recompression, or recompress only a part of an image. For example, if you add a text caption on the image, it makes sense to recompress only the part of image where the caption is placed and leave all the rest of image intact.</para><para>The following lossless operations are supported:</para><list type="bullet"><item><term>Changing Adobe® resources, XMP, EXIF or IPTC data</term><description> use <see cref="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AdobeResources" />, <see cref="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Xmp" />, <see cref="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Exif" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Iptc" /> properties to modify metadata, and then use <see cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Write" /> methods to save changes.</description></item><item><term>Rotating and flipping</term><description> use the <see cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated" /> method.</description></item><item><term>Recompressing only a part of the image</term><description> use <see cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize" />, <see cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped" />, and <see cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched" />. See remarks for these methods for more details. </description></item></list><para>According to JPEG specification an image is represented by blocks of pixels so-called JPEG Minimum Coded Units (MCU). Typically MCU size is a number divisible by 8. That fact allows performing lossless rotation: MCU blocks are rearranged in new order as well as the order of pixels is changed inside each MCU. Examine the situation when width or height of an image is non-divisible by MCU size, it means that the last column or row contains partially-filled MCU blocks. Such images do not support some types of rotation. They will be cropped during transformation and width and height of the resulting image will be divisible by MCU size. If you need to know whether dimensions of your image will be changed after a transformation, you can use the <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.IsTrimmingRequired(System.Drawing.RotateFlipType)" /> method. This method indicates whether dimensions will be changed taking into account the dimensions of currently opened image and the desired type of transformation.</para></remarks>
            <seealso href="supported-file-formats.htm#jpegFormat" />
			<seealso href="applying-lossless-jpeg-transforms.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks stored in the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks stored in the opened image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize(System.Drawing.Point,Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Aligns coordinates of the point and bitmap to JPEG Minimum Coded Units (MCU).</summary>
            <param name="offset">A <see cref="T:System.Drawing.Point" /> at which the <i>bitmap</i> should be placed. It will be used as a location of the upper-left corner of the input rectangle.</param>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to aligne. Its width and height will be used as dimensions of the input rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> which contains coordinates aligned to MCU. It is always greater or equal than the input rectangle formed by the <i>offset</i> and dimensions of the <i>bitmap</i>.</returns>
            <remarks>This method is used when you need overwrite some portion of JPEG image by some bitmap. Since JPEG compressed data is stored in blocks (samples) of several pixels (typically 8, 16, or other number divisible by 8), you cannot write bitmap by arbitrary coordinates. That's why you need to align coordinates by JPEG Minimum Coded Units (MCU).</remarks>
            <seealso cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped" />
			<seealso cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched" />
            <overloads><summary>Aligns coordinates to JPEG Minimum Coded Units (MCU).</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize(System.Drawing.Rectangle,Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode)" draft="yes">
            <summary>Aligns the rectangle to JPEG Minimum Coded Units (MCU).</summary>
            <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> to align to MCU.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode" /> specifying whether to align only coordinates of the upper-left corner, or width and height also. See the <b>Remerks</b> section for details.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> aligned to MCU. It is always greater or equal than the input <i>rectangle</i>.</returns>
            <remarks><para>This method is used when you need overwrite some portion of JPEG image by some bitmap. Since JPEG compressed data is stored in blocks (samples) of several pixels (typically 8, 16, or other number divisible by 8), you cannot write bitmap by arbitrary coordinates. That's why you need to align coordinates by JPEG Minimum Coded Units (MCU).</para><para>If you need just to crop an image and you do not want to use it as patch for another image, you can use the <see cref="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Crop" /> value. In this case the width and height of the cropping rectangle can be arbitrary.</para><para>However if you are going to put this image onto another (i.e. patch it), the width and height of this image must be aligned. In this case you should use <see cref="F:Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode.Patch" /> value.</para></remarks>
            <seealso cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped" />
			<seealso cref="Overload:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Close" draft="yes">
            <summary>Closes this <see cref="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" /> and releases the containing file.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.ColorProfile" draft="yes">
            <summary>Gets a color profile associated with the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection stored in the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection stored in the opened image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Finalize">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection stored in the opened image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection stored in the opened image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.IsTrimmingRequired(System.Drawing.RotateFlipType)" draft="yes">
            <summary>Checks whether the image will be trimmed during the rotation or flipping.</summary>
            <param name="rotateFlipType">A <see cref="T:System.Drawing.RotateFlipType" /> to test.</param>
            <returns><c>true</c> if the image will be trimmed; otherwise, <c>false</c>.</returns>
            <remarks><para>This method determined whether the image dimensions will be changed taking into account the original dimensions and the desired type of transformation.</para></remarks>
        </member>
		<member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.IsDisposed" draft="yes">
			<excluded />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.MCUSize" draft="yes">
            <summary>Gets a Minimum Coded Units (MCU) of this image.</summary>
            <value>A Minimum Coded Units (MCU) of the opened image.</value>
            <remarks>JPEG compressed data is stored in blocks (samples) of several pixels, typically of 8, 16, or other number divisible by 8. Sometimes, it is necessary to take the sample size into account, for example, when cropping images.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this instance for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.LosslessJpeg" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this instance for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Write(System.String)" draft="yes">
            <summary>Writes the image to to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <remarks>This method is useful for updating metadata.</remarks>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#losslessMetadata"></code></example>
            <overloads><summary>Writes the image to to the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Write(System.IO.Stream)" draft="yes">
            <summary>Writes the image to to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <remarks>This method is useful for updating metadata.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped(System.String,System.Drawing.Rectangle)" draft="yes">
            <summary>Crops the image and writes it to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <param name="rectangle">The cropping rectangle. The rectangle must be inside the image. Note, coordinates of this rectangle and coordinates of the cropped portion of image may be different.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#losslessCrop"></code></example>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
            <overloads><summary>Crops the image and writes it to specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteCropped(System.IO.Stream,System.Drawing.Rectangle)" draft="yes">
            <summary>Crops the image and writes it to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <param name="rectangle">The cropping rectangle. The rectangle must be inside the image. Note, coordinates of this rectangle and coordinates of the cropped portion of image may be different.</param>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched(System.String,System.Drawing.Point,Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Patches the image using a given bitmap and writes the result to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <param name="offset">A <see cref="T:System.Drawing.Point" /> at which the <i>bitmap</i> should be placed. Note, it should be aligned to MCU using the <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize(System.Drawing.Rectangle,Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode)" /> method.</param>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to place at the given position.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#losslessPatch"></code></example>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
            <overloads><summary>Patches the image using a given bitmap and writes the result to specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WritePatched(System.IO.Stream,System.Drawing.Point,Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Patches the image using a given bitmap and writes the result to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <param name="offset">A <see cref="T:System.Drawing.Point" /> at which the <i>bitmap</i> should be placed. Note, it should be aligned to MCU using the <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.AlignToMCUSize(System.Drawing.Rectangle,Aurigma.GraphicsMill.Codecs.JpegAlignToSampleSizeMode)" /> method.</param>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to place at the given position.</param>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.String,System.Drawing.RotateFlipType)" draft="yes">
            <summary>Rotates and/or flips the image and writes the result to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <param name="transform">A <see cref="T:System.Drawing.RotateFlipType" /> specifying how much an image is rotated and the axis used to flip the image.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#losslessRotate"></code><code language="CS" source="Samples/Code/LoadSave.cs#losslessFlip"></code></example>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
            <overloads><summary>Rotates and/or flips the image and writes the result to specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.IO.Stream,System.Drawing.RotateFlipType)" draft="yes">
            <summary>Rotates and/or flips the image and writes the result to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <param name="transform">A <see cref="T:System.Drawing.RotateFlipType" /> specifying how much an image is rotated and the axis used to flip the image.</param>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteTransposed(System.String)" draft="yes">
            <summary>Transpose the image and writes the result to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <remarks>It is the same as <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.String,System.Drawing.RotateFlipType)" /> with transform parameter equal to <see cref="F:System.Drawing.RotateFlipType.Rotate270FlipY" />.</remarks>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
            <overloads><summary>Transpose the image and writes the result to the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteTransposed(System.IO.Stream)" draft="yes">
            <summary>Transpose the image and writes the result to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <remarks>It is the same as <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.IO.Stream,System.Drawing.RotateFlipType)" /> with transform parameter equal to <see cref="F:System.Drawing.RotateFlipType.Rotate270FlipY" />.</remarks>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteTransversed(System.String)" draft="yes">
            <summary>Transverse the image and writes the result to the specified file.</summary>
            <param name="fileName">The name of the file to save the result.</param>
            <remarks>It is the same as <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.String,System.Drawing.RotateFlipType)" /> with transform parameter equal to <see cref="F:System.Drawing.RotateFlipType.Rotate90FlipY" />.</remarks>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
            <overloads><summary>Transverse the image and writes the result to the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteTransversed(System.IO.Stream)" draft="yes">
            <summary>Transverse the image and writes the result to the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to save the result.</param>
            <remarks>It is the same as <see cref="M:Aurigma.GraphicsMill.Codecs.LosslessJpeg.WriteRotated(System.IO.Stream,System.Drawing.RotateFlipType)" /> with transform parameter equal to <see cref="F:System.Drawing.RotateFlipType.Rotate90FlipY" />.</remarks>
            <seealso href="applying-lossless-jpeg-transforms.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.LosslessJpeg.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata stored in the opened image.</summary>
            <value>A XML code containing the XMP metadata stored in the opened image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
        </member>

<!-- Codecs.MediaCorruptedException -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MediaCorruptedException" draft="yes">
            <summary>Represents the error that occurs when you try to open file (or other media) which contains corrupted data.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaCorruptedException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaCorruptedException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaCorruptedException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaCorruptedException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaCorruptedException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaCorruptedException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaCorruptedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaCorruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
		
<!-- Codecs.MediaProviderException -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MediaProviderException" draft="yes">
            <summary>Represents the error that occurs when you are working with image readers or writers.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaProviderException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaProviderException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaProviderException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaProviderException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaProviderException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaProviderException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaProviderException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
		
<!-- Codecs.MediaUnsupportedException -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException" draft="yes">
            <summary>Represents the error that occurs when you try to read file (or other media) which is not supported by Graphics Mill.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MediaUnsupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
		
<!-- Codecs.MetadataDictionary -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" draft="yes">
            <summary>Represents a dicitonary of image metadata, such as EXIF, IPTC, etc.</summary>
            <remarks><para>This abstract class contains partial implementation of the <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" />, <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" />, and <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> classes. It is used to read, write, and modify metadata stored in images.</para><para>Metadata is stored as pairs of keys and values. Key is an EXIF/IPTC tag or image block ID, value is an actual value stored at this key. To get a piece of data from the collection use property <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> or method <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetItemArray(System.Object)" /> (for several items). To check whether an item with certain key is available at the dictionary, you can use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Contains(System.Object)" /> method. You can also get all keys or all values through <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Keys" /> or <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Values" /> property correspondingly. For easier displaying, you can convert key into human-readable text string using <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetKeyDescription(System.Object)" /> method.</para><para>Typically you get this class instance from <see cref="P:Aurigma.GraphicsMill.Codecs.ImageReader.Exif" />, <see cref="P:Aurigma.GraphicsMill.Codecs.ImageReader.Iptc" />, or <see cref="P:Aurigma.GraphicsMill.Codecs.ImageReader.AdobeResources" /> property of the <see cref="T:Aurigma.GraphicsMill.Codecs.ImageReader" />. You can also create a new empty instance of <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" />, <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> or <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> class and put necessary details using <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Add(System.Object,System.Object)" /> method. After that you can put this dictionary into <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Exif" />, <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.Iptc" /> or <see cref="P:Aurigma.GraphicsMill.Codecs.JpegWriter.AdobeResources" /> property of the <see cref="T:Aurigma.GraphicsMill.Codecs.JpegWriter" /> or <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" /> class. This way you can save updated EXIF data into the image file.</para></remarks>
            <seealso href="working-with-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.~MetadataDictionary">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Add(System.Object,System.Object[])" draft="yes">
            <summary>Adds elements with the provided key and data to this dictionary.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <param name="values">An array of <see cref="T:System.Object" /> to add into the dictionary.</param>
            <remarks><para>To check whether the element with such key exists, use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Contains(System.Object)" /> method.</para><para>An alternative way to add new elements into the dictionary is to use <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property.</para></remarks>
            <overloads><summary>Adds one or several elements with the provided key and data to this dictionary.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Add(System.Object,System.Object)" draft="yes">
            <summary>Adds an element with the provided key and value to this dictionary.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            <remarks><para>To check whether the element with such key exists, use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Contains(System.Object)" /> method.</para><para>An alternative way to add new elements into the dictionary is to use <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Clear" draft="yes">
            <summary>Removes all elements from this dictionary.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Contains(System.Object)" draft="yes">
            <summary>Determines whether this dictionary contains an element with the specified key.</summary>
            <param name="key">The key to locate in the dictionary. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.ConvertKeyToObject(System.UInt32)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.ConvertKeyToUint(System.Object)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.ConvertValueToDataItem(System.Object,System.IntPtr)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.ConvertValueToObject(System.UInt32,System.IntPtr)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the entire dictionary to a given array, starting at the specified index.</summary>
            <param name="array">The one-dimensional zero-based <see cref="T:System.Array" /> that is the destination for the elements copied from the dictionary. Elements are values without keys.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Count" draft="yes">
            <summary>Gets the number of elements actually contained in this dictionary.</summary>
            <value>The number of elements actually contained in the dictionary.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetDictionaryEnumerator" draft="yes">
            <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through this dictionary.</summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" /> instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetEnumerator" draft="yes">
            <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetItemArray(System.Object)" draft="yes">
            <summary>Returns an array of elements with the specified key.</summary>
            <param name="key">Key of elements to get. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <returns>An array of elements with a given key.</returns>
            <remarks><para>The essential difference from <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> property is that this method returns an array, even if only one element is stored at this key. In contrast, property <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> returns the element itself, and if several elements are available at the specified key, it returns the first one. </para><para>Therefore it is preferrable to use this method instead of <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" />. However if you do not care about handling all values, you still can use <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" /> since it has simpler syntax.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetItemString(System.Object)" draft="yes">
            <summary>Returns a string representation of the element with the specified key.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to get. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <returns>A string representation for the element with the specified key.</returns>
            <remarks><para>If the dictionary contains several elements with a given key, this method returns all these values concatenated into the single string separated by a whitespace.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetKeyDescription(System.Object)" draft="yes">
            <summary>Returns a textual description for the specified key.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key to get textual description for. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <returns>A textual description of the key.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.IsFixedSize" draft="yes">
            <summary>Gets a value indicating whether the dictionary has a fixed size.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.IsReadOnly" draft="yes">
            <summary>Gets a value indicating whether the dictionary is read-only.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether the dictionary is synchronized.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Item(System.Object)" draft="yes">
            <summary>Gets or sets the element at the specified key.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to get or set. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <value>The element at the specified key.</value>
            <remarks><para>If the dictionary contains several elements with a given key, this property returns the first element. To get all the elements, use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetItemArray(System.Object)" /> method. </para><para>If you need to extract a string representation of this element, you should use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.GetItemString(System.Object)" /> method. For those elements which returns a enumeration value, it will return human-friendly string instead of the number.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Keys" draft="yes">
            <summary>Gets a collection containing the keys in this dictionary.</summary>
            <value>An object that implements <see cref="T:System.Collections.ICollection" /> that contains keys stored in this dictionary.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Remove(System.Object)" draft="yes">
            <summary>Removes the value with the specified key from this dictionary.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to remove. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <remarks>If specified key was not found, method just do nothing.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.SetItemArray(System.Object,System.Object[])" draft="yes">
            <summary>Sets multiple elements at the specified key.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of elements to set. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <param name="value">An array of values to put into the dictionary at the specified key.</param>
            <remarks><para>If item (or several items) are already stored at specified key, this method overwrites it (or them). To check whether the item with such key exists, use <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Contains(System.Object)" /> method.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to this dictionary.</summary>
            <value>Always returns <c>null</c> (synchronized access was not implemented in the <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataDictionary.Values" draft="yes">
            <summary>Gets a collection containing the values in this dictionary.</summary>
            <value>An object that implements <see cref="T:System.Collections.ICollection" /> that contains values stored in this dictionary.</value>
        </member>
		
<!-- Codecs.MetadataEnumerator -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MetadataEnumerator" draft="yes">
            <summary>Enumerates the elements of this dictionary.</summary>
            <remarks><para>This class implements the <see cref="T:System.Collections.IEnumerator" /> interface.</para><para>Initially, the enumerator is positioned before the first element in the collection. At this position, calling <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Current" /> throws an exception. Therefore, you must call <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection before reading the value of <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Current" />.</para><para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.MoveNext" /> returns <c>false</c>. If the last call to <see cref="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.MoveNext" /> returned <c>false</c>, calling <see cref="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Current" /> throws an exception.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Current" draft="yes">
            <summary>Gets the current key-value pair in the dictionary.</summary>
            <value>The current key-value pair in the dictionary.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Entry" draft="yes">
            <summary>Gets both the key and the value of the current dictionary entry.</summary>
            <value>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Key" draft="yes">
            <summary>Gets the key of the current dictionary entry.</summary>
            <value>The key of the current element of the enumeration.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.MoveNext" draft="yes">
            <summary>Advances the enumerator to the next key-value pair of the dictionary.</summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next key-value pair; <c>false</c> if the enumerator has passed the end of the dictionary.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.#ctor(Aurigma.GraphicsMill.Codecs.MetadataDictionary)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataEnumerator" /> class for the specified <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" />.</summary>
            <param name="metaData">A <see cref="T:Aurigma.GraphicsMill.Codecs.MetadataDictionary" /> for which the enumerator should be created.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Reset" draft="yes">
            <summary>Sets the enumerator to its initial position, which is before the first key-value pair of the dictionary.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.MetadataEnumerator.Value" draft="yes">
            <summary>Gets the value of the current dictionary entry.</summary>
            <value>The value of the current element of the enumeration.</value>
        </member>
		
<!-- Codecs.MultiFrameException -->
        <member name="T:Aurigma.GraphicsMill.Codecs.MultiFrameException" draft="yes">
            <summary>Represents the error that occurs when you try to add more frames than current format allows.</summary>
            <remarks>For example, this exception will be thrown when you try to add two image frames into JPEG.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MultiFrameException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MultiFrameException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MultiFrameException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MultiFrameException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MultiFrameException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MultiFrameException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.MultiFrameException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.MultiFrameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- Codecs.OutputIntent -->
        <member name="T:Aurigma.GraphicsMill.Codecs.OutputIntent" draft="yes">
            <summary>Represents the final destination device that you use to reproduce the color in the PDF.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.OutputIntent.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.OutputIntent" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.OutputIntent.Info">
            <summary>Descriptive information about the intended printing condition.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.OutputIntent.OutputCondition">
            <summary>The printing condition.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.OutputIntent.OutputConditionId">
            <summary>The name of the output condition.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.OutputIntent.Profile">
            <summary>The ICC color profile.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.OutputIntent.Registry">
            <summary>The registry name.</summary>
        </member>

<!-- Codecs.PdfFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.PdfFrame" draft="yes">
            <summary>Represents one page of a PDF file.</summary>
            <seealso href="working-with-pdf.htm#UsingPdfReader" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfFrame.ArtBox" draft="yes">
            <summary>Gets the size of the meaningful content, including potential white space.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the art box.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfFrame.BleedBox" draft="yes">
            <summary>Gets the region to which the content of the page should be clipped when output in a printing environment.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the bleed box.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfFrame.CropBox" draft="yes">
            <summary>Gets the region to which the content of the page should be cropped when printed or displayed.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the crop box.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfFrame.GetContent" draft="yes">
            <summary>Returns a graphics container from this <see cref="T:Aurigma.GraphicsMill.Codecs.PdfFrame" />.</summary>
            <returns>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> stored in this frame.</returns>
            <seealso href="graphics-container.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfFrame.MediaBox" draft="yes">
            <summary>Gets the boundaries of the physical page on which the content is to be printed.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the media box.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfFrame.TrimBox" draft="yes">
            <summary>Gets the intended dimensions of the finished page after trimming.</summary>
            <value><see cref="T:System.Drawing.Rectangle" /> specifying the trim box.</value>
        </member>

<!-- Codecs.PdfReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.PdfReader" draft="yes">
            <summary>Contains methods and properties used to read PDF files.</summary>
            <seealso href="working-with-pdf.htm#UsingPdfReader" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfReader" /> class from the specified file.</summary>
            <param name="fileName">The file name and path.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfReader" /> class from the specified data stream.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfReader.#ctor(System.IO.Stream,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfReader" /> class using the specified <see cref="T:System.IO.Stream" /> and resolution.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader on.</param>
            <param name="dpiX">The horizontal resolution of the PDF file in DPI.</param>
            <param name="dpiY">The vertical resolution of the PDF file in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfReader.#ctor(System.String,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfReader" /> class using the specified file name and resolution.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <param name="dpiX">The horizontal resolution of the PDF file in DPI.</param>
            <param name="dpiY">The vertical resolution of the PDF file in DPI.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfReader.Frames" draft="yes">
            <summary>Gets PDF pages from <see cref="T:Aurigma.GraphicsMill.Codecs.PdfReader" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfFrame" /> elements.</value>
        </member>
      
<!-- Codecs.PdfSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.PdfSettings" draft="yes">
            <summary>Contains all the possible PDF writing settings.</summary>
            <remarks><para>PDF (Portable Document Format) was developed by Adobe Systems, Inc. for secure and reliable distribution of electronic documents independent of software, hardware, and operating system. In general, a PDF file includes a complete description of a fixed-layout flat document such as the text, fonts, graphics, and other information needed to display it.</para><para>Graphics Mill allows writing PDF files only. You can specify compression type for it using <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Compression" /> property. If you are using <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /> compression, you can also specify a JPEG quality via the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Quality" /> property.</para></remarks>
            <seealso href="supported-file-formats.htm#pdfFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Compression" draft="yes">
            <summary>Gets or sets PDF compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />.</value>
            <remarks><para>PDF format supports the following compression types:</para><list type="table"><listheader><term>Compression Type</term><description>Limitations</description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term><description>No limitations. Supported with all pixel formats allowed for PDF files.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" /></term><description>No limitations. Supported with all pixel formats allowed for PDF files.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /></term><description>Can be used only with those pixel formats which are supported by JPEG (non-extended and non-indexed grayscale, RGB, and CMYK images). To adjust JPEG quality, use <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Quality" /> property.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfSettings.IsPrintingEnabled" draft="yes">
            <summary>Gets or sets a value indicating whether the image should be printed when the user opens it.</summary>
            <value><c>true</c> if the image should be printed when the user opens it; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfSettings" /> class using the specified compression type.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Compression" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfSettings" /> class using the specified compression type and quality.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Compression" /> property.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. Makes sense if only the <i>compression</i> is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType,System.Int32,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfSettings" /> class using the specified settings.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Compression" /> property.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. Makes sense if only the <i>compression</i> is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Quality" /> property.</param>
            <param name="isPrintingEnabled"><c>true</c> if the image should be printed when the user opens it; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PdfSettings.IsPrintingEnabled" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfSettings.Quality" draft="yes">
            <summary>Gets or sets a JPEG quality if compression type is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>. The lesser value means the lower quality and the smaller file.</value>
        </member>
		
<!-- Codecs.PdfWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.PdfWriter" draft="yes">
            <summary>Contains methods and properties used to write PDF file.</summary>
            <remarks><para>PDF (Portable Document Format) was developed by Adobe Systems, Inc. for secure and reliable distribution of electronic documents independent of software, hardware, and operating system. In general, a PDF file includes a complete description of a fixed-layout flat document such as the text, fonts, graphics, and other information needed to display it.</para><para>You can create multiple pages in the PDF file.</para></remarks>
            <seealso href="supported-file-formats.htm#pdfFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32)" draft="yes">
            <summary>Adds a new page with the given width and height to the PDF file.</summary>
            <overloads><summary>Adds a new page to the PDF file.</summary></overloads>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, and page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.Color,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, background color, and page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.ColorProfile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, color profile, and page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, background color, color profile, and page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.ColorProfile)" draft="yes">
            <summary>Adds a new page with the given width, height, and color profile to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, background color, and color profile to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, and  page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.Color,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, background color, and  page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.ColorProfile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, color profile, and  page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="profile">The color profile of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, background color, color profile, and  page boundaries to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
            <param name="cropBox">A rectangle defining the region surrounding the content which is to be clipped when the PDF page is displayed or printed. Crop Box specifies the visible part of the content.</param>
            <param name="trimBox">A rectangle defining the dimensions of the fulfilled page. In contrast with the crop box, the trim box is important because it defines the actual page size used for positioning pages on a press sheet.</param>
            <param name="bleedBox">A rectangle defining the region to which the contents of the page should be clipped when output in a production environment. By default, the bleed box equals the crop box.</param>
            <example><code language="CS" source="Samples/Code/LoadSave.cs#PdfAddFullPage"></code></example>
			<seealso href="working-with-pdf.htm#PageBoundaries" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Adds a new page with the given width, height, and background color to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="color">The background color of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Adds a new page with the given width, height, and resolution to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, and background color to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="color">The background color of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,System.Single,System.Single,Aurigma.GraphicsMill.ColorProfile)" draft="yes">
            <summary>Adds a new page with the given width, height, resolution, and color profile to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="dpiX">The horizontal resolution of the page to add in DPI.</param>
            <param name="dpiY">The vertical resolution of the page to add in DPI.</param>
            <param name="profile">The color profile of the page to add.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.AddPage(System.Int32,System.Int32,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile)" draft="yes">
            <summary>Adds a new page with the given width, height, background color, and color profile to the PDF file.</summary>
            <param name="width">The width of the page to add.</param>
            <param name="height">The height of the page to add.</param>
            <param name="color">The background color of the page to add.</param>
            <param name="profile">The color profile of the page to add.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Author" draft="yes">
            <summary>Gets or sets an author name of the PDF document.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Compression" draft="yes">
            <summary>Gets or sets PDF compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />. For PDF containing images <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /> can be significantly more effective.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Creator" draft="yes">
            <summary>Gets or sets a creator name of the PDF document.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.GetGraphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.IsPrintingEnabled" draft="yes">
            <summary>Gets or sets a value indicating whether the image should be printed when the user opens it.</summary>
            <value><c>true</c> if the image should be printed when the user opens it; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Keywords" draft="yes">
            <summary>Gets or sets keywords for the PDF document.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.LastPage" draft="yes">
            <summary>Gets a reference to the last page in output PDF file.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Subject" draft="yes">
            <summary>Gets or sets a subject of the PDF document.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Title" draft="yes">
            <summary>Gets or sets a title of the PDF document.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" /> class using the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.#ctor(System.String,Aurigma.GraphicsMill.Codecs.OutputIntent)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" /> class using the specified file name and <see cref="T:Aurigma.GraphicsMill.Codecs.OutputIntent" />.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <param name="outputIntent">The output intent.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.#ctor(System.IO.Stream,Aurigma.GraphicsMill.Codecs.OutputIntent)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PdfWriter" /> class using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:Aurigma.GraphicsMill.Codecs.OutputIntent" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="outputIntent">The output intent.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PdfWriter.Quality" draft="yes">
            <summary>Gets or sets a JPEG quality if compression type is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>. The lesser value means the lower quality and the smaller file.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PdfWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
		
<!-- Codecs.PngFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.PngFrame" draft="yes">
            <summary>Represents a frame of a PNG image.</summary>
            <seealso href="supported-file-formats.htm#pngFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PngFrame.IsInterlaced" draft="yes">
            <summary>Gets a value indicating whether the frame is interlaced.</summary>
            <value><c>true</c> the frame is interlaced; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.PngReader" draft="yes">
            <summary>Contains methods and properties used to read PNG images.</summary>
            <remarks><para>PNG (Portable Network Graphics) was created to replace the obsolete GIF format due to a legal problem caused by the LZW algorithm used in GIF. In comparison with GIF, the PNG format has three main advantages:</para><list type="bullet"><item><description>alpha channel (variable transparency),</description></item><item><description>gamma correction (cross-platform control of image brightness),</description></item><item><description>two-dimensional interlacing (method of progressive displaying).</description></item></list><para>PNG supports palette-based images with palettes of 24-bit RGB or 32-bit RGBA colors, grayscale images (with or without alpha channel), and full-color non-palette-based images with or without alpha channel.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#pngReadWrite"></code></example>
            <seealso href="supported-file-formats.htm#pngFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PngReader.Frames" draft="yes">
            <summary>Gets a collection of <see cref="T:Aurigma.GraphicsMill.Codecs.PngFrame" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> containing frames loaded from the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngReader" /> class using the specified file name.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngReader.#ctor(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngReader.#ctor(System.IO.Stream,System.Boolean)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.PngSettings" draft="yes">
            <summary>Contains all the possible PNG writing settings.</summary>
            <remarks><para>The only PNG-related option which is available is whether to make it interlaced.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#pngSettings"></code></example>
            <seealso href="supported-file-formats.htm#pngFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PngSettings.IsInterlaced" draft="yes">
            <summary>Gets or sets a value indicating whether the image is interlaced.</summary>
            <value><c>true</c> the image is interlaced; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngSettings.#ctor(System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngSettings" /> class specifying whether image is interlaced.</summary>
            <param name="isInterlaced"><c>true</c> the image is interlaced; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PngSettings.IsInterlaced" /> property.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.PngWriter" draft="yes">
            <summary>Contains methods and properties used to write PNG images.</summary>
            <remarks><para>PNG (Portable Network Graphics) was created to replace the obsolete GIF format due to a legal problem caused by the LZW algorithm used in GIF. In comparison with GIF, the PNG format has three main advantages:</para><list type="bullet"><item><description>alpha channel (variable transparency),</description></item><item><description>gamma correction (cross-platform control of image brightness),</description></item><item><description>two-dimensional interlacing (method of progressive displaying).</description></item></list><para>PNG supports palette-based images with palettes of 24-bit RGB or 32-bit RGBA colors, grayscale images (with or without alpha channel), and full-color non-palette-based images with or without alpha channel.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#pngReadWrite"></code></example>
            <seealso href="supported-file-formats.htm#pngFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.PngWriter.IsInterlaced" draft="yes">
            <summary>Gets or sets a value indicating whether the image is interlaced.</summary>
            <value><c>true</c> the image is interlaced; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" /> class using the specified file media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.#ctor(System.String,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" /> class for the given file name specifying whether the image should be interlaced.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <param name="isInterlaced"><c>true</c> the image is interlaced; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PngWriter.IsInterlaced" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.#ctor(System.IO.Stream,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.PngWriter" /> class for the given <see cref="T:System.IO.Stream" /> specifying whether the image should be interlaced.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="isInterlaced"><c>true</c> the image is interlaced; otherwise, <c>false</c>. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.PngWriter.IsInterlaced" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.PngWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
		
<!-- Codecs.Psd namespace -->
        <member name="N:Aurigma.GraphicsMill.Codecs.Psd" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Codecs.Psd" /> namespace contains classes intended to work with PSD files.</summary>
        </member>

<!-- Codecs.Psd.BlendMode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.BlendMode" draft="yes">		
            <summary>Contains blending modes.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Color" draft="yes">		
            <summary>Color blending mode. Keeps the color of the active layer, and blends the hue and saturation (the color) of the active layer with the luminance of the lower layers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.ColorBurn" draft="yes">		
            <summary>Color Burn blending mode. Darker than Multiply, with more highly saturated mid-tones and reduced highlights.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.ColorDodge" draft="yes">		
            <summary>Color Dodge blending mode. Brighter than the Screen blend mode. Results in an intense, contrasty color-typically results in saturated mid-tones and blown highlights.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Darken" draft="yes">		
            <summary>Darken blending mode. If the pixels of the selected layer are darker than the ones on the layers below, they are kept in the image. If the pixels in the layer are lighter, they are replaced with the tones on the layers below.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.DarkerColor" draft="yes">		
            <summary>Darker Color blending mode. Similar to the Darken blend mode, but darkens on the composite channel, instead of separate RGB color channels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Difference" draft="yes">		
            <summary>Difference blending mode. Subtracts a pixel on the active layer, from an equivalent pixel in the composite view of the underlying layer, and results in only absolute numbers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Dissolve" draft="yes">		
            <summary>Dissolve blending mode. The Dissolve blend mode on acts on transparent and partially transparent pixels - it treats transparency as a pixel pattern and applies a diffusion dither pattern.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Divide" draft="yes">		
            <summary>Divide blending mode. Divides a pixel on the active layer, from an equivalent pixel in the underlying layers on a channel by channel basis.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Exclusion" draft="yes">		
            <summary>Exclusion blending mode. Subtracts a pixel on the active layer, from an equivalent pixel in the composite view of the underlying layers, and results in only absolute numbers (the subtraction never produces a negative number).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.HardLight" draft="yes">		
            <summary>Hard Light blending mode. Uses a combination of the Linear Dodge blend mode on the lighter pixels, and the Linear Burn blend mode on the darker pixels. It uses a half-strength application of these modes, and logic similar to the Overlay blend mode, but favors the active layer, as opposed to the underlying layers. </summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.HardMix" draft="yes">		
            <summary>Hard Mix blending mode. Uses the Linear Light blend mode set to a threshold, so for each RGB color channel, pixels in each channel are converted to either all black or all white. Once the math is applied to each separate channel, and the composite channel is created, the resulting composite can contain up to 8 colors: Red, Green, Blue, Cyan, Magenta, Yellow, Black and White.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Hue" draft="yes">		
            <summary>Hue blending mode. Keeps the Hue of the active layer, and blends the luminance and saturation of the underlying layers (you basically get the image from the lower layer with the colors of the top layer).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Lighten" draft="yes">		
            <summary>Lighten blending mode. If the pixels of the selected layer are lighter than the ones on the layers below, they are kept in the image (the opposite of the Darken blend mode). If the pixels in the layer are darker, they are replaced with the pixels on the layers below (they show through to the selected layer).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.LighterColor" draft="yes">		
            <summary>Lighter Color blending mode.Similar to the Lighten blend mode, but lightens on the composite channel, instead of separate color channels. Compares each pixel and gives you the lighter of the two (and usually results in harsher transitions).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.LinearBurn" draft="yes">		
            <summary>Linear Burn blending mode. Darker than Multiply, but less saturated than Color Burn.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.LinearDodge" draft="yes">		
            <summary>Linear Dodge blending mode. Brighter than the Color Dodge blend mode, but less saturated and intense. This mode "Adds" the luminance levels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.LinearLight" draft="yes">		
            <summary>Linear Light blending mode. Uses a combination of the Linear Dodge blend mode on the lighter pixels, and the Linear Burn blend mode on the darker pixels (a half-strength application of both modes).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Luminosity" draft="yes">		
            <summary>Luminosity blending mode. Keeps the luminance of the active layer, and blends it with hue and saturation (the color) of the composite view of the layers below. This results in the colors of the underlying layers being blended with the active layer, and replacing them.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Multiply" draft="yes">		
            <summary>Multiply blending mode. Works by multiplying the luminance levels of the current layer's pixels with the pixels in the layers below.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Normal" draft="yes">		
            <summary>Normal blending mode. The normal mode where no math is applied.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Overlay" draft="yes">		
            <summary>Overlay blending mode. Uses a combination of the Screen blend mode on the lighter pixels, and the Multiply blend mode on the darker pixels. It uses a half-strength application of these modes, and the mid-tones (50% gray) becomes transparent.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Pass" draft="yes">		
            <summary>Pass Through blending mode. It is the default blend mode for a layer group.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.PinLight" draft="yes">		
            <summary>PinLight blending mode. Uses a combination of the Lighten blend mode on the lighter pixels, and the Darken blend mode on the darker pixels (a half-strength application of both modes). If the dark pixels on the active layer are darker than the dark pixels on the underlying layers, they will be visible, if they are not, they drop away. If the pixels on the active layer are lighter than the pixels on the underlying layers, they will also be visible, if they are not, they drop away.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Saturation" draft="yes">		
            <summary>Saturation blending mode. Keeps the saturation of the active layer, and blends the luminosity and hue from the underlying layers - where colors from the active layer are saturated, they will appear using the luminosity and hue from the underlying layers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Screen" draft="yes">		
            <summary>Screen blending mode. Similar to the Lighten blend mode, but brighter and removes more of the dark pixels, and results in smoother transitions. Works somewhat like the Multiply blend mode, in that it multiplies the light pixels (instead of the dark pixels like the Multiply blend mode does).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.SoftLight" draft="yes">		
            <summary>SoftLight blending mode. Uses a combination of the Screen blend mode on the lighter pixels, and the Multiply blend mode on the darker pixels (a half-strength application of both modes).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.Subtract" draft="yes">		
            <summary>Subtract blending mode. Subtracts a pixel on the active layer, from an equivalent pixel in the composite view of the underlying layers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.BlendMode.VividLight" draft="yes">		
            <summary>Vivid Light blending mode. Uses a combination of the Color Dodge Mode on the lighter pixels, and the Color Burn blend mode on the darker pixels (a half-strength application of both modes). </summary>
        </member>
		
<!-- Codecs.Psd.Effect -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.Effect" draft="yes">		
            <summary>Represents the base class for PSD text effects.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.Effect.BlendMode" draft="yes">		
            <summary>Gets the blending mode.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.Effect.Opacity" draft="yes">		
            <summary>Gets the opacity.</summary>
        </member>

        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.DropShadowEffect" draft="yes">		
            <summary>Represents the drop shadow effect.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.DropShadowEffect.Spread" draft="yes">		
            <summary>Gets the spread value.</summary>
        </member>
      
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.InnerShadowEffect" draft="yes">		
            <summary>Represents the inner shadow effect.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.InnerShadowEffect.Choke" draft="yes">		
            <summary>Gets the choke value.</summary>
        </member>
      
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect" draft="yes">		
            <summary>Represents the base class for the shadow text effect obtained from a PSD file.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect.Angle" draft="yes">		
            <summary>Gets the angle of the shadow.</summary>
            <value>The integer value of the angle.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect.Color" draft="yes">		
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.Color" /> of the shadow.</summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect.Distance" draft="yes">		
            <summary>Gets the distance of the shadow.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect.Noise" draft="yes">		
            <summary>Gets the noise of the shadow.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ShadowEffect.Size" draft="yes">		
            <summary>Gets the size of the shadow.</summary>
        </member>

        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.StrokeEffect" draft="yes">		
            <summary>Represents the base class for the stroke text effect obtained from a PSD file.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.StrokeEffect.Color" draft="yes">		
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.Color" /> of the stroke.</summary>
            <value>The color of the stroke.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.StrokeEffect.Overprint" draft="yes">		
            <summary>Gets the overprint of the stroke.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.StrokeEffect.Position" draft="yes">		
            <summary>Gets the position of the stroke.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.StrokeEffect.Size" draft="yes">		
            <summary>Gets the size of the stroke.</summary>
        </member>
      
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.StrokePosition" draft="yes">		
            <summary>Contains stroke positions.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.StrokePosition.Center" draft="yes">		
            <summary>Strokes center.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.StrokePosition.Inside" draft="yes">		
            <summary>Strokes inside.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.StrokePosition.Outside" draft="yes">		
            <summary>Strokes outside.</summary>
        </member>

        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection" draft="yes">		
            <summary>Represents a collection of spot channels obtained from a PSD file.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection.Item(System.Int32)" draft="yes">
            <summary>Gets or sets a palette entry at the specified index.</summary>
            <param name="itemIndex">The zero-based index of the entry to get or set. It should vary in range [0, <see cref="P:Aurigma.GraphicsMill.ColorPalette.Count">entries count</see> - 1].</param>
            <value>The <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel" /> at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection.GetEnumerator" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection.Count" draft="yes">
            <summary>Returns a number of spot channels in the PSD file.</summary>
            <value>The number of <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel" /> in the PSD file.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection.#ctor(Aurigma.GraphicsMill.Codecs.Psd.PsdReader)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection.System#Collections#IEnumerable#GetEnumerator" draft="yes">
            <exclude />
        </member>

<!-- Codecs.Psd.DigitType -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.DigitType" draft="yes">
            <summary>Contains digit representation options.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.DigitType.Arabic" draft="yes">
            <summary>Arabic digits.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.DigitType.Farsi" draft="yes">
            <summary>Farsi digits.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.DigitType.Hindi" draft="yes">
            <summary>Hindi digits.</summary>
        </member>
      
<!-- Codecs.Psd.FontCaps -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.FontCaps" draft="yes">		
            <summary>Contains capitalization options.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FontCaps.AllCap" draft="yes">		
            <summary>Use capital characters for all letters.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FontCaps.SmallCap" draft="yes">		
            <summary>Use small caps for lowercase letters.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FontCaps.SmallNotCap" draft="yes">		
            <summary>Use non-capital characters for lowercase letters.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FontCaps.Unknown" draft="yes">		
            <summary>Unknown capitalization.</summary>
        </member>

<!-- Codecs.Psd.FrameType -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.FrameType" draft="yes">
            <summary>Contains possible types of PSD layers (i.e. frames of <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdReader" />).</summary>
            <remarks><para>Text layers can be interpreted as raster ones which include additional meta-information about the text stored in this frame (like the text string, font and paragraph settings, etc). You can get the bitmap from such frames which will contain rasterized text string.</para><para>When you iterate through frames of the PSD file, be sure to skip unknown and group layers. It is necessary to avoid problems with extracting bitmaps which are not available in such layers.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Unknown">
            <summary>Unsupported type of layer (like adjustment layers, etc).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Raster" draft="yes">
            <summary>Raster layer (presented by the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" /> class instance).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Text" draft="yes">
            <summary>Text layer (presented by the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame" /> class instance).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Group" draft="yes">
            <summary>Group layer (presented by the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame" /> class instance).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Shape" draft="yes">
            <summary>Shape layer (presented by the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdShapeFrame" /> class instance).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.SmartObject">
            <summary>Smart object (presented by the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame" /> class instance).</summary>
        </member>
		
<!-- Codecs.Psd.GroupedFrameCollection -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" draft="yes">
            <summary>Represents a collection of grouped PSD layers.</summary>
            <remarks>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.GroupedFrames">PsdReader.GroupedFrames</see> property.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.~GroupedFrameCollection">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.Count" draft="yes">
            <summary>Gets the number of layers contained in the collection.</summary>
            <value>The number of layers contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" /> instance.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.GetEnumerator" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection.Item(System.Int32)" draft="yes">
            <summary>Gets the layer at the specified index.</summary>
            <param name="index">The zero-based index of the layer to get.</param>
            <value>The <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" /> at the specified index.</value>
        </member>

<!-- Codecs.Psd.ParagraphDirection -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.ParagraphDirection" draft="yes">
            <summary>Contains the text direction options for paragraphs.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.ParagraphDirection.LTR" draft="yes">
            <summary>The left-to-right direction.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.ParagraphDirection.RTL" draft="yes">
            <summary>The right-to-left direction.</summary>
        </member>

<!-- Codecs.Psd.ParagraphSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings" draft="yes">
            <summary>Contains main paragraph settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.DesiredWordSpacing" draft="yes">
            <summary>Gets or sets the word spacing of this layer paragraph settings.</summary>
            <value>The word spacing of this layer paragraph settings.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.Direction" draft="yes">
            <summary>Gets or sets the text direction.</summary>
            <value>The direction of text in a paragraph.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.FirstLineIndent" draft="yes">
            <summary>Gets or sets the first line indent of this layer paragraph settings.</summary>
            <value>The first line indent of this layer paragraph settings.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.Justification" draft="yes">
            <summary>Gets or sets the justification of this layer paragraph settings.</summary>
            <value>The first line indent of this layer paragraph settings.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.LeftIndent" draft="yes">
            <summary>Gets or sets the left indent of this layer paragraph settings.</summary>
            <value>The left indent of this layer paragraph settings.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.RightIndent" draft="yes">
            <summary>Gets or sets the right indent of this layer paragraph settings.</summary>
            <value>The right indent of this layer paragraph settings.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.SpaceAfterParagraph" draft="yes">
            <summary>Gets or sets the space after each paragraph in the layer.</summary>
            <value>The space after each paragraph in the layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings.SpaceBeforeParagraph" draft="yes">
            <summary>Gets or sets the space before each paragraph in the layer.</summary>
            <value>The space before each paragraph in the layer.</value>
            <remarks><note>This value is not applied for the very first paragraph (i.e. no empty space should be inserted above the entire layer).</note></remarks>
        </member>
		
<!-- Codecs.Psd.PlainFrameCollection -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" draft="yes">
            <summary>Represents a collection of raster and text PSD layers.</summary>
            <remarks>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.Frames">PsdReader.Frames</see> property.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection.Count" draft="yes">
            <summary>Gets the number of layers contained in the collection.</summary>
            <value>The number of layers contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" /> instance.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection.GetEnumerator" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection.Item(System.Int32)" draft="yes">
            <summary>Gets the layer at the specified index.</summary>
            <param name="index">The zero-based index of the layer to get.</param>
            <value>The <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" /> at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection.#ctor(Aurigma.GraphicsMill.Codecs.Psd.PsdReader)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude />
        </member>
		
<!-- Codecs.Psd.PsdFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" draft="yes">
            <summary>Represents a PSD layer.</summary>
            <example><para>The following code opens a PSD file, iterates through its layers, and saves bitmaps from the raster layers to separate PNG files:</para><code language="CS" source="Samples/Code/PSD.cs#raster"></code></example>
            <seealso href="loading-raster-layers.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.#ctor" draft="yes">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.BlendMode" draft="yes">
            <summary>Gets a blending mode of this layer.</summary>
            <value>The blending mode of this layer.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.GetBitmap" draft="yes">
            <summary>Returns a bitmap representing this layer.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> representing this layer.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Effects" draft="yes">
            <summary>Gets or sets the text effects for PSD layers.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrameEffects" /> defining the text effects.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.IsLocked" draft="yes">
            <summary>Gets a value indicating whether a frame is locked.</summary>
            <value><c>true</c> if the frame is locked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.IsVisible" draft="yes">
            <summary>Gets a value indicating whether a frame is visible.</summary>
            <value><c>true</c> if the frame is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Name" draft="yes">
            <summary>Gets a name of this layer.</summary>
            <value>The name of this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Opacity" draft="yes">
            <summary>Gets an opacity of this layer.</summary>
            <value>The opacity of the layer in range <c>[0, 1]</c>. If <c>0</c>, layer is completely transparent, if <c>1</c>, layer is completely opaque.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Parent" draft="yes">
            <summary>Gets a parent layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" /> representing a parent layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Type" draft="yes">
            <summary>Gets a type of this layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.FrameType" /> of this layer (raster, text or group).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.VectorMask" draft="yes">
            <summary>Gets a vector mask of this layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Path" /> that contains vector mask of this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.X" draft="yes">
            <summary>Gets the x-coordinate of the upper-left corner of this layer.</summary>
            <value>The x-coordinate of the upper-left corner of this frame (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Y" draft="yes">
            <summary>Gets the y-coordinate of the upper-left corner of this layer.</summary>
            <value>The y-coordinate of the upper-left corner of this frame (in pixels).</value>
        </member>
		
<!-- Codecs.Psd.PsdFrameEffects -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrameEffects" draft="yes">
            <summary>Contains properties of the text effects for a PSD layer.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrameEffects.DropShadow" draft="yes">
            <summary>Gets properties of the drop shadow effect.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrameEffects.InnerShadow" draft="yes">
            <summary>Gets properties of the inner shadow effect.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrameEffects.Stroke" draft="yes">
            <summary>Gets properties of the stroke effect.</summary>
        </member>

<!-- Codecs.Psd.PsdGroupFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame" draft="yes">
            <summary>Represents a grouped PSD layer.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.Frames" draft="yes">
            <summary>Gets a collection of layers in this group.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.GroupedFrameCollection" /> containing layers from this group.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.GetBitmap" draft="yes">
            <summary>Returns a bitmap representing this group of layers.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> representing this group of layers.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.Height" draft="yes">
            <summary>Gets the height of this layer.</summary>
            <value>The height of this frame (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.Width" draft="yes">
            <summary>Gets the width of this layer.</summary>
            <value>The width of this frame (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.X" draft="yes">
            <summary>Gets the x-coordinate of the upper-left corner of this layer.</summary>
            <value>The x-coordinate of the upper-left corner of this frame (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdGroupFrame.Y" draft="yes">
            <summary>Gets the y-coordinate of the upper-left corner of this layer.</summary>
            <value>The y-coordinate of the upper-left corner of this frame (in pixels).</value>
        </member>
		
<!-- Codecs.Psd.PsdSmartFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame" draft="yes">
            <summary>Represents a smart object.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.BoundingRect" draft="yes">
            <summary>Gets the rectangle that bounds the smart object.</summary>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.GetData" draft="yes">
            <summary>Returns a data stream representing the smart object.</summary>
            <returns>A data stream representing the smart object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.OriginalDpiX" draft="yes">
            <summary>Gets the original horizontal DPI of the smart object.</summary>
            <returns>The original horizontal DPI value.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.OriginalDpiY" draft="yes">
            <summary>Gets the original vertical DPI of the smart object.</summary>
            <returns>The original vertical DPI value.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.OriginalSize" draft="yes">
            <summary>Gets the original size of the smart object.</summary>
            <returns>The original size.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.WarpControlPoints" draft="yes">
            <summary>Gets the sixteen control points that defines the Bezier surface for the warp transformation of this smart object.</summary>
            <value>An array of sixteen control points that defines the Bezier surface for this transformation.</value>
			<remarks><para>The <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> accepts this array as its own control points.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSmartFrame.ProjectiveTransform" draft="yes">
            <summary>Gets the matrix that defines the projective transformation of this smart object.</summary>
            <value>A matrix that defines the projective transformation of this smart object.</value>
        </member>
		
<!-- Codecs.Psd.PsdSpotChannel -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel" draft="yes">
            <summary>Represents a spot channel.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel.GetBitmap" draft="yes">
            <summary>Returns the spot channel's bitmap.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> representing the spot channel.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel.Color">
            <summary>Gets the color of this spot channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> of the spot channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel.Name" draft="yes">
            <summary>Gets a name of this spot channel.</summary>
            <value>The name of the spot channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdSpotChannel.Solidity" draft="yes">
            <summary>Gets a solidity value of the spot channel.</summary>
            <value>A float value in the range from 0 to 1.0.</value>
        </member>

<!-- Codecs.Psd.PsdReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdReader" draft="yes">
            <summary>Contains methods and properties used to read PSD images.</summary>
            <remarks><para>PSD (Photoshop Document) is a native bitmap file format of the Adobe® Photoshop® program using lossless data compression. This format is a de facto standard for designers all over the world. The PSD image format is rather complex and stores a lot of layers and additional data (image layers, text layers, applied effects, etc.).</para></remarks>
            <example><para>The following code opens a PSD file, iterates through its layers, and saves bitmaps from the raster layers to separate PNG files:</para><code language="CS" source="Samples/Code/PSD.cs#raster"></code></example>
            <seealso href="supported-file-formats.htm#psdFormat" />
			<seealso href="working-with-psd-files.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.Frames" draft="yes">
            <summary>Gets a collection of plain (raster and text) layers.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" /> containing raster and text layers from this PSD image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.GroupedFrames" draft="yes">
            <summary>Gets a collection of plain grouped layers.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PlainFrameCollection" /> containing grouped layers from this PSD image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.Height" draft="yes">
            <summary>Gets an entire image height.</summary>
            <value>The entire image height (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.MergedImageFrame" draft="yes">
            <summary>Gets a merged copy from this PSD image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Frame" /> containing a merged copy of all visible layers.</value>
            <remarks>If a source PSD file doesn't contain a merged copy this property returns null.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.SpotChannels" draft="yes">
            <summary>Gets a collection of spot channels from the PSD file.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.SpotChannelCollection" /> containing spot channels.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.MergeLayers" draft="yes">
            <summary>Creates a merged copy of all visible layers.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing a merged copy of all visible layers.</returns>
            <remarks>This method is useful when a source PSD image does not contain a merged copy of its layers (i.e. the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.MergedImageFrame" /> returns null).</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.MergeLayers(Aurigma.GraphicsMill.PipelineElement)" draft="yes">
            <summary>Creates a merged copy of all visible layers and pass it into a given pipeline.</summary>
            <param name="receiver">A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to pass a merged copy to.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdReader" /> class using the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdReader.Width" draft="yes">
            <summary>Gets an entire image width.</summary>
            <value>The entire image width (in pixels).</value>
        </member>

<!-- Codecs.Psd.PsdShapeFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdShapeFrame" draft="yes">
            <summary>Represents a PSD shape layer.</summary>
            <remarks><para>The shape layer contains vector shapes.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdShapeFrame.Brush" draft="yes">
            <summary>Gets the fill of shapes in the layer.</summary>
            <value>The fill of shapes in the layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdShapeFrame.Pen" draft="yes">
            <summary>Gets the outline of shapes in the layer.</summary>
            <value>The outline of shapes in the layer.</value>
        </member>
		
<!-- Codecs.Psd.PsdTextFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame" draft="yes">
            <summary>Represents a PSD text layer.</summary>
            <remarks><para>The text layer is a particular case of a raster layer. It always contains the bitmap with a rasterized text string, as well as:</para><list type="bullet"><item><description>The text string itself (the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Text" /> property). </description></item><item><description>The font settings (the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Font" /> property). </description></item><item><description>Paragraph settings (such properties as <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.LeftIndent" />, <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.RightIndent" />, <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Justification" />, and others). </description></item><item><description>The text color (the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Color" /> property). </description></item><item><description>The text box (the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.TextBox" /> property).</description></item></list><para>Typically you get an instance of this class in the following way: </para><list type="number"><item><description>Iterate through the layers (you will get them as <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame" />).</description></item><item><description>Check the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdFrame.Type" /> property value. </description></item><item><description>If it is <see cref="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Text" />, cast the frame class to <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame" />.</description></item></list></remarks>
            <example><para>The following code reads a PSD file, iterates through its layers, and writes some information about text layer to the console:</para><code language="CS" source="Samples/Code/PSD.cs#text"></code></example>
            <seealso href="loading-text-layers.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.#ctor" draft="yes">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Caps" draft="yes">
            <summary>Gets the caps settings of this layer.</summary>
            <value>The caps settings of this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.DigitType" draft="yes">
            <summary>Gets digit type.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Codecs.Psd.DigitType" /> of digits.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.DpiX" draft="yes">
            <summary>Gets the horizontal resolution, in pixels per inch, of an image.</summary>
            <value>The horizontal resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.DpiY" draft="yes">
            <summary>Gets the vertical resolution, in pixels per inch, of an image.</summary>
            <value>The vertical resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Color" draft="yes">
            <summary>Gets a color of the text in this layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> of the text in this layer.</value>
            <remarks><para>Actual type of the color depends on the color space of the PSD file. For RGB image it will be <see cref="T:Aurigma.GraphicsMill.RgbColor" />, and for CMYK it will be <see cref="T:Aurigma.GraphicsMill.CmykColor" />.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Font" draft="yes">
            <summary>Gets the font settings of the text string stored in this layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> containing the font settings of the text string stored in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FauxBold" draft="yes">
            <summary>Gets bold style emulation of the text string stored in this layer.</summary>
            <value>Bold style emulation of the text string stored in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FauxItalic" draft="yes">
            <summary>Gets italic style emulation of the text string stored in this layer.</summary>
            <value>Italic style emulation of the text string stored in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FontName" draft="yes">
            <summary>Gets the font name for the text string stored in this layer.</summary>
            <value>A font name for the text string stored in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FontSize" draft="yes">
            <summary>Gets the font size for the text string stored in this layer.</summary>
            <value>A font size for the text string stored in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FormattedText" draft="yes">
            <summary>Gets the collection of text spans. Each span has its own format (font, style, color, etc.).</summary>
            <value>A collection of text spans. Each span has its own format (font, style, color, etc.).</value>
			<remarks>Formatted text is represented as a number of spans, where each span has its own format (font, style, color, etc.). All spans can have different formats, but text throughout a span is uniformly formatted.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.HorizontalScale" draft="yes">
            <summary>Gets horizontal scaling value of the text string stored in this layer.</summary>
            <value>Horizontal scaling value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.IsVertical" draft="yes">
            <summary>Gets whether the text is vertical.</summary>
            <value><c>true</c> if the text is vertical; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Justification" draft="yes">
            <summary>Gets the justification type of the text string inside the paragraph.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.TextJustification" /> specifying how the text is justified in the layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Leading" draft="yes">
            <summary>Gets the text leading.</summary>
            <value>A text leading, in points.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Paragraph" draft="yes">
            <summary>Gets the paragraph settings of this layer.</summary>
            <value>The paragraph settings of this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Paragraphs" draft="yes">
            <summary>Gets the collection of paragraph settings of this layer.</summary>
            <value>The collection of <see cref="T:Aurigma.GraphicsMill.Codecs.Psd.ParagraphSettings" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Path" draft="yes">
            <summary>Gets the path specifying the curve along which the text locates.</summary>
            <value>A vector path specifying the curve along which the text locates.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.PathStartPoint" draft="yes">
            <summary>Gets the start point of the text on the path .</summary>
            <value>A start point of the text on the path. <c>0</c> is the beginning of the path, <c>0.5</c> is the middle of the path, and <c>1</c> is the end of the path.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.PathEndPoint" draft="yes">
            <summary>Gets the end point of the text on the path .</summary>
            <value>An end point of the text on the path. <c>0</c> is the beginning of the path, <c>0.5</c> is the middle of the path, and <c>1</c> is the end of the path.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Raw" draft="yes">
            <summary>Gets text settings before implementing the transformation matrix (if there is any) to them.</summary>
            <value>The text settings.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.SetDpiX(System.Single)" draft="yes">
            <summary>Sets the horizontal resolution for this layer.</summary>
            <param name="val">The horizontal resolution.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.SetDpiY(System.Single)" draft="yes">
            <summary>Sets the vertical resolution for this layer.</summary>
            <param name="val">The vertical resolution.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Strikeout" draft="yes">
            <summary>Gets text strikeout.</summary>
            <value>If <c>true</c> then text is stricken out, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Text" draft="yes">
            <summary>Gets the text in this layer.</summary>
            <value>The text in this layer.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.TextBox" draft="yes">
            <summary>Gets the boundaries of the transformed text in this layer.</summary>
            <value>A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the bounds of the transformed text.</value>
            <remarks><para>This text box represents bounds of the text<!-- after the transformation of this text is applied-->.</para></remarks>
			<seealso cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Transform" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.TextBrush" draft="yes">
            <summary>Gets the brush that determines the color of the text in this layer.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the text in this layer.</value>
            <remarks><para>The <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> has the same color as the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Color" /> property. So this property is more convenient to use than the <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Color" /> when you are drawing the text string with <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32)" />.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Tracking" draft="yes">
            <summary>Gets a text tracking (also known as intercharacter spacing) for the layer.</summary>
            <value>The text tracking.</value>
            <remarks>Text tracking is a spacing between characters in the text string. It is added to each character, including break character.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Transform" draft="yes">
            <summary>Gets or sets a transformation matrix for this layer.</summary>
            <value>The transformation matrix for this layer.</value>
            <seealso href="affine-and-projective-transformations.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Type" draft="yes">
            <summary>Gets a type of this layer.</summary>
            <value>Always <see cref="F:Aurigma.GraphicsMill.Codecs.Psd.FrameType.Text" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.Underline" draft="yes">
            <summary>Gets text underline.</summary>
            <value>If <c>true</c> then text is underlined, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.VerticalScale" draft="yes">
            <summary>Gets vertical scaling value of the text string stored in this layer.</summary>
            <value>Vertical scaling value.</value>
        </member>

<!-- Codecs.Psd.PsdTextFrameRawSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrameRawSettings" draft="yes">
            <summary>Text settings of a PSD text layer before implementing the transformation matrix (if there is any) to them.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrameRawSettings.FontSize" draft="yes">
            <summary>Gets the font size.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrameRawSettings.FormattedText" draft="yes">
            <summary>Gets the formatted text as the collection of text spans. Each span has its own format (font, style, color, etc.).</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrameRawSettings.Path" draft="yes">
            <summary>Gets the path specifying the curve along which the text locates.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrameRawSettings.TextBox" draft="yes">
            <summary>Gets the boundaries of the text.</summary>
        </member>
		
<!-- Codecs.Psd.TextJustification -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.TextJustification" draft="yes">
            <summary>Contains all possible types of text alignment in PSD text layers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.All" draft="yes">
            <summary>Text is justified.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.Center" draft="yes">
            <summary>Text is centered.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.LastCenter" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is centered.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.LastLeft" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is aligned to the left.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.LastRight" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is aligned to the right.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.Left" draft="yes">
            <summary>Text is aligned to the left.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.Psd.TextJustification.Right" draft="yes">
            <summary>Text is aligned to the right.</summary>
        </member>

<!-- Codecs.Psd.TextSpan -->		
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.TextSpan" draft="yes">
            <summary>Represents a text span in <see cref="P:Aurigma.GraphicsMill.Codecs.Psd.PsdTextFrame.FormattedText" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.#ctor" draft="yes">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Caps" draft="yes">
            <summary>Gets capitalization options (caps) of the text.</summary>
            <value>Capitalization options of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Color" draft="yes">
            <summary>Gets text color.</summary>
            <value>Text color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.DigitType" draft="yes">
            <summary>Gets digit type.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Codecs.Psd.DigitType" /> of digits.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.FauxBold" draft="yes">
            <summary>Gets bold style emulation of the text.</summary>
            <value>Bold style emulation of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.FauxItalic" draft="yes">
            <summary>Gets italic style emulation of the text.</summary>
            <value>Italic style emulation of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.FontName" draft="yes">
            <summary>Gets name of the text font.</summary>
            <value>Name of the text font.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.FontSize" draft="yes">
            <summary>Gets size of the text font.</summary>
            <value>Size of the text font.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.HorizontalScale" draft="yes">
            <summary>Gets horizontal scaling value of the text.</summary>
            <value>Horizontal scaling value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Leading" draft="yes">
            <summary>Gets text leading.</summary>
            <value>Text leading.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Strikeout" draft="yes">
            <summary>Gets text strikeout.</summary>
            <value>If <c>true</c> then text is stricken out, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.String" draft="yes">
            <summary>Gets the text string.</summary>
            <value>The text string.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Tracking" draft="yes">
            <summary>Gets text tracking (also known as intercharacter spacing).</summary>
            <value>Text tracking.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.Underline" draft="yes">
            <summary>Gets text underline.</summary>
            <value>If <c>true</c> then text is underlined out, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.TextSpan.VerticalScale" draft="yes">
            <summary>Gets vertical scaling value of the text.</summary>
            <value>Vertical scaling value.</value>
        </member>
		
<!-- Codecs.RawReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.RawReader" draft="yes">
            <summary>Contains methods and properties used to read RAW images.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.RawReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.RawReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.RawReader" /> class using the specified file name.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.RawReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.RawReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>

<!-- Codecs.SvgReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.SvgReader" draft="yes">
            <summary>Contains methods and properties used to read SVG graphics.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified file name.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified file name and fonts.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <param name="fontRegistry">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> of the SVG file to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.IO.Stream,Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified <see cref="T:System.IO.Stream" /> and fonts.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
            <param name="fontRegistry">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> to create this reader for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.IO.Stream,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified <see cref="T:System.IO.Stream" /> and resolution.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader on.</param>
            <param name="dpiX">The horizontal resolution of the SVG file in DPI.</param>
            <param name="dpiY">The vertical resolution of the SVG file in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.String,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified file name and resolution.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <param name="dpiX">The horizontal resolution of the SVG file in DPI.</param>
            <param name="dpiY">The vertical resolution of the SVG file in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.IO.Stream,Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified <see cref="T:System.IO.Stream" /> and resolution.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader on.</param>
            <param name="fontRegistry">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> to create this reader for.</param>
            <param name="dpiX">The horizontal resolution of the SVG file in DPI.</param>
            <param name="dpiY">The vertical resolution of the SVG file in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.#ctor(System.String,Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" /> class using the specified file name and resolution.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <param name="fontRegistry">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> of this SVG file to create this reader for.</param>
            <param name="dpiX">The horizontal resolution of the SVG file in DPI.</param>
            <param name="dpiY">The vertical resolution of the SVG file in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgReader.GetContent" draft="yes">
            <summary>Gets a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> from this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" />.</summary>
            <returns>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> stored in this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.SvgReader.FontRegistry" draft="yes">
            <summary>Gets or sets a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" />.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.FontRegistry" /> associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgReader" />.</value>
            <remarks><para>By default, <see cref="P:Aurigma.GraphicsMill.Codecs.SvgReader.FontRegistry">SvgReader.FontRegistry</see> contains the installed system fonts, but you can replace them with your own custom set.</para></remarks>
        </member>
      
<!-- Codecs.SvgSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.SvgSettings" draft="yes">
            <summary>Contains the SVG writing settings.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgSettings" /> class using the specified compression type.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.SvgSettings.Compression" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgSettings" /> class using the specified compression type and quality.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.SvgSettings.Compression" /> property.</param>
            <param name="quality">The JPEG quality in range <c>[0, 100]</c>. Makes sense if only the <i>compression</i> is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.SvgSettings.Compression" draft="yes">
            <summary>Gets or sets a PDF compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />.</value>
            <remarks><para>PDF format supports the following compression types:</para><list type="table"><listheader><term>Compression Type</term><description>Limitations</description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term><description>No limitations. Supported with all pixel formats allowed for PDF files.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" /></term><description>No limitations. Supported with all pixel formats allowed for PDF files.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /></term><description>Can be used only with those pixel formats which are supported by JPEG (non-extended and non-indexed grayscale, RGB, and CMYK images). To adjust JPEG quality, use <see cref="P:Aurigma.GraphicsMill.Codecs.SvgSettings.Quality" /> property.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.SvgSettings.Quality" draft="yes">
            <summary>Gets or sets an image quality.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>. The lesser value means the lower quality and the smaller file.</value>
        </member>

<!-- Codecs.SvgWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.SvgWriter" draft="yes">
            <summary>Contains methods and properties used to write an SVG file.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.String,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified file name, width, and height.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.IO.Stream,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified <see cref="T:System.IO.Stream" />, width, and height.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.String,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified file name, width, height, and resolution.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="dpiX">The horizontal resolution of the resulting image in DPI.</param>
            <param name="dpiY">The vertical resolution of the resulting image in DPI.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" /> class using the specified <see cref="T:System.IO.Stream" />, width, height, and resolution.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="dpiX">The horizontal resolution of the resulting image in DPI.</param>
            <param name="dpiY">The vertical resolution of the resulting image in DPI.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.SvgWriter.Compression" draft="yes">
            <summary>Gets or sets the SVG compression type.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.GetGraphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" />.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.Graphics" /> object associated with this <see cref="T:Aurigma.GraphicsMill.Codecs.SvgWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.SvgWriter.Quality" draft="yes">
            <summary>Gets or sets an image quality.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.SvgWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
      
<!-- Codecs.TgaReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TgaReader" draft="yes">
            <summary>Contains methods and properties used to read TARGA images.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaReader" /> class using the specified source.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>

<!-- Codecs.TgaSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TgaSettings" draft="yes">
            <summary>Contains all the possible TARGA image writing settings.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaSettings" /> class using the specified compression type.</summary>
            <param name="compression">The compression type.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaSettings" /> class using the specified compression type and reduced precision.</summary>
            <param name="compression">The compression type.</param>
            <param name="reducedPrecision">If <c>true</c> then image is saved with reduced color depth, 16 bits per pixel: 5 bits for red, 6 bits for green, and 5 bits for blue, otherwise the standard 24bpp color depth is used.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TgaSettings.Compression" draft="yes">
            <summary>The compression type.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TgaSettings.ReducedPrecision" draft="yes">
            <summary>If <c>true</c> then image is saved with reduced color depth, 16 bits per pixel: 5 bits for red, 6 bits for green, and 5 bits for blue, otherwise the standard 24bpp color depth is used.</summary>
        </member>

<!-- Codecs.TgaWriter -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TgaWriter" draft="yes">
            <summary>Contains methods and properties used to write TARGA images.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaWriter" /> class using the specified source.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TgaWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.TgaWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.TgaWriter" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TgaWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this TARGA writer using the provided settings.</summary>
            <param name="settings">Settings to implement to the writer.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TgaWriter.Compression" draft="yes">
            <summary>Gets or sets a compression type.</summary>
            <value>The compression type.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TgaWriter.ReducedPrecision" draft="yes">
            <summary>Gets or sets a value indicating whether the reduced color depth should be used when you save the TARGA file.</summary>
            <value>If <c>true</c> then image is saved with reduced color depth, 16 bits per pixel: 5 bits for red, 6 bits for green, and 5 bits for blue, otherwise the standard 24bpp color depth is used.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TgaWriter.InverseOrder" draft="yes">
            <summary>Gets or sets a value indicating whether scanlines should be written in the reverse order (from the last to the first scanline) when you save the TARGA file.</summary>
            <value><c>true</c> if the image scanlines should be written in an inverse order; otherwise, <c>false</c>.</value>
        </member>

<!-- Codecs.TiffChannelType -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffChannelType" draft="yes">
            <summary>Contains possible extra channel types.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.TiffChannelType.Alpha" draft="yes">
            <summary>Unassociated alpha data is transparency information that logically exists independently of an image. Unassociated alpha is additional information, which can be removed or edited.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.TiffChannelType.Color" draft="yes">
            <summary>Color data.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.TiffChannelType.PremultipliedAlpha" draft="yes">
            <summary>Associated alpha data is opacity information. The color information of each pixel is additionally premultiplied with the value of alpha channel. If this channel data is removed or edited, the image changes. Storing data in premultiplied format allows compositing operations to be implemented more efficiently.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.TiffChannelType.Undefined" draft="yes">
            <summary>Unspecified data can contain color information in addition to primary colors or non-color information.</summary>
        </member>
		
<!-- Codecs.TiffExtraChannel -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannel" draft="yes">
            <summary>Represents the TIFF extra channel retrieved from an image.</summary>
            <remarks>One of the most important features of the TIFF image format is the extra channels support. Extra channels are typically used to specify non-color information (such as image opacity), highlight some image area, or apply additional inks (such as gold, silver, etc.) in printing solutions.</remarks>
            <example><para>The following code reads a TIFF image, extracts an extra channel from it, and saves the channel's bitmap as a JPEG image.</para><code language="CS" source="Samples/Code/LoadSave.cs#extraExtract"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
			<seealso href="working-with-tiff-extra-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffExtraChannel.ChannelType" draft="yes">
            <summary>Gets a type of this extra channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.TiffChannelType" /> of this extra channel.</value>
        </member>
		
<!-- Codecs.TiffExtraChannelCollection -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection" draft="yes">
            <summary>Represents a collection of TIFF extra channels.</summary>
            <remarks>The collection contains all extra channels associated with the TIFF page. Using this property you can either obtain all extra channels from the page or write some channels in addition to primary ones.</remarks>
            <example><para>The following code adds a JPEG image to a TIFF image as an unassociated alpha extra channel, and saves the resulting TIFF image.</para><code language="CS" source="Samples/Code/LoadSave.cs#extraAdd"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
			<seealso href="working-with-tiff-extra-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection.InsertItem(System.Int32,Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection.SetItem(System.Int32,Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry)">
            <exclude />
        </member>
		
<!-- Codecs.TiffExtraChannelEntry -->
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry" draft="yes">
            <summary>Represents the TIFF extra channel to embed into an image.</summary>
            <example><para>The following code adds a JPEG image to a TIFF image as an unassociated alpha extra channel, and saves the resulting TIFF image.</para><code language="CS" source="Samples/Code/LoadSave.cs#extraAdd"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
			<seealso href="working-with-tiff-extra-channels.htm" />
			<seealso cref="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry.ChannelType" draft="yes">
            <summary>Gets or sets a type of an extra channel.</summary>
            <value>Gets or sets a type of an extra channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry.Image" draft="yes">
            <summary>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image data for an extra channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image data for an extra channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry.#ctor(Aurigma.GraphicsMill.Pipeline,Aurigma.GraphicsMill.Codecs.TiffChannelType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry" /> class using the specified image and channel type.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing image data for an extra channel. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry.Image" /> property.</param>
            <param name="channelType">A <see cref="T:Aurigma.GraphicsMill.Codecs.TiffChannelType" /> of an extra channel. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.TiffExtraChannelEntry.ChannelType" /> property.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffFrame" draft="yes">
            <summary>Represents a frame of a TIFF image.</summary>
            <example><para>The following code snippet demonstrates how to split a multiframe image file into separate JPEG files:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesReader"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffFrame.Compression" draft="yes">
            <summary>Gets a compression type of this frame.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> of this frame.</value>
            <remarks><para>TIFF format supports the following compression types:</para><list type="table"><listheader><term>Compression Type</term><description>Limitations</description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt3" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt4" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.CcittRle" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /></term><description>Can be used only with those pixel formats which are supported by JPEG (non-extended and non-indexed grayscale, RGB, and CMYK images). To adjust JPEG quality, use <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Quality" /> property.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle" /></term><description>Has no limitations, but works better with indexed images.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Lzw" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" /></term><description>No limitations.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffFrame.ExtraChannels" draft="yes">
            <summary>Gets a collection of extra channels associated with this frame. Using this property you can either obtain all extra channels from the TIFF page or write some channels in addition to primary ones.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection" /> containing extra channels associated with this frame.</value>
            <seealso href="working-with-tiff-extra-channels.htm" />
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffReader" draft="yes">
            <summary>This class enables you to read TIFF images.</summary>
            <remarks><para>TIFF format is one of the most comprehensive image formats. It was designed to promote the interchange of digital image data. The general scenario TIFF format was invented for, assumes that scanning or painting software creates a TIFF file, which can then be read and incorporated into a document or publication by an application such as a desktop publishing package. It is also widely used to retrieve facsimile messages.</para><para>This image format is rather versatile and have a lot of modifications. It supports most Graphics Mill pixel formats even such exotic ones like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format80bppAcmyk" />. It also can store multiple images in the single file (mostly used for fax images and other documents stored as 1-bit bitmaps).</para><para>TIFF files can also contain Adobe® resources, XML, EXIF and IPTC data.</para></remarks>
            <example><para>The following code snippet demonstrates how to split a multiframe image file into separate JPEG files:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesReader"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffReader.Frames" draft="yes">
            <summary>Gets a collection of <see cref="T:Aurigma.GraphicsMill.Codecs.TiffFrame" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> containing frames loaded from the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffReader" /> class using the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffReader.TreatFirstExtraChannelAsAlpha" draft="yes">
            <summary>Gets or sets a value indicating whether the reader should interpret the first extra channel as alpha channel in pixel data.</summary>
            <value><c>true</c> if the reader interprets the first extra channel as alpha; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
            <remarks><para>For example, assume you read an image contained three color channels (RGB) and two extra ones. If this property is <c>true</c>, the image loaded from frame using <see cref="M:Aurigma.GraphicsMill.Codecs.Frame.GetBitmap" /> method will be interpreted as ARGB (RGB + alpha). <see cref="P:Aurigma.GraphicsMill.Codecs.TiffFrame.ExtraChannels" /> collection will contain one extra channel in this case. Otherwise, if the <see cref="P:Aurigma.GraphicsMill.Codecs.TiffReader.TreatFirstExtraChannelAsAlpha" /> property is <c>false</c>, it will be interpreted as RGB with two extra channels.</para></remarks>
            <seealso href="working-with-tiff-extra-channels.htm" />
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffSettings" draft="yes">
            <summary>Contains all the possible TIFF writing settings.</summary>
            <remarks><para>The main TIFF writing settings is a compression type. To change compression type use <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Compression" /> property. This property accepts members of the <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> enumeration.</para><para>Another setting which can be specified is alpha premultiplication which has meaning only when saving image with alpha channel. You can turn it on or off using <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.IsAlphaPremultiplied" /> property. The default value of this property is <c>false</c> and content of the alpha channel is simply stored along with color channels of the image by default. The second way is to store image with "associated" alpha channel. This way implies that not only alpha channel itself will be written into the file, but also color channels of each pixel will be premultiplied with the corresponding alpha channel value.</para><para>You should use TIFF files with associated alpha if you have software which gain some benefit from them. For example, TIFF files with premultiplied alpha are correctly shown as partially transparent images in Adobe® Photoshop®, while images with unassociated alpha are shown as non transparent images with additional channel. But you should take into account that premultiplication is slow and introduces rounding errors. So you should not set this property to <c>true</c> without reason.</para><para>You can also provide meta-information. Use <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.AdobeResources" />, <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Exif" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Iptc" /> properties to specify corresponding metadata objects.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#tiffSettings"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks to write into the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Compression" draft="yes">
            <summary>Gets or sets a compression type to write the image with.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" />.</value>
            <remarks><para>TIFF format supports the following compression types:</para><list type="table"><listheader><term>Compression Type</term><description>Limitations</description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt3" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt4" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.CcittRle" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /></term><description>Can be used only with those pixel formats which are supported by JPEG (non-extended and non-indexed grayscale, RGB, and CMYK images). To adjust JPEG quality, use <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Quality" /> property.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle" /></term><description>Has no limitations, but works better with indexed images.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Lzw" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" /></term><description>No limitations.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection to write into the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection to write into the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.IsAlphaPremultiplied" draft="yes">
            <summary>Gets or sets a value indicating whether to premultiply image with alpha channel during writing or not.</summary>
            <value><c>true</c> if color channels of each pixel are premultiplied with corresponding alpha channel; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <remarks><para>This property has meaning only when you save an image with alpha channel.</para><para>TIFF specification defines two ways of alpha channel storing.</para><list type="bullet"><item>Unassociated alpha. The content of the alpha channel is simply stored along with color channels of the image. This is default behaviour.</item><item>Associated alpha. The content of the alpha channel is stored into the file, but color channels of each pixel are premultiplied with the corresponding alpha channel value.</item></list><para>You should use TIFF files with associated alpha if you have software which gain some benefit from them (for example, unassociated alpha channel will be shown as separate channel in Adobe® Photoshop®, while image with associated alpha will be shown as image with transparency). But you should take into account that premultiplying process is slow and introduces rounding errors. So you should not set this property to <c>true</c> without reason.</para><para>There is no difference for you between files with "associated" and "unassociated" alpha if you process them with Graphics Mill. <see cref="T:Aurigma.GraphicsMill.Codecs.TiffReader" /> class implementation takes into account this option during image reading and performs demultiplication if necessary. So you will always get usual <see cref="T:Aurigma.GraphicsMill.Bitmap" /> object with "unassociated" alpha.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffSettings.#ctor(Aurigma.GraphicsMill.Codecs.CompressionType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffSettings" /> class using the specified compression type.</summary>
            <param name="compression">A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. You can change it later through the <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Compression" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Quality" draft="yes">
            <summary>Gets or sets a JPEG quality if compression type is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
            <remarks>The higher JPEG quality you specify, the larger file size you get.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata to write into the image.</summary>
            <value>A XML code containing the XMP metadata to write into the image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.TiffWriter" draft="yes">
            <summary>Contains methods and properties used to write TIFF image.</summary>
            <remarks><para>TIFF format is one of the most comprehensive image formats. It was designed to promote the interchange of digital image data. The general scenario TIFF format was invented for, assumes that scanning or painting software creates a TIFF file, which can then be read and incorporated into a document or publication by an application such as a desktop publishing package. It is also widely used to retrieve facsimile messages.</para><para>This image format is rather versatile and have a lot of modifications. It supports most Graphics Mill pixel formats even such exotic ones like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format80bppAcmyk" />. It also can store multiple images in the single file (mostly used for fax images and other documents stored as 1-bit bitmaps).</para><para>TIFF files can also contain Adobe® resources, XML, EXIF and IPTC data.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#tiffReadWrite"></code></example>
            <seealso href="supported-file-formats.htm#tiffFormat" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.AdobeResources" draft="yes">
            <summary>Gets or sets Adobe® image resource blocks to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceDictionary" /> containing Adobe® image resource blocks to write into the image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffWriter.Close" draft="yes">
            <summary>Closes the writer, flushes all unsaved data, and detaches the it from the opened file (or other media).</summary>
            <remarks><para>If you close the writer which has not been opened, the method does nothing. So you need not do any checks to ensure if writer is opened to close it.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.Compression" draft="yes">
            <summary>Gets or sets a compression type to write the image with.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.CompressionType" /> to write the image with. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" />.</value>
            <remarks><para>TIFF format supports the following compression types:</para><list type="table"><listheader><term>Compression Type</term><description>Limitations</description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.None" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt3" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Ccitt4" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.CcittRle" /></term><description>For 1-bit images only.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" /></term><description>Can be used only with those pixel formats which are supported by JPEG (non-extended and non-indexed grayscale, RGB, and CMYK images). To adjust JPEG quality, use <see cref="P:Aurigma.GraphicsMill.Codecs.TiffSettings.Quality" /> property.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Rle" /></term><description>Has no limitations, but works better with indexed images.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Lzw" /></term><description>No limitations.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Zip" /></term><description>No limitations.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.Exif" draft="yes">
            <summary>Gets or sets EXIF data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.ExifDictionary" /> containing EXIF data collection to write into the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.ExtraChannels" draft="yes">
            <summary>Gets or sets a collection of extra channels to embed into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.TiffExtraChannelCollection" /> to embed into the image.</value>
            <example><para>The following code reads a TIFF image, extracts an extra channel from it, and saves the channel's bitmap as a JPEG image.</para><code language="CS" source="Samples/Code/LoadSave.cs#extraExtract"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.Iptc" draft="yes">
            <summary>Gets or sets IPTC data collection to write into the image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.IptcDictionary" /> containing IPTC data collection to write into the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.IsAlphaPremultiplied" draft="yes">
            <summary>Gets or sets a value indicating whether to premultiply image with alpha channel during writing or not.</summary>
            <value><c>true</c> if color channels of each pixel are premultiplied with corresponding alpha channel; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <remarks><para>This property has meaning only when you save an image with alpha channel.</para><para>TIFF specification defines two ways of alpha channel storing.</para><list type="bullet"><item>Unassociated alpha. The content of the alpha channel is simply stored along with color channels of the image. This is default behaviour.</item><item>Associated alpha. The content of the alpha channel is stored into the file, but color channels of each pixel are premultiplied with the corresponding alpha channel value.</item></list><para>You should use TIFF files with associated alpha if you have software which gain some benefit from them (for example, unassociated alpha channel will be shown as separate channel in Adobe® Photoshop®, while image with associated alpha will be shown as image with transparency). But you should take into account that premultiplying process is slow and introduces rounding errors. So you should not set this property to <c>true</c> without reason.</para><para>There is no difference for you between files with "associated" and "unassociated" alpha if you process them with Graphics Mill. <see cref="T:Aurigma.GraphicsMill.Codecs.TiffReader" /> class implementation takes into account this option during image reading and performs demultiplication if necessary. So you will always get usual <see cref="T:Aurigma.GraphicsMill.Bitmap" /> object with "unassociated" alpha.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffWriter.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" /> class using the specified media.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.TiffWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.Quality" draft="yes">
            <summary>Gets or sets a JPEG quality if compression type is set to <see cref="F:Aurigma.GraphicsMill.Codecs.CompressionType.Jpeg" />.</summary>
            <value>The JPEG quality in range <c>[0, 100]</c>. The default value is <c>75</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.TiffWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.TiffWriter.Xmp" draft="yes">
            <summary>Gets or sets the XML code containing the XMP metadata to write into the image.</summary>
            <value>A XML code containing the XMP metadata to write into the image.</value>
            <remarks><para>To get specific values of the XMP fields, you can either use the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class or parse this XML manually according to the <see href="http://partners.adobe.com/public/developer/en/xmp/sdk/XMPspecification.pdf">XMP specification</see>.</para></remarks>
        </member>

<!-- Codecs.WebPFrame -->
        <member name="T:Aurigma.GraphicsMill.Codecs.WebPFrame" draft="yes">
            <summary>Represents a frame of a WebP image.</summary>
            <example><para>The following code reads a WebP image and saves its frames as separate PNG files:</para>
			<code language="CS" source="Samples/Code/LoadSave.cs#WebPWriteFrames"></code></example>
            <seealso href="supported-file-formats.htm#WebP" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrame.BlendTransparentWithPrevious" draft="yes">
            <summary>Gets or sets whether transparent pixels of the current frame are to be blended with corresponding pixels of the previous canvas.</summary>
            <value><c>true</c> if alpha-blending is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrame.Delay" draft="yes">
            <summary>Gets a number of hundredths (1/100) of a second to wait after rendering this frame.</summary>
            <value>The number of hundredths (1/100) of a second to wait after rendering this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrame.DisposalMethod" draft="yes">
            <summary>Gets a disposal method, i.e. what to do with the screen when this frame is being displayed.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.DisposalMethod" /> of this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrame.Left" draft="yes">
            <summary>Gets a horizontal position of the left top corner of this frame.</summary>
            <value>The x-coordinate of the upper-left corner of this frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrame.Top" draft="yes">
            <summary>Gets a vertical position of the left top corner of this frame.</summary>
            <value>The y-coordinate of the upper-left corner of this frame.</value>
        </member>

<!-- Codecs.WebPFrameSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.WebPFrameSettings" draft="yes">
            <summary>Contains all the possible WebP frame writing settings.</summary>
            <example><para>The following code creates a simple animated image in WebP format:</para>
			<code language="CS" source="Samples/Code/LoadSave.cs#WriteAnimatedWebP"></code></example>
            <seealso href="supported-file-formats.htm#WebPFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPFrameSettings" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.Delay" draft="yes">
            <summary>Gets or sets a number of hundredths (1/100) of a second to wait after rendering a frame.</summary>
            <value>The number of hundredths (1/100) of a second to wait after rendering a frame. The default value is <c>0</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.BlendTransparentWithPrevious" draft="yes">
            <summary>Gets or sets whether transparent pixels of the current frame are to be blended with corresponding pixels of the previous canvas.</summary>
            <value><c>true</c> if alpha-blending is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.Lossless" draft="yes">
            <summary>Gets or sets whether the frame should be compressed lossless.</summary>
            <value><c>true</c> if lossless compression is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.DisposalMethod" draft="yes">
            <summary>Gets or sets a disposal method, i.e. what to do with the screen when the frame is being displayed.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.DisposalMethod" /> of a frame. The default value is <see cref="F:Aurigma.GraphicsMill.Codecs.DisposalMethod.None" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.Left" draft="yes">
            <summary>Gets a horizontal position of the left top corner of a frame.</summary>
            <value>The y-coordinate of the upper-left corner of a frame.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPFrameSettings.Top" draft="yes">
            <summary>Gets a vertical position of the left top corner of a frame.</summary>
            <value>The x-coordinate of the upper-left corner of a frame.</value>
        </member>

<!-- Codecs.WebPReader -->
        <member name="T:Aurigma.GraphicsMill.Codecs.WebPReader" draft="yes">
            <summary>Contains methods and properties used to read WebP images.</summary>
            <remarks><para>WebP WebP is an image format that provides lossless and lossy compression for images on the web. As soon as it supports animation, it can contain multiple frames. Frame can have its own position, and a number of other paramaters, as delay time, disposal method, etc.</para></remarks>
            <example><para>The following code reads a WebP image and saves its frames as separate PNG files:</para><code language="CS" source="Samples/Code/LoadSave.cs#WebPWriteFrames"></code></example>
            <seealso href="supported-file-formats.htm#WebPFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPReader.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPReader" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this reader for.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPReader" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPReader.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPReader" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this reader for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.BackgroundColor" draft="yes">
            <summary>Gets or sets the default background color of the canvas.</summary>
            <value>The default background color of the canvas.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.Frames" draft="yes">
            <summary>Gets a collection of <see cref="T:Aurigma.GraphicsMill.Codecs.WebPFrame" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FrameCollection`1" /> containing frames loaded from the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.Height" draft="yes">
            <summary>Gets an entire WebP image height.</summary>
            <value>The entire WebP image height (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.PlaybackCount" draft="yes">
            <summary>Gets a number of times to play the WebP image.</summary>
            <value>A number of times to play the WebP image.</value>
            <remarks><para>If this property is <c>0</c>, the file is played infinitely.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.Quality" draft="yes">
            <summary>Gets or sets lossy compression quality.</summary>
            <value>The lossy compression quality in the range <c>[0, 100]</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPReader.Width" draft="yes">
            <summary>Gets an entire WebP image width.</summary>
            <value>The entire WebP image width (in pixels).</value>
        </member>

<!-- Codecs.WebPSettings -->		
        <member name="T:Aurigma.GraphicsMill.Codecs.WebPSettings" draft="yes">
            <summary>Contains methods and properties used to write WebP images (both static and animated).</summary>
            <remarks><para>WebP WebP is an image format that provides lossless and lossy compression for images on the web. As soon as it supports animation, it can contain multiple frames. Frame can have its own position, and a number of other paramaters, as delay time, disposal method, etc.</para></remarks>
            <example><para>The following code creates a simple animated image in WebP format:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesWriter"></code></example>
            <seealso href="supported-file-formats.htm#WebPFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPSettings.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPSettings" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPSettings" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPSettings.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPSettings" /> class with the given quality.</summary>
			<param name="quality">The lossy compression quality in the range <c>[0, 100]</c>.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPSettings.BackgroundColor" draft="yes">
            <summary>Gets or sets the default background color of the canvas.</summary>
            <value>The default background color of the canvas. The default value is white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPSettings.Quality" draft="yes">
            <summary>Gets or sets lossy compression quality.</summary>
            <value>The lossy compression quality in the range <c>[0, 100]</c>. The default value is <c>90</c>.</value>
        </member>
		
<!-- Codecs.WebPWriter -->		
        <member name="T:Aurigma.GraphicsMill.Codecs.WebPWriter" draft="yes">
            <summary>Contains methods and properties used to write WebP images (both static and animated).</summary>
            <remarks><para>WebP WebP is an image format that provides lossless and lossy compression for images on the web. As soon as it supports animation, it can contain multiple frames. Frame can have its own position, and a number of other paramaters, as delay time, disposal method, etc.</para></remarks>
            <example><para>The following code creates a simple animated image in WebP format:</para><code language="CS" source="Samples/Code/LoadSave.cs#filesWriter"></code></example>
            <seealso href="supported-file-formats.htm#WebPFormat" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPWriter.#ctor(System.String)" draft="yes">
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPWriter" /> class.</summary></overloads>
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPWriter" /> class using the specified file name.</summary>
            <param name="fileName">The name of the file to create this writer on.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPWriter.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.WebPWriter" /> class using the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to create this writer on.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.BackgroundColor" draft="yes">
            <summary>Gets or sets the default background color of the canvas.</summary>
            <value>The default background color of the canvas. The default value is white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.FrameOptions" draft="yes">
            <summary>Gets a <see cref="T:Aurigma.GraphicsMill.Codecs.WebPFrameSettings" /> providing WebP frame writing settings.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.WebPFrameSettings" /> to specify the desired frame writing settings.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPWriter.GetAppropriatePixelFormat(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Returns an appropriate pixel format for this <see cref="T:Aurigma.GraphicsMill.Codecs.WebPWriter" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to get an appropriate pixel format from.</param>
            <returns>The appropriate <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> for this <see cref="T:Aurigma.GraphicsMill.Codecs.WebPWriter" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Height" draft="yes">
            <summary>Gets or sets an entire WebP image height.</summary>
            <value>The entire WebP image height (in pixels). The default value is <c>0</c>.</value>
            <remarks>Using the <see cref="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Width" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Height" /> properties you specify a "viewport" for the WebP file. If you put the frame which exceeds of these dimensions, it is cropped.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.PlaybackCount" draft="yes">
            <summary>Gets or sets a number of times to play the WebP image.</summary>
            <value>A number of times to play the WebP image. The default value is <c>0</c>, which means playing infinitely.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Quality" draft="yes">
            <summary>Gets or sets lossy compression quality.</summary>
            <value>The lossy compression quality in the range <c>[0, 100]</c>. The default value is <c>90</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.WebPWriter.Setup(Aurigma.GraphicsMill.Codecs.WriterSettings)" draft="yes">
            <summary>Configures this image writer using the provided settings.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Width" draft="yes">
            <summary>Gets or sets an entire WebP image width.</summary>
            <value>The entire WebP image width (in pixels). The default value is <c>0</c>.</value>
            <remarks>Using the <see cref="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Width" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.WebPWriter.Height" /> properties you specify a "viewport" for the WebP file. If you put the frame which exceeds of these dimensions, it is cropped.</remarks>
        </member>
		
<!-- Codecs.WriterSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.WriterSettings" draft="yes">
            <summary>Represents a base class for all image writing settings.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.WriterSettings.Format" draft="yes">
            <summary>Gets file format for which these settings are defined.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.FileFormat" /> for which these settings are defined.</value>
            <remarks>Each descendant class returns a fixed value specifying file format it represents.</remarks>
        </member>
		
<!-- Codecs.XmpArrayNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" draft="yes">
            <summary>Represents an XMP array.</summary>
            <remarks><para>You can use this class for all types of XMP arrays: ordered, unordered, and alternative.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Add(System.Object)" draft="yes">
            <summary>Adds an item to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <param name="node">The object to add to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the array.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Clear" draft="yes">
            <summary>Removes all items from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <remarks><para>Reference-type elements are set to a null reference (<b>Nothing</b> in Visual Basic). Boolean-type elements are set to <c>false</c>. Other value-type elements are set to zero.</para><para>This method only clears the values of the elements; it does not delete the elements themselves.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Contains(System.Object)" draft="yes">
            <summary>Determines whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> contains a specific value.</summary>
            <param name="node">The object to locate in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</param>
            <returns><c>true</c> if the <see cref="T:System.Object" /> is found in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the elements of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Count" draft="yes">
            <summary>Gets the number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <value>The number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.GetEnumerator" draft="yes">
            <summary>Returns an enumerator that iterates through an array.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the array.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.IndexOf(System.Object)" draft="yes">
            <summary>Determines the index of a specific item in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <param name="value">The object to locate in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</param>
            <returns>The index of <i>value</i> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Insert(System.Int32,System.Object)" draft="yes">
            <summary>Inserts an item to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> at the specified index.</summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="node">The object to insert into the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</param>
            <remarks>If <i>index</i> equals the number of items in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />, then <i>value</i> is appended to the end.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.IsFixedSize" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> has a fixed size.</summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.IsReadOnly" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> is read-only.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> is synchronized (thread safe).</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Item(System.Int32)" draft="yes">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNodeType,Aurigma.GraphicsMill.Codecs.XmpNamespace,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class with the specified type, name, and namespace.</summary>
            <param name="nodeType">A type of the node.</param>
            <param name="ns">A namespace to which the new node belongs.</param>
            <param name="name">A name of the node.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNodeType,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class with the specified type and name.</summary>
            <param name="nodeType">A type of the node.</param>
            <param name="name">Name of the node.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.Remove(System.Object)" draft="yes">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <param name="node">The object to remove from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpArrayNode.RemoveAt(System.Int32)" draft="yes">
            <summary>Removes the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpArrayNode.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" />.</summary>
            <value>Always returns <c>null</c> (synchronized access is not implemented).</value>
        </member>
		
<!-- Codecs.XmpData -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpData" draft="yes">
            <summary>Represents an XMP tree.</summary>
            <remarks><para>This class can be used for two purposes: </para><list type="number"><item><description>Parse XMP data and extract the specific fields values (nodes).</description></item><item><description>Build or modify existing XMP tree by adding/removing/editing nodes.</description></item></list><para>XMP is an XML-based tree-like format of metadata storage. This class allows to load XML containing XMP data (with a constructor or the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpData.Load(System.String)" /> method). After the XMP string is loaded, a hierarchical set of nodes is formed. You can iterate each node in the <see cref="P:Aurigma.GraphicsMill.Codecs.XmpData.Values" /> collection and drill down into its children to get information about some specific node. </para><para>To add nodes to this tree, use the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpData.AddNode(Aurigma.GraphicsMill.Codecs.XmpNode)" /> method. Any object that is a descendant of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> class can be added to the tree. Items are removed with the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Remove(System.Object)" /> method. After you build a tree of XMP fields, you can get it as an XML string which can be passed to any writer object that supports XMP data (JPEG, TIFF).</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Add(System.Object,System.Object)" draft="yes">
            <summary>Adds a node to the top of the XMP tree.</summary>
            <param name="name">A qualified XMP node name.</param>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> descendant.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.AddNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Adds a node to the XMP tree.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> descendant.</param>
            <remarks><para>This method is more convenient than the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpData.Add(System.Object,System.Object)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Clear" draft="yes">
            <summary>Removes all elements from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <remarks><para>Reference-type elements are set to a null reference (<b>Nothing</b> in Visual Basic). Boolean-type elements are set to <c>false</c>. Other value-type elements are set to zero.</para><para>This method only clears the values of the elements; it does not delete the elements themselves.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Contains(System.Object)" draft="yes">
            <summary>Determines whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object contains a node with the specified key.</summary>
            <param name="name">The node name to locate in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</param>
            <returns><c>true</c> if the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> contains a node with the given name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the elements of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> to an Array, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.Count" draft="yes">
            <summary>Gets the number of nodes contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" />.</summary>
            <value>The number of nodex contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.FindKeysByNamespace(Aurigma.GraphicsMill.Codecs.XmpNamespace)" draft="yes">
            <summary>Returns an array of tags belonging to the specified namespace in the current tree.</summary>
            <param name="ns">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> for which the tags should be returned.</param>
            <returns>An array of tags belonging to the given namespace.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.GetDictionaryEnumerator" draft="yes">
            <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.GetNodeEnumerator" draft="yes">
            <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.IsFixedSize" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object has a fixed size.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.IsReadOnly" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object is read-only.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> is synchronized (thread safe).</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.Item(System.Object)" draft="yes">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="name">The key of the element to get or set.</param>
            <value>The element with the specified key, or null if the key does not exist.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.Keys" draft="yes">
            <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <value>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</value>
            <remarks><para>Tag names are returned as strings.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Load(System.String)" draft="yes">
            <summary>Creates an XMP tree based on the provided XML code.</summary>
            <param name="xmp">An XML code with the XMP data.</param>
            <remarks><para>Typically you get the string with XMP data from a JPEG or TIFF reader class. After that you pass this string to this method. As soon as XMP data is loaded to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class, you can easily get specific fields value.</para><para>If you edit XMP data (add, remove, or modify nodes) and want to save it back, use the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpData.Save" /> method. It will return the XML string which you will be able to pass to the <b>Xmp</b> property of an appropriate writer.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.Namespaces" draft="yes">
            <summary>Returns an array of namespaces stored in this tree.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> of all XMP fields stored in this tree.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> class using the specified XML code.</summary>
            <param name="xmp">An XML code containing the XMP data.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Remove(System.Object)" draft="yes">
            <summary>Removes the first occurrence of a specific node from the tree.</summary>
            <param name="name">A tag name to remove.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.Save" draft="yes">
            <summary>Returns an XML code corresponding to the tree of XMP fields stored in this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <returns>An XML code corresponding to the XMP data stored in this class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpData.SetNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Sets a new node to this tree.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> to set.</param>
            <remarks><para>This method reads a key (tag name) from the provided <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> and inserts it into the tree instead of the node with the same tag name.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" />.</summary>
            <value>Always returns <c>null</c> (synchronized access is not implemented).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpData.Values" draft="yes">
            <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</summary>
            <value>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpData" /> object.</value>
        </member>
		
<!-- Codecs.XmpDictionaryNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" draft="yes">
            <summary>Represents a base class for XMP properties allowing that allows accessing a node as a dictionary.</summary>
            <remarks><para>Several classes that are not arrays but can contain qualifiers inherit from this class.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Add(System.Object,System.Object)" draft="yes">
            <summary>Adds an element with the provided key and value to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            <remarks><para>You can also use the <see cref="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Item(System.Object)" /> property to add new elements by setting the value of a key that does not exist in the dictionary. However, if the specified key already exists in the dictionary, setting the <see cref="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Item(System.Object)" /> property overwrites the old value. In contrast, the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> method throws an exeption if an element with the same key already exists in the dictionary.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.AddNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Adds an <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> descendant.</param>
            <remarks><para>This method is more convenient than the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Add(System.Object,System.Object)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Clear" draft="yes">
            <summary>Removes all elements from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <remarks><para>Reference-type elements are set to a null reference (<b>Nothing</b> in Visual Basic). Boolean-type elements are set to <c>false</c>. Other value-type elements are set to zero.</para><para>This method only clears the values of the elements; it does not delete the elements themselves.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Contains(System.Object)" draft="yes">
            <summary>Determines whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</param>
            <returns><c>true</c> if the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> contains an element with the key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the elements of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Count" draft="yes">
            <summary>Gets the number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" />.</summary>
            <value>The number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.FindKeysByNamespace(Aurigma.GraphicsMill.Codecs.XmpNamespace)" draft="yes">
            <summary>Returns an array of tags belonging to the specified namespace in the current dictionary.</summary>
            <param name="ns">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> for which the tags should be returned.</param>
            <returns>An array of tags belonging to the given namespace.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.GetDictionaryEnumerator" draft="yes">
            <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.GetNodeEnumerator" draft="yes">
            <summary>Returns an enumerator that iterates through a dictionary.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.GetEnumerator" draft="yes">
            <summary>Returns an enumerator that iterates through a dictionary.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.IsFixedSize" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object has a fixed size.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.IsReadOnly" draft="yes">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object is read-only.</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> is synchronized (thread safe).</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Item(System.Object)" draft="yes">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="key">The key of the element to get or set.</param>
            <value>The element with the specified key, or null if the key does not exist.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Keys" draft="yes">
            <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <value>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Namespaces" draft="yes">
            <summary>Returns an array of namespaces stored in this dictionary.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> of all XMP fields stored in this dictionary.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Remove(System.Object)" draft="yes">
            <summary>Removes the element with the specified key from the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.SetItemNoCycle(System.Object,System.Object)" draft="yes">
            <summary>Sets a node item.</summary>
            <param name="key">The <see cref="T:System.Object" /> to be used as the key of the element to set. Typically it is a number that represents an EXIF/IPTC tag or Adobe resource block ID.</param>
            <param name="value">The <see cref="T:System.Object" /> to be used as the value of the element to set.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.SetNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Sets a new node to this dictionary.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> to set.</param>
            <remarks><para>This method reads a key (tag name) from the provided <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> and inserts it into the dictionary instead of the node with the same tag name.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" />.</summary>
            <value>Always returns <c>null</c> (synchronized access is not implemented).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode.Values" draft="yes">
            <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</summary>
            <value>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpDictionaryNode" /> object.</value>
        </member>
		
<!-- Codecs.XmpLocalizedTextItemNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" draft="yes">
            <summary>Represents a localized text item node.</summary>
            <remarks><para>Nodes of this type are used to describe text items contain in <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" />.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the elements of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.Count" draft="yes">
            <summary>Gets the number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" />.</summary>
            <value>The number of elements contained in the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.GetEnumerator" draft="yes">
            <summary>Returns an enumerator that iterates through a dictionary.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" /> is synchronized (thread safe).</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.Namespace" draft="yes">
            <summary>Returns an array of namespaces stored in this dictionary.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> of all XMP fields stored in this dictionary.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.#ctor(System.String,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" /> class with the specified name and text.</summary>
            <param name="name">A qualified XMP node name.</param>
            <param name="text">A localized text.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" />.</summary>
            <value>Always returns <c>null</c> (synchronized access is not implemented).</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode.Value" draft="yes">
            <summary>Gets or sets a value stored in this node.</summary>
            <value>A value stored in this node.</value>
        </member>
		
<!-- Codecs.XmpLocalizedTextNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" draft="yes">
            <summary>Represents a localized text node.</summary>
            <remarks><para>Nodes of this type contain languages identifier, specifying the language in which the text is provided.</para><para>Nodes of this type are described by items of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" /> type.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Add(System.Object,System.Object)" draft="yes">
            <summary>Adds an element with the provided key and value to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> object.</summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            <remarks><para>You can also use the <see cref="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Item(System.Object)" /> property to add new elements by setting the value of a key that does not exist in the dictionary. However, if the specified key already exists in the dictionary, setting the <see cref="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Item(System.Object)" /> property overwrites the old value. In contrast, the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> method throws an exeption if an element with the same key already exists in the dictionary.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.AddNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Adds an <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> object.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> descendant.</param>
            <remarks><para>This method is more convenient than the <see cref="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Add(System.Object,System.Object)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.FindKeysByNamespace(Aurigma.GraphicsMill.Codecs.XmpNamespace)" draft="yes">
            <summary>Returns an array of tags belonging to the specified namespace in the current dictionary.</summary>
            <param name="ns">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> for which the tags should be returned.</param>
            <returns>An array of tags belonging to the given namespace.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Item(System.Object)" draft="yes">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="key">The key of the element to get or set.</param>
            <value>The element with the specified key, or null if the key does not exist.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.Namespaces" draft="yes">
            <summary>Returns an array of namespaces stored in this dictionary.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> of all XMP fields stored in this dictionary.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNamespace,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> class with the specified name and namespace.</summary>
            <param name="ns">A namespace to which the new node belongs.</param>
            <param name="name">A name of the node.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> class with the specified name.</summary>
            <param name="name">A name of the node.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode.SetNode(Aurigma.GraphicsMill.Codecs.XmpNode)" draft="yes">
            <summary>Sets a new node to this dictionary.</summary>
            <param name="node">A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> to set.</param>
            <remarks><para>This method reads a key (tag name) from the provided <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> and inserts it into the dictionary instead of the node with the same tag name.</para></remarks>
        </member>
		
<!-- Codecs.XmpNamespace -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" draft="yes">
            <summary>Represents an XMP namespace.</summary>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.AddNamespace(System.String,System.String)" draft="yes">
            <summary>Adds a namespace to the collection.</summary>
            <param name="uri">The Uri of the namespace to add.</param>
            <param name="prefix">The prefix of the namespace to add.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> added to the collection.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.GetNamespaceByIndex(System.Int32)" draft="yes">
            <summary>Returns a namespace at the specified index.</summary>
            <param name="index">The zero-based index of the namespace to get.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> at the specified index.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.GetNamespaceByPrefix(System.String)" draft="yes">
            <summary>Returns a namespace with the specified prefix.</summary>
            <param name="prefix">The prefix of the namespace to get.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> with the specified prefix.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNamespace.GetNamespaceByUri(System.String)" draft="yes">
            <summary>Returns a namespace with the specified Uri.</summary>
            <param name="uri">The Uri of the namespace to get.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> with the specified Uri.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNamespace.NamespaceCount" draft="yes">
            <summary>Gets the number of namespaces stored in the static collection.</summary>
            <value>The total number of namespaces stored in the static collection.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNamespace.Prefix" draft="yes">
            <summary>Gets a prefix of this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" />.</summary>
            <value>A prefix of this namespace.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNamespace.Uri" draft="yes">
            <summary>Gets a Uri of this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" />.</summary>
            <value>A Uri of this namespace.</value>
        </member>
		
<!-- Codecs.XmpNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpNode" draft="yes">
            <summary>Represents a base class for all XMP properties.</summary>
            <remarks>This is a generic representation of an XMP node.</remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.CheckName(System.String)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.CopyTo(System.Array,System.Int32)" draft="yes">
            <summary>Copies the elements of this node to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied this node. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.Count" draft="yes">
            <summary>Gets the number of elements contained in this node.</summary>
            <value>The number of elements contained in this node.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> instance and is equivalent to this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />.</summary>
            <param name="other">The object to test.</param>
            <returns><c>true</c> if <i>object</i> is a <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> instance equivalent to this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.GetEnumerator" draft="yes">
            <summary>Returns an enumerator that iterates through this node.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.GetNamespaceByQualifiedName(System.String)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.GetQualifiedName(Aurigma.GraphicsMill.Codecs.XmpNamespace,System.String)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.IsSynchronized" draft="yes">
            <summary>Gets a value indicating whether access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" /> is synchronized (thread safe).</summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.Name" draft="yes">
            <summary>Gets a qualified XMP node name.</summary>
            <value>A qualified XMP node name.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.Namespace" draft="yes">
            <summary>Gets a namespace to which the node belongs.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNamespace" /> this node belongs to.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpNode.#ctor">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.NodeType" draft="yes">
            <summary>Gets an XMP type of the node.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNodeType" /> of the node.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpNode.SyncRoot" draft="yes">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />.</summary>
            <value>An object that can be used to synchronize access to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpNode" />.</value>
        </member>
		
<!-- Codecs.XmpNodeType -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpNodeType">
            <summary>Contains available XMP node types.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.AlternativeArray">
            <summary>An alternative array is a set of one or more values, one of which should be chosen. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.LocalizedText">
            <summary>A collection of localized text values. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.LocalizedTextItem">
            <summary>A single localized text value. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpLocalizedTextItemNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.OrderedArray">
            <summary>An ordered array is a list whose order is significant. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.Qualifier">
            <summary>Property qualifier. Any individual property value may have other properties attached to it; these attached properties are called property qualifiers. They are in effect "properties of properties." Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.SimpleProperty">
            <summary>A simple type has a single literal value. Simple types include familiar ones such as strings, booleans, integers and so on. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.Structure">
            <summary>A structured property consists of one or more named fields. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.XmpNodeType.UnorderedArray">
            <summary>An unordered array is a list of values whose order does not have significance. Corresponds to the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpArrayNode" /> class.</summary>
        </member>
		
<!-- Codecs.XmpStructNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" draft="yes">
            <summary>Represents a structured XMP property.</summary>
            <remarks><para>A structured property consists of one or more named fields. A field in a structure can itself be a structure or an array.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpStructNode.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpStructNode.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpStructNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNamespace,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" /> class with the specified name and namespace.</summary>
            <param name="ns">A namespace to which the new node belongs.</param>
            <param name="name">A name of the node.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpStructNode.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpStructNode" /> class with the specified name.</summary>
            <param name="name">A name of the node.</param>
        </member>
		
<!-- Codecs.XmpTagNames -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpTagNames" draft="yes">
            <summary>This class can be used as an enumeration of standard XMP tags.</summary>
            <remarks><para>When constructing an XMP tree you may use this class members as enumeration values if you need to write standard tags but do not want to write tag names manually (which is error-prone).</para><para>The property values returned by this class already contain a namespace prefix.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.AuxLens">
            <summary>Gets the aux:Lens tag.</summary>
            <value>aux:Lens tag.</value>
            <remarks><para>Lens information. Belongs to the EXIF schema for additional EXIF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.AuxSerialNumber">
            <summary>Gets the aux:SerialNumber tag.</summary>
            <value>aux:SerialNumber tag.</value>
            <remarks><para>Serial number. Belongs to the EXIF schema for additional EXIF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsAutoBrightness">
            <summary>Gets the crs:AutoBrightness tag.</summary>
            <value>crs:AutoBrightness tag.</value>
            <remarks><para>A value indicating if "Brightness" is adjusted automatically. Belongs to the Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsAutoContrast">
            <summary>Gets the crs:AutoContrast tag.</summary>
            <value>crs:AutoContrast tag.</value>
            <remarks><para>A value indicating if "Contrast" is adjusted automatically. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsAutoExposure">
            <summary>Gets the crs:AutoExposure tag.</summary>
            <value>crs:AutoExposure tag.</value>
            <remarks><para>A value indicating if "Exposure" is adjusted automatically. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsAutoShadows">
            <summary>Gets the crs:AutoShadows tag.</summary>
            <value>crs:AutoShadows tag.</value>
            <remarks><para>A value indicating if "Shadows" is adjusted automatically. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsBlueHue">
            <summary>Gets the crs:BlueHue tag.</summary>
            <value>crs:BlueHue tag.</value>
            <remarks><para>"Blue Hue" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsBlueSaturation">
            <summary>Gets the crs:BlueSaturation tag.</summary>
            <value>crs:BlueSaturation tag.</value>
            <remarks><para>"Blue Saturation" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsBrightness">
            <summary>Gets the crs:Brightness tag.</summary>
            <value>crs:Brightness tag.</value>
            <remarks><para>"Brightness" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCameraProfile">
            <summary>Gets the crs:CameraProfile tag.</summary>
            <value>crs:CameraProfile tag.</value>
            <remarks><para>"Camera Profile" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsChromaticAberrationB">
            <summary>Gets the crs:ChromaticAberration tag.</summary>
            <value>crs:ChromaticAberration tag.</value>
            <remarks><para>"Chromatic Aberration, Fix Blue/Yellow Fringe" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsChromaticAberrationR">
            <summary>Gets the crs:ChromaticAberration tag.</summary>
            <value>crs:ChromaticAberration tag.</value>
            <remarks><para>"Chromatic Aberration, Fix Red/Cyan Fringe" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsColorNoiseReduction">
            <summary>Gets the crs:ColorNoiseReducton tag.</summary>
            <value>crs:ColorNoiseReducton tag.</value>
            <remarks><para>"Color Noise Reducton" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsContrast">
            <summary>Gets the crs:Contrast tag.</summary>
            <value>crs:Contrast tag.</value>
            <remarks><para>"Contrast" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropAngle">
            <summary>Gets the crs:CropAngle tag.</summary>
            <value>crs:CropAngle tag.</value>
            <remarks><para>Angle of crop rectangle. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropBottom">
            <summary>Gets the crs:CropBottom tag.</summary>
            <value>crs:CropBottom tag.</value>
            <remarks><para>Bottom of crop rectangle. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropHeight">
            <summary>Gets the crs:CropHeight tag.</summary>
            <value>crs:CropHeight tag.</value>
            <remarks><para>Height of resulting cropped image. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropLeft">
            <summary>Gets the crs:CropLeft tag.</summary>
            <value>crs:CropLeft tag.</value>
            <remarks><para>Left of crop rectangle. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropRight">
            <summary>Gets the crs:CropRight tag.</summary>
            <value>crs:CropRight tag.</value>
            <remarks><para>Right of crop rectangle. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropTop">
            <summary>Gets the crs:CropTop tag.</summary>
            <value>crs:CropTop tag.</value>
            <remarks><para>Top of crop rectangle. Belongs to the Photoshop® Camera Raw schemaCrop.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropUnits">
            <summary>Gets the crs:CropUnits tag.</summary>
            <value>crs:CropUnits tag.</value>
            <remarks><para>Units for <see cref="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropWidth" /> and <see cref="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropHeight" />. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsCropWidth">
            <summary>Gets the crs:CropWidth tag.</summary>
            <value>crs:CropWidth tag.</value>
            <remarks><para>Width of resulting cropped image. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsExposure">
            <summary>Gets the crs:Exposure tag.</summary>
            <value>crs:Exposure tag.</value>
            <remarks><para>"Exposure" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsGreenHue">
            <summary>Gets the crs:GreenHue tag.</summary>
            <value>crs:GreenHue tag.</value>
            <remarks><para>"Green Hue" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsGreenSaturation">
            <summary>Gets the crs:GreenSaturation tag.</summary>
            <value>crs:GreenSaturation tag.</value>
            <remarks><para>"Green Saturation" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsHasCrop">
            <summary>Gets the crs:HasCrop tag.</summary>
            <value>crs:HasCrop tag.</value>
            <remarks><para>A value indicating if the image has a cropping rectangle. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsHasSettings">
            <summary>Gets the crs:HasSettings tag.</summary>
            <value>crs:HasSettings tag.</value>
            <remarks><para>A value indicating if non-default camera raw settings are used. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsLuminanceSmoothing">
            <summary>Gets the crs:LuminanceSmoothing tag.</summary>
            <value>crs:LuminanceSmoothing tag.</value>
            <remarks><para>"Luminance Smoothing" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsRawFileName">
            <summary>Gets the crs:RawFileName tag.</summary>
            <value>crs:RawFileName tag.</value>
            <remarks><para>A file name fo the raw file. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsRedHue">
            <summary>Gets the crs:RedHue tag.</summary>
            <value>crs:RedHue tag.</value>
            <remarks><para>"Red Hue" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsRedSaturation">
            <summary>Gets the crs:RedSaturation tag.</summary>
            <value>crs:RedSaturation tag.</value>
            <remarks><para>"Red Saturation" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsSaturation">
            <summary>Gets the crs:Saturation tag.</summary>
            <value>crs:Saturation tag.</value>
            <remarks><para>"Saturation" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsShadows">
            <summary>Gets the crs:Shadows tag.</summary>
            <value>crs:Shadows tag.</value>
            <remarks><para>"Shadows" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsShadowTint">
            <summary>Gets the crs:ShadowTint tag.</summary>
            <value>crs:ShadowTint tag.</value>
            <remarks><para>"Shadow Tint" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsSharpness">
            <summary>Gets the crs:Sharpness tag.</summary>
            <value>crs:Sharpness tag.</value>
            <remarks><para>"Sharpness" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsTemperature">
            <summary>Gets the crs:Temperature tag.</summary>
            <value>crs:Temperature tag.</value>
            <remarks><para>"Temperature" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsTint">
            <summary>Gets the crs:Tint tag.</summary>
            <value>crs:Tint tag.</value>
            <remarks><para>"Tint" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsToneCurve">
            <summary>Gets the crs:ToneCurve tag.</summary>
            <value>crs:ToneCurve tag.</value>
            <remarks><para>Tone curve. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsToneCurveName">
            <summary>Gets the crs:ToneCurveName tag.</summary>
            <value>crs:ToneCurveName tag.</value>
            <remarks><para>A name of the tone curve. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsVersion">
            <summary>Gets the crs:Version tag.</summary>
            <value>crs:Version tag.</value>
            <remarks><para>Version of a Camera Raw plugin. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsVignetteAmount">
            <summary>Gets the crs:VignettingAmount tag.</summary>
            <value>crs:VignettingAmount tag.</value>
            <remarks><para>"Vignetting Amount" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsVignetteMidpoint">
            <summary>Gets the crs:VignettingMidpoint tag.</summary>
            <value>crs:VignettingMidpoint tag.</value>
            <remarks><para>"Vignetting Midpoint" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.CrsWhiteBalance">
            <summary>Gets the crs:WhiteBalance tag.</summary>
            <value>crs:WhiteBalance tag.</value>
            <remarks><para>"White Balance" setting. Belongs to the Photoshop® Camera Raw schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCContributor">
            <summary>Gets the dc:Contributor tag.</summary>
            <value>dc:Contributor tag.</value>
            <remarks><para>Contributors to the resource (other than the authors). Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCCoverage">
            <summary>Gets the dc:Coverage tag.</summary>
            <value>dc:Coverage tag.</value>
            <remarks><para>Extent or scope of the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCCreator">
            <summary>Gets the dc:Creator tag.</summary>
            <value>dc:Creator tag.</value>
            <remarks><para>Authors of the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCDate">
            <summary>Gets the dc:Date tag.</summary>
            <value>dc:Date tag.</value>
            <remarks><para>Date(s) that something interesting happened to the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCDescription">
            <summary>Gets the dc:Description tag.</summary>
            <value>dc:Description tag.</value>
            <remarks><para>Textual description of the content of the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCFormat">
            <summary>Gets the dc:Format tag.</summary>
            <value>dc:Format tag.</value>
            <remarks><para>A MIME type. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCIdentifier">
            <summary>Gets the dc:Identifier tag.</summary>
            <value>dc:Identifier tag.</value>
            <remarks><para>Unique identifier of the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCLanguage">
            <summary>Gets the dc:Language tag.</summary>
            <value>dc:Language tag.</value>
            <remarks><para>Languages used in the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCPublisher">
            <summary>Gets the dc:Publisher tag.</summary>
            <value>dc:Publisher tag.</value>
            <remarks><para>Publishers. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCRelation">
            <summary>Gets the dc:Relation tag.</summary>
            <value>dc:Relation tag.</value>
            <remarks><para>Relationships to other documents. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCRights">
            <summary>Gets the dc:Rights tag.</summary>
            <value>dc:Rights tag.</value>
            <remarks><para>Informal rights statement. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCSource">
            <summary>Gets the dc:Source tag.</summary>
            <value>dc:Source tag.</value>
            <remarks><para>Unique identifier of the work from which this resource was derived. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCSubject">
            <summary>Gets the dc:Subject tag.</summary>
            <value>dc:Subject tag.</value>
            <remarks><para>Topic of the content of the resource. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCTitle">
            <summary>Gets the dc:Title tag.</summary>
            <value>dc:Title tag.</value>
            <remarks><para>Title of the document. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.DCType">
            <summary>Gets the dc:Type tag.</summary>
            <value>dc:Type tag.</value>
            <remarks><para>Document type. Belongs to the Dublin Core schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifApertureValue">
            <summary>Gets the exif:ApertureValue tag.</summary>
            <value>exif:ApertureValue tag.</value>
            <remarks><para>EXIF tag 37378, 0x9202. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifBrightnessValue">
            <summary>Gets the exif:BrightnessValue tag.</summary>
            <value>exif:BrightnessValue tag.</value>
            <remarks><para>EXIF tag 37379, 0x9203. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifCFAPattern">
            <summary>Gets the exif:CFAPattern tag.</summary>
            <value>exif:CFAPattern tag.</value>
            <remarks><para>EXIF tag 41730, 0xA302. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifColorSpace">
            <summary>Gets the exif:ColorSpace tag.</summary>
            <value>exif:ColorSpace tag.</value>
            <remarks><para>EXIF tag 40961, 0xA001. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifComponentsConfiguration">
            <summary>Gets the exif:ComponentsConfiguration tag.</summary>
            <value>exif:ComponentsConfiguration tag.</value>
            <remarks><para>EXIF tag 37121, 0x9101. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifCompressedBitsPerPixel">
            <summary>Gets the exif:CompressedBitsPerPixel tag.</summary>
            <value>exif:CompressedBitsPerPixel tag.</value>
            <remarks><para>EXIF tag 37122, 0x9102. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifContrast">
            <summary>Gets the exif:Contrast tag.</summary>
            <value>exif:Contrast tag.</value>
            <remarks><para>EXIF tag 41992, 0xA408. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifCustomRendered">
            <summary>Gets the exif:CustomRendered tag.</summary>
            <value>exif:CustomRendered tag.</value>
            <remarks><para>EXIF tag 41985, 0xA401. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifDateTimeDigitized">
            <summary>Gets the exif:DateTimeDigitized tag.</summary>
            <value>exif:DateTimeDigitized tag.</value>
            <remarks><para>EXIF tag 36868, 0x9004 (primary) and 37522, 0x9292 (subseconds). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifDateTimeOriginal">
            <summary>Gets the exif:DateTimeOriginal tag.</summary>
            <value>exif:DateTimeOriginal tag.</value>
            <remarks><para>EXIF tag 36867, 0x9003 (primary) and 37521, 0x9291 (subseconds). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifDeviceSettingDescription">
            <summary>Gets the exif:DeviceSettingDescription tag.</summary>
            <value>exif:DeviceSettingDescription tag.</value>
            <remarks><para>EXIF tag 41995, 0xA40B. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifDigitalZoomRatio">
            <summary>Gets the exif:DigitalZoomRatio tag.</summary>
            <value>exif:DigitalZoomRatio tag.</value>
            <remarks><para>EXIF tag 41988, 0xA404. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExifVersion">
            <summary>Gets the exif:ExifVersion tag.</summary>
            <value>exif:ExifVersion tag.</value>
            <remarks><para>EXIF tag 36864, 0x9000. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExposureBiasValue">
            <summary>Gets the exif:ExposureBiasValue tag.</summary>
            <value>exif:ExposureBiasValue tag.</value>
            <remarks><para>EXIF tag 37380, 0x9204. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExposureIndex">
            <summary>Gets the exif:ExposureIndex tag.</summary>
            <value>exif:ExposureIndex tag.</value>
            <remarks><para>EXIF tag 41493, 0xA215. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExposureMode">
            <summary>Gets the exif:ExposureMode tag.</summary>
            <value>exif:ExposureMode tag.</value>
            <remarks><para>EXIF tag 41986, 0xA402. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExposureProgram">
            <summary>Gets the exif:ExposureProgram tag.</summary>
            <value>exif:ExposureProgram tag.</value>
            <remarks><para>EXIF tag 34850, 0x8822. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifExposureTime">
            <summary>Gets the exif:ExposureTime tag.</summary>
            <value>exif:ExposureTime tag.</value>
            <remarks><para>EXIF tag 33434, 0x829A. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFileSource">
            <summary>Gets the exif:FileSource tag.</summary>
            <value>exif:FileSource tag.</value>
            <remarks><para>EXIF tag 41728, 0xA300. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFlash">
            <summary>Gets the exif:Flash tag.</summary>
            <value>exif:Flash tag.</value>
            <remarks><para>EXIF tag 37385, 0x9209. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFlashEnergy">
            <summary>Gets the exif:FlashEnergy tag.</summary>
            <value>exif:FlashEnergy tag.</value>
            <remarks><para>EXIF tag 41483, 0xA20B. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFlashpixVersion">
            <summary>Gets the exif:FlashpixVersion tag.</summary>
            <value>exif:FlashpixVersion tag.</value>
            <remarks><para>EXIF tag 40960, 0xA000. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFNumber">
            <summary>Gets the exif:FNumber tag.</summary>
            <value>exif:FNumber tag.</value>
            <remarks><para>EXIF tag 33437, 0x829D. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFocalLength">
            <summary>Gets the exif:FocalLength tag.</summary>
            <value>exif:FocalLength tag.</value>
            <remarks><para>EXIF tag 37386, 0x920A. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFocalLengthIn35mmFilm">
            <summary>Gets the exif:FocalLengthIn35mmFilm tag.</summary>
            <value>exif:FocalLengthIn35mmFilm tag.</value>
            <remarks><para>EXIF tag 41989, 0xA405. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFocalPlaneResolutionUnit">
            <summary>Gets the exif:FocalPlaneResolutionUnit tag.</summary>
            <value>exif:FocalPlaneResolutionUnit tag.</value>
            <remarks><para>EXIF tag 41488, 0xA210. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFocalPlaneXResolution">
            <summary>Gets the exif:FocalPlaneXResolution tag.</summary>
            <value>exif:FocalPlaneXResolution tag.</value>
            <remarks><para>EXIF tag 41486, 0xA20E. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifFocalPlaneYResolution">
            <summary>Gets the exif:FocalPlaneYResolution tag.</summary>
            <value>exif:FocalPlaneYResolution tag.</value>
            <remarks><para>EXIF tag 41487, 0xA20F. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGainControl">
            <summary>Gets the exif:GainControl tag.</summary>
            <value>exif:GainControl tag.</value>
            <remarks><para>EXIF tag 41991, 0xA407. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsAltitude">
            <summary>Gets the exif:GpsAltitude tag.</summary>
            <value>exif:GpsAltitude tag.</value>
            <remarks><para>GPS tag 6, 0x06. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsAltitudeRef">
            <summary>Gets the exif:GpsAltitudeRef tag.</summary>
            <value>exif:GpsAltitudeRef tag.</value>
            <remarks><para>GPS tag 5, 0x5. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsAreaInformation">
            <summary>Gets the exif:GpsAreaInformation tag.</summary>
            <value>exif:GpsAreaInformation tag.</value>
            <remarks><para>GPS tag 28, 0x1C. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestBearing">
            <summary>Gets the exif:GpsDestBearing tag.</summary>
            <value>exif:GpsDestBearing tag.</value>
            <remarks><para>GPS tag 24, 0x18. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestBearingRef">
            <summary>Gets the exif:GpsDestBearingRef tag.</summary>
            <value>exif:GpsDestBearingRef tag.</value>
            <remarks><para>GPS tag 23, 0x17. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestDistance">
            <summary>Gets the exif:GpsDestDistance tag.</summary>
            <value>exif:GpsDestDistance tag.</value>
            <remarks><para>GPS tag 26, 0x1A. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestDistanceRef">
            <summary>Gets the exif:GpsDestDistanceRef tag.</summary>
            <value>exif:GpsDestDistanceRef tag.</value>
            <remarks><para>GPS tag 25, 0x19. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestLatitude">
            <summary>Gets the exif:GpsDestLatitude tag.</summary>
            <value>exif:GpsDestLatitude tag.</value>
            <remarks><para>GPS tag 20, 0x14 (position) and 19, 0x13 (North/South). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDestLongitude">
            <summary>Gets the exif:GpsDestLongitude tag.</summary>
            <value>exif:GpsDestLongitude tag.</value>
            <remarks><para>GPS tag 22, 0x16 (position) and 21, 0x15 (East/West). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDifferential">
            <summary>Gets the exif:GpsDifferential tag.</summary>
            <value>exif:GpsDifferential tag.</value>
            <remarks><para>GPS tag 30, 0x1E. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsDOP">
            <summary>Gets the exif:GpsDOP tag.</summary>
            <value>exif:GpsDOP tag.</value>
            <remarks><para>GPS tag 11, 0x0B. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsImgDirection">
            <summary>Gets the exif:GpsImgDirection tag.</summary>
            <value>exif:GpsImgDirection tag.</value>
            <remarks><para>GPS tag 17, 0x11. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsImgDirectionRef">
            <summary>Gets the exif:GpsImgDirectionRef tag.</summary>
            <value>exif:GpsImgDirectionRef tag.</value>
            <remarks><para>GPS tag 16, 0x10. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsLatitude">
            <summary>Gets the exif:GpsLatitude tag.</summary>
            <value>exif:GpsLatitude tag.</value>
            <remarks><para>GPS tag 2, 0x02 (position) and 1, 0x01 (North/South). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsLongitude">
            <summary>Gets the exif:GpsLongitude tag.</summary>
            <value>exif:GpsLongitude tag.</value>
            <remarks><para>GPS tag 4, 0x04 (position) and 3, 0x03 (East/West). Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsMapDatum">
            <summary>Gets the exif:GpsMapDatum tag.</summary>
            <value>exif:GpsMapDatum tag.</value>
            <remarks><para>GPS tag 18, 0x12. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsMeasureMode">
            <summary>Gets the exif:GpsMeasureMode tag.</summary>
            <value>exif:GpsMeasureMode tag.</value>
            <remarks><para>GPS tag 10, 0x0A. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsProcessingMethod">
            <summary>Gets the exif:GpsProcessingMethod tag.</summary>
            <value>exif:GpsProcessingMethod tag.</value>
            <remarks><para>GPS tag 27, 0x1B. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsSatellites">
            <summary>Gets the exif:GpsSatellites tag.</summary>
            <value>exif:GpsSatellites tag.</value>
            <remarks><para>GPS tag 8, 0x08. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsSpeed">
            <summary>Gets the exif:GpsSpeed tag.</summary>
            <value>exif:GpsSpeed tag.</value>
            <remarks><para>GPS tag 13, 0x0D. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsSpeedRef">
            <summary>Gets the exif:GpsSpeedRef tag.</summary>
            <value>exif:GpsSpeedRef tag.</value>
            <remarks><para>GPS tag 12, 0x0C. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsStatus">
            <summary>Gets the exif:GpsStatus tag.</summary>
            <value>exif:GpsStatus tag.</value>
            <remarks><para>GPS tag 9, 0x09. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsTimeStamp">
            <summary>Gets the exif:GpsTimeStamp tag.</summary>
            <value>exif:GpsTimeStamp tag.</value>
            <remarks><para>GPS tag 29 (date), 0x1D, and, and GPS tag 7 (time), 0x07. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsTrack">
            <summary>Gets the exif:GpsTrack tag.</summary>
            <value>exif:GpsTrack tag.</value>
            <remarks><para>GPS tag 15, 0x0F. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsTrackRef">
            <summary>Gets the exif:GpsTrackRef tag.</summary>
            <value>exif:GpsTrackRef tag.</value>
            <remarks><para>GPS tag 14, 0x0E. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifGpsVersionID">
            <summary>Gets the exif:GpsVersionID tag.</summary>
            <value>exif:GpsVersionID tag.</value>
            <remarks><para>GPS tag 0, 0x00. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifImageUniqueID">
            <summary>Gets the exif:ImageUniqueID tag.</summary>
            <value>exif:ImageUniqueID tag.</value>
            <remarks><para>EXIF tag 42016, 0xA420. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifISOSpeedRatings">
            <summary>Gets the exif:ISOSpeedRatings tag.</summary>
            <value>exif:ISOSpeedRatings tag.</value>
            <remarks><para>EXIF tag 34855, 0x8827. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifLightSource">
            <summary>Gets the exif:LightSource tag.</summary>
            <value>exif:LightSource tag.</value>
            <remarks><para>EXIF tag 37384, 0x9208. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifMaxApertureValue">
            <summary>Gets the exif:MaxApertureValue tag.</summary>
            <value>exif:MaxApertureValue tag.</value>
            <remarks><para>EXIF tag 37381, 0x9205. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifMeteringMode">
            <summary>Gets the exif:MeteringMode tag.</summary>
            <value>exif:MeteringMode tag.</value>
            <remarks><para>EXIF tag 37383, 0x9207. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifOECF">
            <summary>Gets the exif:OECF tag.</summary>
            <value>exif:OECF tag.</value>
            <remarks><para>EXIF tag 34856, 0x8828. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifPixelXDimension">
            <summary>Gets the exif:PixelXDimension tag.</summary>
            <value>exif:PixelXDimension tag.</value>
            <remarks><para>EXIF tag 40962, 0xA002. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifPixelYDimension">
            <summary>Gets the exif:PixelYDimension tag.</summary>
            <value>exif:PixelYDimension tag.</value>
            <remarks><para>EXIF tag 40963, 0xA003. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifRelatedSoundFile">
            <summary>Gets the exif:RelatedSoundFile tag.</summary>
            <value>exif:RelatedSoundFile tag.</value>
            <remarks><para>EXIF tag 40964, 0xA004. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSaturation">
            <summary>Gets the exif:Saturation tag</summary>
            <value>exif:Saturation tag.</value>
            <remarks><para>EXIF tag 41993, 0xA409. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSceneCaptureType">
            <summary>Gets the exif:SceneCaptureType tag.</summary>
            <value>exif:SceneCaptureType tag.</value>
            <remarks><para>EXIF tag 41990, 0xA406. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSceneType">
            <summary>Gets the exif:SceneType tag.</summary>
            <value>exif:SceneType tag.</value>
            <remarks><para>EXIF tag 41729, 0xA301. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSensingMethod">
            <summary>Gets the exif:SensingMethod tag.</summary>
            <value>exif:SensingMethod tag.</value>
            <remarks><para>EXIF tag 41495, 0xA217. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSharpness">
            <summary>Gets the exif:Sharpness tag.</summary>
            <value>exif:Sharpness tag.</value>
            <remarks><para>EXIF tag 41994, 0xA40A. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifShutterSpeedValue">
            <summary>Gets the exif:ShutterSpeedValue tag.</summary>
            <value>exif:ShutterSpeedValue tag.</value>
            <remarks><para>EXIF tag 37377, 0x9201. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSpatialFrequencyResponse">
            <summary>Gets the exif:SpatialFrequencyResponse tag.</summary>
            <value>exif:SpatialFrequencyResponse tag.</value>
            <remarks><para>EXIF tag 41484, 0xA20C. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSpectralSensitivity">
            <summary>Gets the exif:SpectralSensitivity tag.</summary>
            <value>exif:SpectralSensitivity tag.</value>
            <remarks><para>EXIF tag 34852, 0x8824. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSubjectArea">
            <summary>Gets the exif:SubjectArea tag.</summary>
            <value>exif:SubjectArea tag.</value>
            <remarks><para>EXIF tag 37396, 0x9214. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSubjectDistance">
            <summary>Gets the exif:SubjectDistance tag.</summary>
            <value>exif:SubjectDistance tag.</value>
            <remarks><para>EXIF tag 37382, 0x9206. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSubjectDistanceRange">
            <summary>Gets the exif:SubjectDistanceRange tag.</summary>
            <value>exif:SubjectDistanceRange tag.</value>
            <remarks><para>EXIF tag 41996, 0xA40C. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifSubjectLocation">
            <summary>Gets the exif:SubjectLocation tag.</summary>
            <value>exif:SubjectLocation tag.</value>
            <remarks><para>EXIF tag 41492, 0xA214. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifUserComment">
            <summary>Gets the exif:UserComment tag.</summary>
            <value>exif:UserComment tag.</value>
            <remarks><para>EXIF tag 37510, 0x9286. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.ExifWhiteBalance">
            <summary>Gets the exif:WhiteBalance tag.</summary>
            <value>exif:WhiteBalance tag.</value>
            <remarks><para>EXIF tag 41987, 0xA403. Belongs to the EXIF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PdfKeywords">
            <summary>Gets the pdf:Keywords tag.</summary>
            <value>pdf:Keywords tag.</value>
            <remarks><para>Keywords. Belongs to the Adobe® PDF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PdfPDFVersion">
            <summary>Gets the pdf:PDFVersion tag.</summary>
            <value>pdf:PDFVersion tag.</value>
            <remarks><para>PDF file version.Belongs to the Adobe® PDF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PdfProducer">
            <summary>Gets the pdf:Producer tag.</summary>
            <value>pdf:Producer tag.</value>
            <remarks><para>Name of the tool that created the PDF document. Belongs to the Adobe® PDF schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopAuthorsPosition">
            <summary>Gets the photoshop:AuthorsPosition tag.</summary>
            <value>photoshop:AuthorsPosition tag.</value>
            <remarks><para>By-line title.Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopCaptionWriter">
            <summary>Gets the photoshop:CaptionWriter tag.</summary>
            <value>photoshop:CaptionWriter tag.</value>
            <remarks><para>Writer/editor.Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopCategory">
            <summary>Gets the photoshop:Category tag..</summary>
            <value>photoshop:Category tag.</value>
            <remarks><para>Category. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopCity">
            <summary>Gets the photoshop:City tag.</summary>
            <value>photoshop:City tag.</value>
            <remarks><para>City. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopCountry">
            <summary>Gets the photoshop:Country tag.</summary>
            <value>photoshop:Country tag.</value>
            <remarks><para>Country/primary location. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopCredit">
            <summary>Gets the photoshop:Credit tag.</summary>
            <value>photoshop:Credit tag.</value>
            <remarks><para>Credit. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopDateCreated">
            <summary>Gets the photoshop:DateCreated tag.</summary>
            <value>photoshop:DateCreated tag.</value>
            <remarks><para>Date the intellectual content of the document was created. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopHeadline">
            <summary>Gets the photoshop:Headline tag.</summary>
            <value>photoshop:Headline tag.</value>
            <remarks><para>Headline. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopInstructions">
            <summary>Gets the photoshop:Instructions tag.</summary>
            <value>photoshop:Instructions tag.</value>
            <remarks><para>Special instructions. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopSource">
            <summary>Gets the photoshop:Source tag.</summary>
            <value>photoshop:Source tag.</value>
            <remarks><para>Source. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopState">
            <summary>Gets the photoshop:State tag.</summary>
            <value>photoshop:State tag.</value>
            <remarks><para>Province/state. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopSupplementalCategories">
            <summary>Gets the photoshop:SupplementalCategories tag.</summary>
            <value>photoshop:SupplementalCategories tag.</value>
            <remarks><para>Supplemental category. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopTransmissionReference">
            <summary>Gets the photoshop:TransmissionReference tag.</summary>
            <value>photoshop:TransmissionReference tag.</value>
            <remarks><para>Original transmission reference. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.PhotoshopUrgency">
            <summary>Gets the photoshop:Urgency tag.</summary>
            <value>photoshop:Urgency tag.</value>
            <remarks><para>Urgency. Belongs to the Photoshop® schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffArtist">
            <summary>Gets the tiff:Artist tag.</summary>
            <value>tiff:Artist tag.</value>
            <remarks><para>TIFF tag 315, 0x13B. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffBitsPerSample">
            <summary>Gets the tiff:BitsPerSample tag.</summary>
            <value>tiff:BitsPerSample tag.</value>
            <remarks><para>TIFF tag 258, 0x102. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffCompression">
            <summary>Gets the tiff:Compression tag.</summary>
            <value>tiff:Compression tag.</value>
            <remarks><para>TIFF tag 259, 0x103. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffCopyright">
            <summary>Gets the tiff:Copyright tag.</summary>
            <value>tiff:Copyright tag.</value>
            <remarks><para>TIFF tag 33432, 0x8298. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffDateTime">
            <summary>Gets the tiff:DateTime tag.</summary>
            <value>tiff:DateTime tag.</value>
            <remarks><para>TIFF tag 306, 0x132 (primary) and EXIF tag 37520, 0x9290 (subseconds). Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffImageDescription">
            <summary>Gets the tiff:ImageDescription tag.</summary>
            <value>tiff:ImageDescription tag.</value>
            <remarks><para>TIFF tag 270, 0x10E. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffImageLength">
            <summary>Gets the tiff:ImageLength tag.</summary>
            <value>tiff:ImageLength tag.</value>
            <remarks><para>TIFF tag 257, 0x101. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffImageWidth">
            <summary>Gets the tiff:ImageWidth tag.</summary>
            <value>tiff:ImageWidth tag.</value>
            <remarks><para>TIFF tag 256, 0x100. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffMake">
            <summary>Gets the tiff:Make tag.</summary>
            <value>tiff:Make tag.</value>
            <remarks><para>TIFF tag 271, 0x10F. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffModel">
            <summary>Gets the tiff:Model tag.</summary>
            <value>tiff:Model tag.</value>
            <remarks><para>TIFF tag 272, 0x110. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffOrientation">
            <summary>Gets the tiff:Orientation tag.</summary>
            <value>tiff:Orientation tag.</value>
            <remarks><para>TIFF tag 274, 0x112. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffPhotometricInterpretation">
            <summary>Gets the tiff:PhotometricInterpretation tag.</summary>
            <value>tiff:PhotometricInterpretation tag.</value>
            <remarks><para>TIFF tag 262, 0x106. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffPlanarConfiguration">
            <summary>Gets the tiff:PlanarConfiguration tag.</summary>
            <value>tiff:PlanarConfiguration tag.</value>
            <remarks><para>TIFF tag 284, 0x11C. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffPrimaryChromaticities">
            <summary>Gets the tiff:PrimaryChromaticities tag.</summary>
            <value>tiff:PrimaryChromaticities tag.</value>
            <remarks><para>TIFF tag 319. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffReferenceBlackWhite">
            <summary>Gets the tiff:ReferenceBlackWhite tags.</summary>
            <value>tiff:ReferenceBlackWhite tag.</value>
            <remarks><para>TIFF tag 532, 0x214. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffResolutionUnit">
            <summary>Gets the tiff:ResolutionUnit tag.</summary>
            <value>tiff:ResolutionUnit tag.</value>
            <remarks><para>TIFF tag 296, 0x128. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffSamplesPerPixel">
            <summary>Gets the tiff:SamplesPerPixel tag.</summary>
            <value>tiff:SamplesPerPixel tag.</value>
            <remarks><para>TIFF tag 277, 0x115. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffSoftware">
            <summary>Gets the tiff:Software tag.</summary>
            <value>tiff:Software tag.</value>
            <remarks><para>TIFF tag 305, 0x131. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffTransferFunction">
            <summary>Gets the tiff:TransferFunction tag.</summary>
            <value>tiff:TransferFunction tag.</value>
            <remarks><para>TIFF tag 301, 0x12D. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffWhitePoint">
            <summary>Gets the tiff:WhitePoint tag.</summary>
            <value>tiff:WhitePoint tag.</value>
            <remarks><para>TIFF tag 318, 0x13E. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffXResolution">
            <summary>Gets the tiff:XResolution tag.</summary>
            <value>tiff:XResolution tag.</value>
            <remarks><para>TIFF tag 282, 0x11A. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffYCbCrCoefficients">
            <summary>Gets the tiff:YCbCrCoefficients tag.</summary>
            <value>tiff:YCbCrCoefficients tag.</value>
            <remarks><para>TIFF tag 529, 0x211. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffYCbCrPositioning">
            <summary>Gets the tiff:YCbCrPositioning tag.</summary>
            <value>tiff:YCbCrPositioning tag.</value>
            <remarks><para>TIFF tag 531, 0x213. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffYCbCrSubSampling">
            <summary>Gets the tiff:YCbCrSubSampling tag.</summary>
            <value>tiff:YCbCrSubSampling tag.</value>
            <remarks><para>TIFF tag 530, 0x212. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.TiffYResolution">
            <summary>Gets the tiff:YResolution tag.</summary>
            <value>tiff:YResolution tag.</value>
            <remarks><para>TIFF tag 283, 0x11B. Belongs to the EXIF schema for TIFF properties.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpAdvisory">
            <summary>Gets the xmp:Advisory tag.</summary>
            <value>xmp:Advisory tag.</value>
            <remarks><para>Properties that were edited outside the authoring application. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpBaseURL">
            <summary>Gets the xmp:BaseURL tag.</summary>
            <value>xmp:BaseURL tag.</value>
            <remarks><para>Base URL for relative URLs in the document content. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpBJJobRef">
            <summary>Gets the xmpBJ:JobRef tag.</summary>
            <value>xmpBJ:JobRef tag.</value>
            <remarks><para>External job management file. Belongs to the XMP basic job ticket schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpCreateDate">
            <summary>Gets the xmp:CreateDate tag.</summary>
            <value>xmp:CreateDate tag.</value>
            <remarks><para>ate and time the resource was originally created. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpCreatorTool">
            <summary>Gets the xmp:CreatorTool tag.</summary>
            <value>xmp:CreatorTool tag.</value>
            <remarks><para>Name of the first known tool used to create the resource. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAbsPeakAudioFilePath">
            <summary>Gets the xmpDM:AbsPeakAudioFilePath tag.</summary>
            <value>xmpDM:AbsPeakAudioFilePath tag.</value>
            <remarks><para>The absolute path to the file's peak audio file. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAlbum">
            <summary>Gets the xmpDM:Album tag.</summary>
            <value>xmpDM:Album tag.</value>
            <remarks><para>Name of the album. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAltTapeName">
            <summary>Gets the xmpDM:AltTapeName tag.</summary>
            <value>xmpDM:AltTapeName tag.</value>
            <remarks><para>Name of the tape from which the clip was captured. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAltTimecode">
            <summary>Gets the xmpDM:AltTimecode tag.</summary>
            <value>xmpDM:AltTimecode tag.</value>
            <remarks><para>Timecode set by the user. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMArtist">
            <summary>Gets the xmpDM:Artist tag.</summary>
            <value>xmpDM:Artist tag.</value>
            <remarks><para>Name of the artist or artists. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAudioChannelType">
            <summary>Gets the xmpDM:AudioChannelType tag.</summary>
            <value>xmpDM:AudioChannelType tag.</value>
            <remarks><para>Audio channel type. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAudioCompressor">
            <summary>Gets the xmpDM:AudioCompressor tag.</summary>
            <value>xmpDM:AudioCompressor tag.</value>
            <remarks><para>Audio compression used. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAudioModDate">
            <summary>Gets the xmpDM:AudioModDate tag.</summary>
            <value>xmpDM:AudioModDate tag.</value>
            <remarks><para>Date and time when the audio was last modified. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAudioSampleRate">
            <summary>Gets the xmpDM:AudioSampleRate tag.</summary>
            <value>xmpDM:AudioSampleRate tag.</value>
            <remarks><para>Audio sample rate. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMAudioSampleType">
            <summary>Gets the xmpDM:AudioSampleType tag.</summary>
            <value>xmpDM:AudioSampleType tag.</value>
            <remarks><para>Audio sample type. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMBeatSpliceParams">
            <summary>Gets the xmpDM:BeatSpliceParams tag.</summary>
            <value>xmpDM:BeatSpliceParams tag.</value>
            <remarks><para>Additional parameters for "Beat Splice" stretch mode. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMComposer">
            <summary>Gets the xmpDM:Composer tag.</summary>
            <value>xmpDM:Composer tag.</value>
            <remarks><para>Composer's name. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMContributedMedia">
            <summary>Gets the xmpDM:ContributedMedia tag.</summary>
            <value>xmpDM:ContributedMedia tag.</value>
            <remarks><para>Unordered list of all media used to create this media. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMCopyright">
            <summary>Gets the xmpDM:Copyright tag.</summary>
            <value>xmpDM:Copyright tag.</value>
            <remarks><para>Copyright information. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMDuration">
            <summary>Gets the xmpDM:Duration tag.</summary>
            <value>xmpDM:Duration tag.</value>
            <remarks><para>Duration of the media file. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMEngineer">
            <summary>Gets the xmpDM:Engineer tag.</summary>
            <value>xmpDM:Engineer tag.</value>
            <remarks><para>Engineer's name. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMFileDataRate">
            <summary>Gets the xmpDM:FileDataRate tag.</summary>
            <value>xmpDM:FileDataRate tag.</value>
            <remarks><para>File data rate in megabytes per second. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMGenre">
            <summary>Gets the xmpDM:Genre tag.</summary>
            <value>xmpDM:Genre tag.</value>
            <remarks><para>Name of the genre. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMInstrument">
            <summary>Gets the xmpDM:Instrument tag.</summary>
            <value>xmpDM:Instrument tag.</value>
            <remarks><para>Musical instrument. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMIntroTime">
            <summary>Gets the xmpDM:IntroTime tag.</summary>
            <value>xmpDM:IntroTime tag.</value>
            <remarks><para>Duration of lead time for queuing music. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMKey">
            <summary>Gets the xmpDM:Key tag.</summary>
            <value>xmpDM:Key tag.</value>
            <remarks><para>The audio's musical key. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMLogComment">
            <summary>Gets the xmpDM:LogComment tag.</summary>
            <value>xmpDM:LogComment tag.</value>
            <remarks><para>User's log comments. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMLoop">
            <summary>Gets the xmpDM:Loop tag.</summary>
            <value>xmpDM:Loop tag.</value>
            <remarks><para>Value indicating if the clip can be looped seamlessly. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMMarkers">
            <summary>Gets the xmpDM:Markers tag.</summary>
            <value>xmpDM:Markers tag.</value>
            <remarks><para>Ordered list of markers. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMMetadataModDate">
            <summary>Gets the xmpDM:MetadataModDate tag.</summary>
            <value>xmpDM:MetadataModDate tag.</value>
            <remarks><para>Date and time when the metadata was last modified. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMNumberOfBeats">
            <summary>Gets the xmpDM:NumberOfBeats tag.</summary>
            <value>xmpDM:NumberOfBeats tag.</value>
            <remarks><para>Number of beats. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMOutCue">
            <summary>Gets the xmpDM:OutCue tag.</summary>
            <value>xmpDM:OutCue tag.</value>
            <remarks><para>Time at which to fade out. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMProjectRef">
            <summary>Gets the xmpDM:ProjectRef tag.</summary>
            <value>xmpDM:ProjectRef tag.</value>
            <remarks><para>Reference to the project that created this file. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMPullDown">
            <summary>Gets the xmpDM:PullDown tag.</summary>
            <value>xmpDM:PullDown tag.</value>
            <remarks><para>Sampling phase of film to be converted to video (pull-down). Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMRelativePeakAudioFilePath">
            <summary>Gets the xmpDM:RelativePeakAudioFilePath tag.</summary>
            <value>xmpDM:RelativePeakAudioFilePath tag.</value>
            <remarks><para>Relative path to the file's peak audio file. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMRelativeTimestamp">
            <summary>Gets the xmpDM:RelativeTimestamp tag.</summary>
            <value>xmpDM:RelativeTimestamp tag.</value>
            <remarks><para>Start time of the media inside the audio project. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMReleaseDate">
            <summary>Gets the xmpDM:ReleaseDate tag.</summary>
            <value>xmpDM:ReleaseDate tag.</value>
            <remarks><para>Date the title was released. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMResampleParams">
            <summary>Gets the xmpDM:ResampleParams tag.</summary>
            <value>xmpDM:ResampleParams tag.</value>
            <remarks><para>Additional parameters for "Resample" stretch mode. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMScaleType">
            <summary>Gets the xmpDM:ScaleType tag.</summary>
            <value>xmpDM:ScaleType tag.</value>
            <remarks><para>Musical scale used in the music. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMScene">
            <summary>Gets the xmpDM:Scene tag.</summary>
            <value>xmpDM:Scene tag.</value>
            <remarks><para>Name of the scene. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMShotDate">
            <summary>Gets the xmpDM:ShotDate tag.</summary>
            <value>xmpDM:ShotDate tag.</value>
            <remarks><para>Date and time when the video was shot. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMShotLocation">
            <summary>Gets the xmpDM:ShotLocation tag.</summary>
            <value>xmpDM:ShotLocation tag.</value>
            <remarks><para>Name of the location where the video was shot. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMShotName">
            <summary>Gets the xmpDM:ShotName tag.</summary>
            <value>xmpDM:ShotName tag.</value>
            <remarks><para>Name of the shot or take. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMSpeakerPlacement">
            <summary>Gets the xmpDM:SpeakerPlacement tag.</summary>
            <value>xmpDM:SpeakerPlacement tag.</value>
            <remarks><para>Description of the speaker angles from center front in degrees. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMStartTimecode">
            <summary>Gets the xmpDM:StartTimecode tag.</summary>
            <value>xmpDM:StartTimecode tag.</value>
            <remarks><para>Timecode of the first frame of video in the file, as obtained from the device control. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMStretchMode">
            <summary>Gets the xmpDM:StretchMode tag.</summary>
            <value>xmpDM:StretchMode tag.</value>
            <remarks><para>Audio stretch mode. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMTapeName">
            <summary>Gets the xmpDM:TapeName tag.</summary>
            <value>xmpDM:TapeName tag.</value>
            <remarks><para>Name of the tape from which the clip was captured. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMTempo">
            <summary>Gets the xmpDM:Tempo tag.</summary>
            <value>xmpDM:Tempo tag.</value>
            <remarks><para>Audio's tempo. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMTimeScaleParams">
            <summary>Gets the xmpDM:TimeScaleParams tag.</summary>
            <value>xmpDM:TimeScaleParams tag.</value>
            <remarks><para>Additional parameters for "Time-Scale" stretch mode. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMTimeSignature">
            <summary>Gets the xmpDM:TimeSignature tag.</summary>
            <value>xmpDM:TimeSignature tag.</value>
            <remarks><para>Time signature of the music. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMTrackNumber">
            <summary>Gets the xmpDM:TrackNumber tag.</summary>
            <value>xmpDM:TrackNumber tag.</value>
            <remarks><para>Numeric value indicating the order of the audio file within its original recording. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoAlphaMode">
            <summary>Gets the xmpDM:VideoAlphaMode tag.</summary>
            <value>xmpDM:VideoAlphaMode tag.</value>
            <remarks><para>Alpha mode. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoAlphaPremultipleColor">
            <summary>Gets the xmpDM:VideoAlphaPremultipleColor tag.</summary>
            <value>xmpDM:VideoAlphaPremultipleColor tag.</value>
            <remarks><para>Color in CMYK or RGB to be used as the pre-multiple color when alpha mode is pre-multiplied. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoAlphaUnityIsTransparent">
            <summary>Gets the xmpDM:VideoAlphaUnityIsTransparent tag</summary>
            <value>xmpDM:VideoAlphaUnityIsTransparent tag.</value>
            <remarks><para>Value indicating if the unity is clear or opaque. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoColorSpace">
            <summary>Gets the xmpDM:VideoColorSpace tag.</summary>
            <value>xmpDM:VideoColorSpace tag.</value>
            <remarks><para>Color space. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoCompressor">
            <summary>Gets the xmpDM:VideoCompressor tag.</summary>
            <value>xmpDM:VideoCompressor tag.</value>
            <remarks><para>Video compression used. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoFrameRate">
            <summary>Gets the xmpDM:VideoFrameRate tag.</summary>
            <value>xmpDM:VideoFrameRate tag.</value>
            <remarks><para>Video frame rate. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoFrameSize">
            <summary>Gets the xmpDM:VideoFrameSize tag.</summary>
            <value>xmpDM:VideoFrameSize tag.</value>
            <remarks><para>Frame size. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoModDate">
            <summary>Gets the xmpDM:VideoModDate tag.</summary>
            <value>xmpDM:VideoModDate tag.</value>
            <remarks><para>Date and time when the video was last modified. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoPixelAspectRatio">
            <summary>Gets the xmpDM:VideoPixelAspectRatio tag.</summary>
            <value>xmpDM:VideoPixelAspectRatio tag.</value>
            <remarks><para>Aspect ratio, expressed as ht/wd. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpDMVideoPixelDepth">
            <summary>Gets the xmpDM:VideoPixelDepth tag.</summary>
            <value>xmpDM:VideoPixelDepth tag.</value>
            <remarks><para>Size in bits of each color component of a pixel. Belongs to the XMP dynamic media schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpIdentifier">
            <summary>Gets the xmp:Identifier tag.</summary>
            <value>xmp:Identifier tag.</value>
            <remarks><para>Unordered array of text strings that unambiguously identify the resource within a given context. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpIdqScheme">
            <summary>Gets the xmpidq:Scheme tag.</summary>
            <value>xmpidq:Scheme tag.</value>
            <remarks><para>Name of the formal identification system.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpLabel">
            <summary>Gets the xmp:Label tag.</summary>
            <value>xmp:Label tag.</value>
            <remarks><para>Word or short phrase that identifies a document as a member of a user-defined collection. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMetadataDate">
            <summary>Gets the xmp:MetadataDate tag.</summary>
            <value>xmp:MetadataDate tag.</value>
            <remarks><para>Date and time that any metadata for this resource was last changed.Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMDerivedFrom">
            <summary>Gets the xmpMM:DerivedFrom tag.</summary>
            <value>xmpMM:DerivedFrom tag.</value>
            <remarks><para>Reference to the original document from which this one is derived. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMDocumentID">
            <summary>Gets the xmpMM:DocumentID tag.</summary>
            <value>xmpMM:DocumentID tag.</value>
            <remarks><para>Common identifier for all versions and renditions of a document. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMHistory">
            <summary>Gets the xmpMM:History tag.</summary>
            <value>xmpMM:History tag.</value>
            <remarks><para>Ordered array of high-level user actions that resulted in this resource. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMLastURL">
            <summary>Gets the xmpMM:LastURL tag.</summary>
            <value>xmpMM:LastURL tag.</value>
            <remarks><para>The tag returned by this property is deprecated. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMManagedFrom">
            <summary>Gets the xmpMM:ManagedFrom tag.</summary>
            <value>xmpMM:ManagedFrom tag.</value>
            <remarks><para>Reference to the document as it was prior to becoming managed. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMManager">
            <summary>Gets the xmpMM:Manager tag.</summary>
            <value>xmpMM:Manager tag.</value>
            <remarks><para>Name of the asset management system that manages this resource. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMManagerVariant">
            <summary>Gets the xmpMM:ManagerVariant tag.</summary>
            <value>xmpMM:ManagerVariant tag.</value>
            <remarks><para>Particular variant of the asset management system. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMManageTo">
            <summary>Gets the xmpMM:ManageTo tag.</summary>
            <value>xmpMM:ManageTo tag.</value>
            <remarks><para>URI identifying the managed resource to the asset management system. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMManageUI">
            <summary>Gets the xmpMM:ManageUI tag.</summary>
            <value>xmpMM:ManageUI tag.</value>
            <remarks><para>URI that can be used to access information about the managed resource through a web browser. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMRenditionClass">
            <summary>Gets the xmpMM:RenditionClass tag.</summary>
            <value>xmpMM:RenditionClass tag.</value>
            <remarks><para>Rendition class name for this resource. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMRenditionOf">
            <summary>Gets the xmpMM:RenditionOf tag.</summary>
            <value>xmpMM:RenditionOf tag.</value>
            <remarks><para>The tag returned by this property is deprecated. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMRenditionParams">
            <summary>Gets the xmpMM:RenditionParams tag.</summary>
            <value>xmpMM:RenditionParams tag.</value>
            <remarks><para>Value that can be used to provide additional rendition parameters. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMSaveID">
            <summary>Gets the xmpMM:SaveID tag.</summary>
            <value>xmpMM:SaveID tag.</value>
            <remarks><para>The tag returned by this property is deprecated. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMVersionID">
            <summary>Gets the xmpMM:VersionID tag.</summary>
            <value>xmpMM:VersionID tag.</value>
            <remarks><para>Document version identifier for this resource. Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpMMVersions">
            <summary>Gets the xmpMM:Versions tag.</summary>
            <value>xmpMM:Versions tag.</value>
            <remarks><para>Version history associated with this resource.  Belongs to the XMP media management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpModifyDate">
            <summary>Gets the xmp:ModifyDate tag.</summary>
            <value>xmp:ModifyDate tag.</value>
            <remarks><para>Date and time the resource was last modified. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpNickname">
            <summary>Gets the xmp:Nickname tag.</summary>
            <value>xmp:Nickname tag.</value>
            <remarks><para>Short informal name for the resource. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRating">
            <summary>Gets the xmp:Rating tag.</summary>
            <value>xmp:Rating tag.</value>
            <remarks><para>Number that indicates a document's status relative to other documents. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRightsCertificate">
            <summary>Gets the xmpRights:Certificate tag.</summary>
            <value>xmpRights:Certificate tag.</value>
            <remarks><para>Online rights management certificate. Belongs to the XMP rights management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRightsMarked">
            <summary>Gets the xmpRights:Marked tag.</summary>
            <value>xmpRights:Marked tag.</value>
            <remarks><para>Value indicating that this is a rights-managed resource. Belongs to the XMP rights management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRightsOwner">
            <summary>Gets the xmpRights:Owner tag.</summary>
            <value>xmpRights:Owner tag.</value>
            <remarks><para>Legal owner(s) of the resource. Belongs to the XMP rights management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRightsUsageTerms">
            <summary>Gets the xmpRights:UsageTerms tag.</summary>
            <value>xmpRights:UsageTerms tag.</value>
            <remarks><para>Text instructions on how the resource can be legally used. Belongs to the XMP rights management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpRightsWebStatement">
            <summary>Gets the xmpRights:WebStatement tag.</summary>
            <value>xmpRights:WebStatement tag.</value>
            <remarks><para>Location of a web page describing the owner and/or rights statement for this resource. Belongs to the XMP rights management schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpThumbnails">
            <summary>Gets the xmp:Thumbnails tag.</summary>
            <value>xmp:Thumbnails tag.</value>
            <remarks><para>Thumbnail images for a file. Belongs to the basic XMP schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpTPgColorants">
            <summary>Gets the xmpTPg:Colorants tag.</summary>
            <value>xmpTPg:Colorants tag.</value>
            <remarks><para>Colorants (swatches) that are used in the document. Belongs to the XMP paged-text schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpTPgFonts">
            <summary>Gets the xmpTPg:Fonts tag.</summary>
            <value>xmpTPg:Fonts tag.</value>
            <remarks><para>Fonts that are used in the document. Belongs to the XMP paged-text schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpTPgMaxPageSize">
            <summary>Gets the xmpTPg:MaxPageSize tag.</summary>
            <value>xmpTPg:MaxPageSize tag.</value>
            <remarks><para>Size of the largest page in the document. Belongs to the XMP paged-text schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpTPgNPages">
            <summary>Gets the xmpTPg:NPages tag.</summary>
            <value>xmpTPg:NPages tag.</value>
            <remarks><para>Number of pages in the document. Belongs to the XMP paged-text schema.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpTagNames.XmpTPgPlateNames">
            <summary>Gets the xmpTPg:PlateNames tag.</summary>
            <value>xmpTPg:PlateNames tag.</value>
            <remarks><para>Plate names that are needed to print the document. Belongs to the XMP paged-text schema.</para></remarks>
        </member>
		
<!-- Codecs.XmpValueNode -->
        <member name="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" draft="yes">
            <summary>Represents a simple XMP property.</summary>
            <remarks><para>A structured property consists of one literal value. Simple types include strings, booleans, integers, real numbers, and so on.</para></remarks>
            <seealso href="xmp-metadata.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpValueNode.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpValueNode.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpValueNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNodeType,System.String,Aurigma.GraphicsMill.Codecs.XmpNamespace,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" /> class with the specified type, name, value, and namespace.</summary>
            <param name="nodeType">A type of the node.</param>
            <param name="value">A value to be stored in the node.</param>
            <param name="ns">A namespace to which the new node belongs.</param>
            <param name="name">A name of the node.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" /> class with the specified settings.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpValueNode.#ctor(Aurigma.GraphicsMill.Codecs.XmpNodeType,System.String,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.XmpValueNode" /> class with the specified type, name, and value.</summary>
            <param name="nodeType">A type of the node.</param>
            <param name="value">A value to be stored in the node.</param>
            <param name="name">A name of the node.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.XmpValueNode.ToString" draft="yes">
            <summary>Returns a string that represents this node.</summary>
            <returns>A string that represents this node.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.XmpValueNode.Value" draft="yes">
            <summary>Gets or sets a value stored in this node.</summary>
            <value>A value that is stored in this node.</value>
        </member>

<!-- Codecs.ClippingPath namespace -->
        <member name="N:Aurigma.GraphicsMill.Codecs.ClippingPath" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Codecs.ClippingPath" /> namespace contains classes intended to work with clipping paths.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Codecs.ClippingPath.FillRule" draft="yes">
            <summary>Specifies a filling rule for clipping paths.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ClippingPath.FillRule.Combine" draft="yes">
            <summary>Fills in combined clipping paths.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ClippingPath.FillRule.Exclude" draft="yes">
            <summary>Fills in excluded clipping paths.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ClippingPath.FillRule.Intersect" draft="yes">
            <summary>Fills in intersected clipping paths.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Codecs.ClippingPath.FillRule.Subtract" draft="yes">
            <summary>Fills in subtracted clipping paths.</summary>
        </member>
		
<!-- Codecs.ClippingPath.Path -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" draft="yes">
            <summary>Represents a clipping path.</summary>
            <remarks>This class allows you to read a clipping path from JPEG, TIFF, and PSD files.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.#ctor(Aurigma.GraphicsMill.Codecs.ClippingPath.Path)">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" /> class from the specified existing path.</summary>
            <param name="path">The <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.ApplyTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>Applies the specified linear transfromation to this path.</summary>
            <param name="matrix">The matrix of the transformation.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Create(Aurigma.GraphicsMill.Codecs.AdobeResourceBlock)" draft="yes">
            <summary>Creates a new instance of the <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" /> using the specified <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" />.</summary>
            <param name="adobeResource">The <see cref="T:Aurigma.GraphicsMill.Codecs.AdobeResourceBlock" /> to create a new <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" /> from.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.CreateGraphicsPath(System.Int32,System.Int32)" draft="yes">
            <summary>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath">System.Drawing.Drawing2D.GraphicsPath</see> from this clipping path using the destination width and height.</summary>
            <param name="width">The destination width.</param>
            <param name="height">The destination height.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representing this clipping path.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Data" draft="yes">
            <summary>Gets original clipping paths.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Path" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Finalize">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Name" draft="yes">
            <summary>Gets a name of this clipping path.</summary>
            <value>The name of the clipping path.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Path.Subpaths" draft="yes">
            <summary>Gets a collection of sub-paths.</summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing <see cref="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Subpath" />s.</value>
        </member>
		
<!-- Codecs.ClippingPath.PathBezierPoint -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ClippingPath.PathBezierPoint" draft="yes">
            <summary>Represents a Bezier point in the clipping path.</summary>
            <remarks><note>Coordinates of the clipping path points a in range [0, 1].</note></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.PathBezierPoint.LeavingControl" draft="yes">
            <summary>Gets a leaving control point of this Bezier point.</summary>
            <value>A <see cref="T:System.Drawing.PointF" /> structure that specifies the location of a leaving control point of this Bezier point.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.PathBezierPoint.PrecedingControl" draft="yes">
            <summary>Gets a preceding control point of this Bezier point.</summary>
            <value>A <see cref="T:System.Drawing.PointF" /> structure that specifies the location of a preceding control point of this Bezier point.</value>
        </member>
		
<!-- Codecs.ClippingPath.PathPoint -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ClippingPath.PathPoint" draft="yes">
            <summary>Represents a point in the clipping path.</summary>
            <remarks><note>Coordinates of the clipping path points a in range [0, 1].</note></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.PathPoint.Anchor" draft="yes">
            <summary>Gets an anchor of this point.</summary>
            <value>A <see cref="T:System.Drawing.PointF" /> structure that specifies the location of this point.</value>
        </member>
		
<!-- Codecs.ClippingPath.Subpath -->
        <member name="T:Aurigma.GraphicsMill.Codecs.ClippingPath.Subpath" draft="yes">
            <summary>Represents a sub-path.</summary>
            <remarks><note>Coordinates of the clipping path points a in range [0, 1].</note></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Subpath.FillRule" draft="yes">
            <summary>Specifies a filling rule for a subpath.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Subpath.IsClosed" draft="yes">
            <summary>Gets a value indicating whether this sub-path is closed.</summary>
            <value><c>true</c> if the sub-path is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.ClippingPath.Subpath.Points" draft="yes">
            <summary>Gets a collection of points.</summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing points describing this sub-path.</value>
        </member>

<!-- Color -->
        <member name="T:Aurigma.GraphicsMill.Color" draft="yes">
            <summary>Represents the base class for classes that contain color values.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.~Color">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.ChannelCount" draft="yes">
            <summary>Gets a number of channels available in this color.</summary>
            <value>The number of channels available in this color.</value>
            <remarks>Alpha channel is always available. That's why RGB colors always return 4 (three color channels + alpha channel), grayscale color returns 2 (luminosity channel + alpha channel), etc.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.Profile" draft="yes">
            <summary>Gets or sets a color profile associated with this color.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.ColorSpace" draft="yes">
            <summary>Gets a color space of the color.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> of the color.</value>
            <remarks>Each class derived from the <see cref="T:Aurigma.GraphicsMill.Color" /> represents its own color space. It means that if, for example, this property returns <see cref="F:Aurigma.GraphicsMill.ColorSpace.Rgb" />, you can cast this <see cref="T:Aurigma.GraphicsMill.Color" /> variable to <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class. However casting to derived classes is considered as bad style from object-oriented point of view, so it is recommended to use it only if it is necessary indeed.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.IsTransparent" draft="yes">
            <summary>Gets a value indicating whether this color is transparent.</summary>
            <value><c>true</c> if color is transparent; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.Convert(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Converts this color to the specified pixel format.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert this color to.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color" /> representing the result of the conversion.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Color" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.Color" /> instance and is equivalent to this <see cref="T:Aurigma.GraphicsMill.Color" />.</summary>
            <param name="obj">The object to test.</param>
            <returns><c>true</c> if <i>obj</i> is a <see cref="T:Aurigma.GraphicsMill.Color" /> instance equivalent to this <see cref="T:Aurigma.GraphicsMill.Color" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.FromGdiPlusColor(System.Drawing.Color)" draft="yes">
            <summary>Get the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> constructed from a <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value.</summary>
            <param name="color">A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value to construct the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> from.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.RgbColor" /> constructed from a <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.Color" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.Color" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.Item(System.Int32)" draft="yes">
            <summary>Gets a value stored in specified channel of this color.</summary>
            <param name="i">The number of the channel.</param>
            <value>A value stored in specified channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.op_Equality(Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Color" /> instances are equivalent.</summary>
            <param name="c1">The <see cref="T:Aurigma.GraphicsMill.Color" /> that is to the left of the equality operator.</param>
            <param name="c2">The <see cref="T:Aurigma.GraphicsMill.Color" /> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Color" /> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.op_Implicit(Aurigma.GraphicsMill.Color)~System.Drawing.Color" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Color">Aurigma.GraphicsMill.Color</see> to a <see cref="T:System.Drawing.Color">System.Drawing.Color</see>.</summary>
            <param name="color">The <see cref="T:Aurigma.GraphicsMill.Color">Aurigma.GraphicsMill.Color</see> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents the converted <see cref="T:Aurigma.GraphicsMill.Color">Aurigma.GraphicsMill.Color</see>.</returns>
            <remarks>Note, no color management is applied in this case and colors may be reproduced inaccurately.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.op_Implicit(System.Drawing.Color)~Aurigma.GraphicsMill.Color" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Color">System.Drawing.Color</see> to a <see cref="T:Aurigma.GraphicsMill.Color">Aurigma.GraphicsMill.Color</see>.</summary>
            <param name="color">The <see cref="T:System.Drawing.Color">System.Drawing.Color</see> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color">Aurigma.GraphicsMill.Color</see> that represents the converted <see cref="T:System.Drawing.Color">System.Drawing.Color</see>.</returns>
            <remarks>Classes casted from the <see cref="T:System.Drawing.Color">System.Drawing.Color</see> always has <see cref="T:Aurigma.GraphicsMill.RgbColor" /> type.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.op_Inequality(Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Color" /> instances are different.</summary>
            <param name="c1">The <see cref="T:Aurigma.GraphicsMill.Color" /> that is to the left of the inequality operator.</param>
            <param name="c2">The <see cref="T:Aurigma.GraphicsMill.Color" /> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Color" /> instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Color.PixelFormat" draft="yes">
            <summary>Gets a pixel format of this color.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the current color.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.ScaleAlpha(System.Single)" draft="yes">
            <summary>Scales the alpha channel.</summary>
            <param name="scale">The scale factor in range <c>[0, 1]</c>.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.ToGdiPlusColor" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Color">System.Drawing.Color</see> containing the same color value as this <see cref="T:Aurigma.GraphicsMill.Color" /> does.</summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> containing the same color value as this <see cref="T:Aurigma.GraphicsMill.Color" /> does.</returns>
            <remarks>Note, no color management is applied in this case and colors may be reproduced inaccurately.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Color.ToInt32" draft="yes">
            <summary>Gets a non-extended (8 bit per channel) numeric representation of the <see cref="T:Aurigma.GraphicsMill.Color" />.</summary>
            <returns>A numeric representation of this <see cref="T:Aurigma.GraphicsMill.Color" />.</returns>
            <remarks>If color has larger than 4 channels, all extra channels will be truncated. For example, <see cref="T:Aurigma.GraphicsMill.CmykColor" /> will return only CMYK quad instead of ACMYK quintuple; alpha channel will be truncated.</remarks>
        </member>
		
<!-- ColorAdjustmentProvider -->
        <member name="T:Aurigma.GraphicsMill.ColorAdjustmentProvider" draft="yes">
            <summary>Contains methods and properties used to provide color adjustment and tone correction (brightness/contrast, levels, hue/saturation/lightness adjustment, etc.).</summary>
            <remarks><para>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorAdjustment">Bitmap.ColorAdjustment</see> property. You should use it if you need to apply tone and color correction algorithms on the bitmap without creating appropriate transform object (contained in <see cref="N:Aurigma.GraphicsMill.Transforms" /> namespace). Therefore you can write only single line of code to make a tone correction.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AdjustHsl(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Adjusts the bitmap in HSL color space.</summary>
            <param name="hue">The hue modifier value in range [-1, 1] (degrees normalized at 360).</param>
            <param name="saturation">The saturation modifier value in range [-1, 1].</param>
            <param name="lightness">The lightness modifier value in range [-1, 1].</param>
            <remarks><para>This method supports the <i>hue</i>, <i>saturation</i>, and <i>lightness</i> settings. The specified values are added to appropriate components in HSL color space to each pixel.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.ApplyLut(Aurigma.GraphicsMill.Transforms.Lut)" draft="yes">
            <summary>Performs intensity transformation of the bitmap using the specified look-up table (LUT).</summary>
            <param name="lut">A <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> which specifies a look-up table for this LUT transform.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoBrightness" draft="yes">
            <summary>Automatically adjusts brightness of the bitmap.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoContrast" draft="yes">
            <summary>Automatically adjusts contrast of the bitmap.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoLevels" draft="yes">
            <summary>Automatically applies levels correction to the bitmap.</summary>
            <overloads><summary>Automatically applies levels correction to the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoLevels(Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Automatically applies levels correction to the bitmap using the specified histogram mode.</summary>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoLevels(System.Single)" draft="yes">
            <summary>Automatically applies levels correction to the bitmap using the specified threshold.</summary>
            <param name="threshold">The threshold level on which correction should be based.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.AutoLevels(System.Single,Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Automatically applies levels correction to the bitmap using the specified threshold and histogram mode.</summary>
            <param name="threshold">The threshold level on which correction should be based.</param>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Brightness(System.Single)" draft="yes">
            <summary>Corrects a brightness of the bitmap.</summary>
            <param name="amount">The brightness modifier in range [-1, 1].</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.BrightnessContrast(System.Single,System.Single)" draft="yes">
            <summary>Corrects brightness and contrast of the bitmap.</summary>
            <param name="brightnessAmount">The brightness modifier in range [-1, 1].</param>
            <param name="contrastAmount">The contrast modifier in range [-1, 1]. Minimum value (-1) will produce absolutely gray image, neutral value (0) does no effect, maximum value (1) makes the image extremely posterized.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.ChannelBalance(System.Single[],System.Single[])" draft="yes">
            <summary>Adjusts the channel balance of the bitmap.</summary>
            <param name="addends">The array of integer values in range [-max, max] which will be added to appropriate channels of all pixels. <c>max</c> is 255 (for non-extended pixel formats) or 65535 (for extended pixel formats).</param>
            <param name="multipliers">The array of float values in range [-1, 1] which will be multiplied with appropriate channels of all pixels. These values are normalized to 255 (for non-extended pixel formats) or 65535 (for extended pixel formats).</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Contrast(System.Single)" draft="yes">
            <summary>Corrects a contrast of the bitmap.</summary>
            <param name="amount">The contrast modifier in range [-1, 1]. Minimum value (-1) will produce absolutely gray image, neutral value (0) does no effect, maximum value (1) makes the image extremely posterized.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Desaturate" draft="yes">
            <summary>Desaturates the bitmap.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.HistogramEqualize" draft="yes">
            <summary>Applies a histogram equalization to the bitmap.</summary>
            <remarks><para>Histogram equalization algorithm is used for automatically enhancing the image contrast. The main idea of this algorithm is to build a look-up table (LUT) which makes the bitmap histogram equalized (all histogram entries are equal each other). Actually the histogram is never equalized absolutely, however this algorithm makes it as much as possible.</para></remarks>
            <overloads><summary>Applies a histogram equalization to the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.HistogramEqualize(Aurigma.GraphicsMill.Histogram)" draft="yes">
            <summary>Applies a histogram equalization to the bitmap using the specified histogram.</summary>
            <param name="histogram">A <see cref="T:Aurigma.GraphicsMill.Histogram" /> to equalize.</param>
            <remarks><para>Histogram equalization algorithm is used for automatically enhancing the image contrast. The main idea of this algorithm is to build a look-up table (LUT) which makes the bitmap histogram equalized (all histogram entries are equal each other). Actually the histogram is never equalized absolutely, however this algorithm makes it as much as possible.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.HistogramEqualize(Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Applies a histogram equalization to the bitmap using the specified histogram mode.</summary>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> specifying how to build histogram.</param>
            <remarks><para>Histogram equalization algorithm is used for automatically enhancing the image contrast. The main idea of this algorithm is to build a look-up table (LUT) which makes the bitmap histogram equalized (all histogram entries are equal each other). Actually the histogram is never equalized absolutely, however this algorithm makes it as much as possible.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Invert" draft="yes">
            <summary>Inverts all colors in the bitmap.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Levels(System.Single,System.Single,System.Single,System.Single,System.Single,Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Applies levels correction to the bitmap.</summary>
            <param name="minimumLevel">The minimum output level in range [0, 1].</param>
            <param name="maximumLevel">The maximum output level in range [0, 1].</param>
            <param name="shadows">The shadows level modifier in range [0, 1].</param>
            <param name="midtones">The midtones modifier in range [0.1, 10].</param>
            <param name="highlights">The highlights level modifier in range [0, 1].</param>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting.</param>
            <remarks><para>Using this method you can apply a tone correction similar to Adobe® Photoshop® Levels effect. Input paramaters work in the same way as appropriate sliders in Adobe® Photoshop®.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorAdjustmentProvider.Solarize" draft="yes">
            <summary>Apply a solarize effect to the bitmap.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorManagementProvider" draft="yes">
            <summary>Contains methods and properties used to provide color management.</summary>
            <remarks><para>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorManagement">Bitmap.ColorManagement</see> property. You should use it if you need to apply color management during color conversions, drawing, and other operations where it is applicable.</para><para>To choose the color management engine, use the <see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.ColorManagementEngine" /> property. You can specify an output profile (<see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.DestinationProfile" /> property) and profile for target device (<see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.TargetDeviceProfile" /> property). A color management intent parameter is accessible through the <see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.TransformationIntent" /> property.</para><para>After you set color management up, you can apply color conversions using the <see cref="Overload:Aurigma.GraphicsMill.ColorManagementProvider.Convert" /> methods.</para></remarks>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#cmykToRgbCMInPlace"></code></example>
            <seealso cref="P:Aurigma.GraphicsMill.Bitmap.ColorManagement" />
<seealso href="converting-color-with-color-management.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color used when alpha channel is flatten.</summary>
            <value>The background color. The default value is white color.</value>
            <remarks>This property makes sense only when you convert from pixel format which supports alpha channel to pixel format which does not.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.ColorManagementEngine" draft="yes">
            <summary>Gets or sets color management engine which will be used during image transformation. Graphics Mill supports the following engines: LittleCMS and Adobe CMM. The property also allows disabling color management and perform transformation without color matching.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.ColorManagementEngine" /> to use.</value>
            <remarks><para>Color management will be applied during transformation of image between color formats in case if all the following conditions are met:</para><list type="number"><item><description>This property is set to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" /> or <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" />.</description></item><item><description>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> which needs to be transformed has a <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile" /> initialized with a correct color profile (e.g. it is embedded color profile loaded from image file, or this property is initialized after the image has been loaded or created).</description></item><item><description>An output color profile is initialized via the <see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.DestinationProfile" /> property.</description></item></list><para>If you do not need to apply color management during image transformation, set this property to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" />.</para></remarks>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#selectInPlace"></code></example>
            <seealso href="converting-color-with-color-management.htm" />
			<seealso href="selecting-color-management-engine.htm" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.DefaultSourceProfile" draft="yes">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.DeviceLinkProfile" draft="yes">
            <summary>Gets or sets a device link color profile.</summary>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#deviceLinkProfile"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorManagementProvider.Convert(Aurigma.GraphicsMill.ColorSpace,System.Boolean,System.Boolean)" draft="yes">
            <summary>Converts the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to the specified color space.</summary>
            <param name="colorSpace">A <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> to convert the bitmap to.</param>
            <param name="hasAlpha"><c>true</c> if the bitmap will have alpha channel after conversion; otherwise <c>false</c>.</param>
            <param name="isExtended"><c>true</c> if the bitmap will be exteneded after conversion; otherwise <c>false</c>.</param>
            <overloads><summary>Converts the <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorManagementProvider.Convert(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Converts the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to the specified pixel format.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert the bitmap to.</param>
            <remarks>During conversion it uses default conversion parameters such as dithering, palette type, etc.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.DestinationPixelFormat" draft="yes">
            <summary>Gets or sets a destination pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert an image to. The default value is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" />.</value>
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.DestinationProfile" draft="yes">
            <summary>Gets or sets the output color profile.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> specifying an output color profile.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorManagementProvider.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.ColorManagementProvider" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorManagementProvider.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.Dithering" draft="yes">
            <summary>Gets or sets a dithering algorithm used to emulate missing halftones.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.DitheringType" /> used during color reduction to emulate missing halftones. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.DitheringType.FloydSteinberg" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.DitheringIntensity" draft="yes">
            <summary>Gets or sets a dithering intensity.</summary>
            <value>The dithering intensity in range [0, 1]. The default value is 1.0.</value>
            <remarks>Small values of dithering intensity makes dithering less visible (if it is 0, the result is the same as for <see cref="F:Aurigma.GraphicsMill.Transforms.DitheringType.None" /> dithering type).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.Opacity" draft="yes">
            <summary>Gets or sets a value to initialize alpha channel when converting from pixel format which does not support alpha to pixel format which does.</summary>
            <value>The total opacity of an image in range [0, 1]. The default value is 1.0.</value>
            <remarks>If 0, image is completely transparent, if 1, image is completely opaque.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.Palette" draft="yes">
            <summary>Gets or sets a palette used during conversion to indexed pixel formats.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> containing a palette used when <see cref="P:Aurigma.GraphicsMill.Transforms.DestinationPixelFormat" /> is one of indexed formats.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.TargetDeviceProfile" draft="yes">
            <summary>Gets or sets the target device profile used for chain transformations.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> of the target device.</value>
            <remarks><para>This profile is used to preview on one device how the image will be looking at another one. For example, let's assume you want to display on the screen how the image will be looking after being printed by specific printer. In this case set:</para><list type="number"><item><term>Output profile (<see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.DestinationProfile" />)</term><description> to monitor profile.</description></item><item><term>Target device profile (<see cref="P:Aurigma.GraphicsMill.ColorManagementProvider.TargetDeviceProfile" />)</term><description> to printer profile.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.TransformationIntent" draft="yes">
            <summary>Gets or sets the intent which defines gamut mapping method.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent" /> defining gamut mapping method.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorManagementProvider.TransparentIndexThreshold" draft="yes">
            <summary>Gets or sets a transparency threshold.</summary>
            <value>The threshold is range [0, 255]. The default value is 128.</value>
            <remarks><para>When building a palette during color reduction for an image which should be saved to GIF, you need to have the only one transparent color. However during color reduction you may get a number of colors with a different level of transparency. To avoid this, use this property. All alpha channel values which are greater or equal to this value will be changed to 255 (fully opaque), otherwise it will be 0.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorPalette" draft="yes">
            <summary>Represents a palette, i.e. an array of color values.</summary>
            <remarks><para>Color palettes are used in indexed bitmaps to store colors. Each pixel of the indexed bitmap is an index you should pass to <see cref="P:Aurigma.GraphicsMill.ColorPalette.Item(System.Int32)" /> to get an actual color this pixel represents. These indices should not exceed total number of palette entries which you can get through <see cref="P:Aurigma.GraphicsMill.ColorPalette.Count" /> property.</para><para>Since the palettes never store more than 256 entries, only few of 16 millions 24-bit RGB colors are available in the palette. That's why if you need change a color of some pixel, you cannot pass arbitrary color. You should find nearest color in the palette and pass its index instead. To convert the color into index in this palette, you can use <see cref="M:Aurigma.GraphicsMill.ColorPalette.FindNearestIndex(Aurigma.GraphicsMill.RgbColor)" /> method. Note, this method works quite slow, that's why you should cache nearest index if possible.</para></remarks>
            <seealso href="color-depth.htm" />
<seealso cref="P:Aurigma.GraphicsMill.Bitmap.Palette" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.~ColorPalette">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Clone" draft="yes">
            <summary>Returns a full copy of this <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> instance.</summary>
            <returns>An object containing a full copy of this color palette.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorPalette.Count" draft="yes">
            <summary>Returns a number of colors in the palette.</summary>
            <value>The number of colors in the palette.</value>
            <remarks>A number of colors in palette depends on the color depth of the image where it is used. 1-bit bitmaps can have only 2 colors, 4-bit bitmaps - 16 colors, 8-bit bitmaps - 256 colors. 8 bit is a maximum bit depth for indexed images, so this property never exceed 256.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Create(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> containing colors generated from a given bitmap.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to create this palette from.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class instance.</returns>
            <overloads><summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> containing colors generated from a given bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Create(Aurigma.GraphicsMill.Bitmap,System.Int32)" draft="yes">
            <summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> with a given size containing colors generated from a given bitmap.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to create this palette from.</param>
            <param name="entryCount">The number of colors in the palette.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Create(Aurigma.GraphicsMill.Bitmap,System.Int32,Aurigma.GraphicsMill.Transforms.ColorQuantizationAlgorithm)" draft="yes">
            <summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> with a given size containing colors generated from a given bitmap using the specified quantiztion algorithm.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to create this palette from.</param>
            <param name="entryCount">The number of colors in the palette.</param>
            <param name="quantizationAlgorithm">A color quantiztion algorithm used to reduce colors.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Create(Aurigma.GraphicsMill.Bitmap,System.Int32,Aurigma.GraphicsMill.Transforms.ColorQuantizationAlgorithm,System.Int32)" draft="yes">
            <summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> with a given size containing colors generated from a given bitmap using the specified quantiztion algorithm.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to create this palette from.</param>
            <param name="entryCount">The number of colors in the palette.</param>
            <param name="quantizationAlgorithm">A color quantiztion algorithm used to reduce colors.</param>
            <param name="paletteAlphaThreshold">The alpha channel threshold.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> instance and is equivalent to this <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</summary>
            <param name="obj">The object to test.</param>
            <returns><c>true</c> if <i>obj</i> is a <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> instance equivalent to this <see cref="T:Aurigma.GraphicsMill.ColorPalette" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.FindNearestIndex(Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Returns an index of the color in this palette closest to a given one.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> to find.</param>
            <returns>Th index of the palette entry which is closest to a given color.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.GetEnumerator" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</summary>
            <returns>An enumerator for the entire <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.GetEnumeratorBase" draft="yes">
            <summary>Returns an enumerator for the entire <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:Aurigma.GraphicsMill.ColorPalette" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorPalette.HasAlpha" draft="yes">
            <summary>Gets a value indicating whether this palette support transparency.</summary>
            <value><c>true</c> if the palette support transparency; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorPalette.Item(System.Int32)" draft="yes">
            <summary>Gets or sets a palette entry at the specified index.</summary>
            <param name="itemIndex">The zero-based index of the entry to get or set. It should vary in range [0, <see cref="P:Aurigma.GraphicsMill.ColorPalette.Count">entries count</see> - 1].</param>
            <value>The <see cref="T:Aurigma.GraphicsMill.RgbColor" /> at the specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.#ctor(Aurigma.GraphicsMill.ColorPalette)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class from the specified existing palette.</summary>
            <param name="palette">The <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> to be copied.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.#ctor(Aurigma.GraphicsMill.ColorPaletteType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class using the specified type.</summary>
            <param name="colorPaletteType">A <see cref="T:Aurigma.GraphicsMill.ColorPaletteType" /> specifying the palette type.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class using the specified size.</summary>
            <param name="entryCount">The number of colors in the palette.</param>
            <remarks>All entries of the palette created with this constructor will have the same color value (black). So you need fill the palette entries yourself using <see cref="P:Aurigma.GraphicsMill.ColorPalette.Item(System.Int32)" /> property.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.#ctor(System.Collections.Generic.ICollection{Aurigma.GraphicsMill.RgbColor})" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class using the specified collection of colors.</summary>
            <param name="entries">An <see cref="System.Collections.Generic.ICollection{Aurigma.GraphicsMill.RgbColor}" /> of colors to initialize the palette with.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.#ctor(System.Drawing.Imaging.ColorPalette)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> class by copying colors from the specified <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> object.</summary>
            <param name="palette">The <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.op_Implicit(Aurigma.GraphicsMill.ColorPalette)~System.Drawing.Imaging.ColorPalette" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.ColorPalette">Aurigma.GraphicsMill.ColorPalette</see> to a <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see>.</summary>
            <param name="palette">The <see cref="T:Aurigma.GraphicsMill.ColorPalette">Aurigma.GraphicsMill.ColorPalette</see> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> that represents the converted <see cref="T:Aurigma.GraphicsMill.ColorPalette">Aurigma.GraphicsMill.ColorPalette</see>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.op_Implicit(System.Drawing.Imaging.ColorPalette)~Aurigma.GraphicsMill.ColorPalette" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> to a <see cref="T:Aurigma.GraphicsMill.ColorPalette">Aurigma.GraphicsMill.ColorPalette</see>.</summary>
            <param name="palette">The <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.ColorPalette">Aurigma.GraphicsMill.ColorPalette</see> that represents the converted <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.SetKeyColor(Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Makes a palette entry which is closest to a given color transparent.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> which should be transparent.</param>
            <remarks><para>Alpha channel of a given entry will be dropped to 0, alpha channels of all other entries will be set to 255. This way palette will contain a single transparent color.</para><para>This method can be treated as analogue of <see cref="T:Aurigma.GraphicsMill.Transforms.Transparentize" /> transform for non-indexed image.</para><note>Setting transparent index works noticeable faster than setting transparent color (which actually calls slow <see cref="M:Aurigma.GraphicsMill.ColorPalette.FindNearestIndex(Aurigma.GraphicsMill.RgbColor)" /> method). That's why it is highly recommended to pass index instead of color if possible.</note></remarks>
            <overloads><summary>Makes a palette entry transparent.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.SetKeyColor(System.Int32)" draft="yes">
            <summary>Makes a palette entry with a given index transparent.</summary>
            <param name="entryIndex">The index of the palette entry which should be transparent.</param>
            <remarks><para>Alpha channel of a given entry will be dropped to 0, alpha channels of all other entries will be set to 255. This way palette will contain a single transparent color.</para><para>This method can be treated as analogue of <see cref="T:Aurigma.GraphicsMill.Transforms.Transparentize" /> transform for non-indexed image.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPalette.ToGdiPlusColorPalette" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> containing the same colors as this <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> does.</summary>
            <returns>A <see cref="T:System.Drawing.Imaging.ColorPalette">System.Drawing.Imaging.ColorPalette</see> containing the same colors as this <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> does.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorPalette.Type" draft="yes">
            <summary>Gets a value indicating whether this palette is predefined or custom.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPaletteType" /> specifying the palette type.</value>
            <remarks>If you load any predefined palette, and change any entry (using <see cref="P:Aurigma.GraphicsMill.ColorPalette.Item(System.Int32)" /> property), palette type is set to <see cref="F:Aurigma.GraphicsMill.ColorPaletteType.Custom" />.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorPaletteEmptyException" draft="yes">
            <summary>Represents the error that occurs when you try to operate with empty palette (which is either <c>null</c> or has no any entries).</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPaletteEmptyException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPaletteEmptyException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPaletteEmptyException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPaletteEmptyException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPaletteEmptyException" /> class with a specified error message.</summary>
            <param name="name">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPaletteEmptyException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorPaletteEmptyException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorPaletteEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorPaletteType">
            <summary>Contains palette types used when generating palettes.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Adaptive">
            <summary>Adaptive algorithm of palette matching.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Bicolor">
            <summary>Black and white palette (predefined).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Custom">
            <summary>Custom palette.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Grayscale">
            <summary>Grayscale palette (predefined).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Mac">
            <summary>Mac palette (predefined).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.WebSafe">
            <summary>WebSafe palette (predefined).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorPaletteType.Windows">
            <summary>Windows palette (predefined).</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorProfile" draft="yes">
            <summary>Represents the ICC color profile used to provide color management.</summary>
            <remarks><para>This class encapsulates an ICC color profile. Typically it is used as a parameter in color management classes/methods, however it also has a number of useful properties that allow obtaining extra details about the profile. In particular, you can get metainformation such as <see cref="P:Aurigma.GraphicsMill.ColorProfile.Copyright" />, <see cref="P:Aurigma.GraphicsMill.ColorProfile.Description" />, <see cref="P:Aurigma.GraphicsMill.ColorProfile.DeviceClass" /> (a device kind the profile is intended for), <see cref="P:Aurigma.GraphicsMill.ColorProfile.Manufacturer" />, and <see cref="P:Aurigma.GraphicsMill.ColorProfile.Model" />. You can also get a <see cref="P:Aurigma.GraphicsMill.ColorProfile.ColorSpace" /> the profile is made for.</para><para>You can create <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance in four ways:</para><list type="number"><item><term><see cref="M:Aurigma.GraphicsMill.ColorProfile.#ctor(System.String)">Constructor</see></term><description>creates a <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance from specified file.</description></item><item><term><see cref="M:Aurigma.GraphicsMill.ColorProfile.FromScreen" /></term><description>creates a <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance from the color profile associated with monitor.</description></item><item><term><see cref="M:Aurigma.GraphicsMill.ColorProfile.FromSrgb" /></term><description>Creates a <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance from a standard sRGB color profile.</description></item><item><term><see cref="M:Aurigma.GraphicsMill.ColorProfile.FromAdobe1998" /></term><description>creates a <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance from the standard Adobe RGB (1998) color profile.</description></item></list></remarks>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#rgbToCmykInPlace"></code></example>
            <threadsafety static="false" instance="false" />
        </member>
<!--        <member name="P:Aurigma.GraphicsMill.ColorProfile.AdobeColorProfileFilename" draft="yes">
            <summary>Gets or sets a path to Adobe RGB (1998) ICC color profile.</summary>
            <value>The path to Adobe RGB (1998) ICC color profile.</value>
            <remarks>You should set this property to a valid color profile path to be able to use color management for images created with Adobe RGB (1998) profile.</remarks>
        </member> -->
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Clone" draft="yes">
            <summary>Returns a full copy of this <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> instance.</summary>
            <returns>An object containing a full copy of this color profile.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.ColorSpace" draft="yes">
            <summary>Gets the color space of this color profile.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> of the profile.</value>
            <remarks>It is important for color profile to match appropriate color space when converting image between color spaces. This way you cannot use, say, RGB profile to convert to CMYK.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.Copyright" draft="yes">
            <summary>Gets a copyright information stored in the color profile.</summary>
            <value>The copyright information stored in the color profile.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.Description" draft="yes">
            <summary>Gets a profile description.</summary>
            <value>The profile description.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.DeviceClass" draft="yes">
            <summary>Gets a profile device class (i.e. what kind of devices it is intended for).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfileClass" /> of this profile.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.ColorProfile" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Dispose(System.Boolean)">
            <exclude />
        </member>
<!--        <member name="P:Aurigma.GraphicsMill.ColorProfile.FileName" draft="yes">
            <summary>Gets a color profile file name.</summary>
            <value>The color profile file name.</value>
            <remarks><para>Color profile always has a file name even if you work with embedded profile. In this case profile is copied to temporary file and its name is returned.</para><note>When you attach color profile to the <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile">Bitmap.ColorProfile</see>, profile file will be copied to temporary folder. That's why file name returned by this property and file name returned by <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile">Bitmap.ColorProfile</see> will differ.</note></remarks>
        </member> -->
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Finalize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.FromAdobe1998" draft="yes">
            <summary>Gets an Adobe RGB (1998) ICC color profile.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> created from an Adobe RGB (1998) ICC color profile.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.FromHdc(System.IntPtr)" draft="yes">
            <summary>Gets a color profile associated with the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the device context.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.FromScreen" draft="yes">
            <summary>Gets a color profile associated with the monitor.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the monitor.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.FromSrgb" draft="yes">
            <summary>Gets a standard sRGB color profile.</summary>
            <returns>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> created from a standard sRGB color profile.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.Manufacturer" draft="yes">
            <summary>Gets a device manufacturer name.</summary>
            <value>The device manufacturer name.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ColorProfile.Model" draft="yes">
            <summary>Gets a device model name.</summary>
            <value>The device model name.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> class.</summary>
            <param name="fileName">A File name of the profile to create.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.#ctor(System.IO.Stream)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> class from the specified data stream.</summary>
            <param name="stream">The data stream used to load the profile.</param>
        </member>
<!--        <member name="P:Aurigma.GraphicsMill.ColorProfile.ProfileDirectory" draft="yes">
            <summary>Get a name of a standard Windows folder which stores color profiles.</summary>
            <value>The path to a standard Windows folder containing color profiles.</value>
        </member> -->
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Save(System.String)" draft="yes">
            <summary>Saves this color profile to the specified file.</summary>
            <overloads><summary>Saves the profile to the specified file.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ColorProfile.Save(System.IO.Stream)" draft="yes">
            <summary>Saves this profile to the specified <see cref="T:System.IO.Stream" />.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorProfileClass">
            <summary>Contains possible values for profile device class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Abstract">
            <summary>Abstract profile. These profiles are adjusted to suit a user's particular preferences.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.ColorSpace">
            <summary>Color space profiles. These profiles describe a device-independent color space.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Display">
            <summary>Display profiles. This category of profiles includes all the profiles associated with display.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Input">
            <summary>Input profiles. This category of profiles includes all the profiles associated with input, e.g. scanners.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Link">
            <summary>Device link profile. These profiles describe the color space of a particular device.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.NamedColor">
            <summary>Named color profile. These profiles are intended for a color space that consists of named colors.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Output">
            <summary>Output profiles. This category of profiles includes all the profiles associated with hardcopy output, e.g. printers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorProfileClass.Unknown">
            <summary>Unsupported kind of color profiles.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.ColorSpace">
            <summary>Contains color spaces supported with Graphics Mill.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Cmyk">
            <summary>CMYK</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Grayscale">
            <summary>Grayscale</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Lab">
            <summary>LAB</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Rgb">
            <summary>RGB</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Spot">
            <summary>Spot colors</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.ColorSpace.Unknown">
            <summary>Undefined color space (returned when bitmap is not initialized)</summary>
        </member>
		
<!-- FontMissingException -->		
        <member name="T:Aurigma.GraphicsMill.FontMissingException" draft="yes">
            <summary>Represents the error that occurs when you try to operate with a missing font.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.FontMissingException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontMissingException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontMissingException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontMissingException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontMissingException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontMissingException.#ctor(System.String,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontMissingException" /> class with a specified font family and style.</summary>
            <param name="family">Font family.</param>
            <param name="style">Font style.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontMissingException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontMissingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- GMException -->
        <member name="T:Aurigma.GraphicsMill.GMException" draft="yes">
            <summary>Represents the error that occurs when you work with Graphics Mill. This is a base exception.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.GetManagedException(System.IntPtr)" draft="yes">
            <summary>Converts an unmanaged exception to a managed one. Should never used directly!</summary>
            <param name="unmanagedException">The pointer to an unmanaged exception.</param>
            <returns>The managed exception.</returns>
            <remarks>This method is used by Graphics Mill infrastructure and should not be called directly.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GMException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GMException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GMException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GMException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.GMException.ThrowManagedException(System.IntPtr)" draft="yes">
            <summary>Converts an internal unmanaged exception to a managed one. Do not call this method directly.</summary>
            <param name="unmanagedException">The pointer to an internal Graphics Mill unmanaged exception.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.GMException.InnerSource">
            <exclude />
        </member>
		
<!-- Grayscale16Color -->
        <member name="T:Aurigma.GraphicsMill.Grayscale16Color" draft="yes">
            <summary>Represents 16-bit (extended) color value in grayscale color space.</summary>
            <remarks><para>To get access to luminosity component use <see cref="P:Aurigma.GraphicsMill.Grayscale16Color.L" /> property. Alpha channel is available through <see cref="P:Aurigma.GraphicsMill.Grayscale16Color.A" /> property.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Grayscale16Color.A" draft="yes">
            <summary>Gets 16-bit alpha channel value (color opacity).</summary>
            <value>16-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Grayscale16Color.L" draft="yes">
            <summary>Gets 16-bit luminosity channel value.</summary>
            <value>16-bit luminosity channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Grayscale16Color.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Grayscale16Color" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent grayscale value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Grayscale16Color" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Grayscale16Color.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Grayscale16Color" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Grayscale16Color.#ctor(System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Grayscale16Color" /> class with the specified channel values.</summary>
            <param name="l">An luminosity channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Grayscale16Color.#ctor(System.UInt16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Grayscale16Color" /> class with the specified channel values.</summary>
            <param name="l">An luminosity channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Grayscale16Color.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.GrayscaleChannelCombiner" draft="yes">
            <summary>Creates a grayscale image by combining two grayscale images.</summary>
            <remarks><note>The merging channels must be of the same dimensions and resolution.</note></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleChannelCombiner.A" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleChannelCombiner.L" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the luminosity channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the luminosity channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleChannelCombiner.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleChannelCombiner" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.GrayscaleChannelSplitter" draft="yes">
            <summary>Separates a grayscale image by color channels.</summary>
            <remarks><para>The result of channels separation is a number of grayscale images that are used to create printing plates. The number of images depends on the source image color space. The pixel format of the resulting image depends on the source image pixel format. The resulting image is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> if the source bitmap is not extended, and <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> otherwise.</para></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleChannelSplitter.A" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleChannelSplitter.L" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the luminosity channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the luminosity channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleChannelSplitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleChannelSplitter" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.GrayscaleColor" draft="yes">
            <summary>Represents a color value in grayscale color space.</summary>
            <remarks><para>To get access to luminosity component use <see cref="P:Aurigma.GraphicsMill.GrayscaleColor.L" /> property. Alpha channel is available through <see cref="P:Aurigma.GraphicsMill.GrayscaleColor.A" /> property.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleColor.A" draft="yes">
            <summary>Gets 8-bit alpha channel value (color opacity).</summary>
            <value>8-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.GrayscaleColor.L" draft="yes">
            <summary>Gets 8-bit luminosity channel value.</summary>
            <value>8-bit luminosity channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleColor.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleColor" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent grayscale value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleColor" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleColor.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleColor" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleColor.#ctor(System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleColor" /> class with the specified channel values.</summary>
            <param name="l">An luminosity channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleColor.#ctor(System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.GrayscaleColor" /> class with the specified channel values.</summary>
            <param name="l">An luminosity channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.GrayscaleColor.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.Histogram" draft="yes">
            <summary>Represents a bitmap histogram.</summary>
            <remarks><para>Histograms are widely used in imaging. It is represented as an array which contains values specifying as much items as intensity levels are supported by a bitmap (i.e. for 8 bit per channel bitmaps it will be 256, for 16 bit per channel - 65356). Each histogram entry stores a number of bitmap pixels which have the same intensity level as index of this entry. For example, the first histogram entry contains a number of black pixels (i.e. pixels having zero intensity level). Entry at index 192 contains a number of pixels with intensity level equal to 192.</para><para>When Graphics Mill builds a histogram for a grayscale bitmap, it uses pixel value as an intensity level. For color bitmaps (RGB, CMYK) several algorithms for calculating intensity level of each pixel are available. Graphics Mill implements two of them:</para><list type="number"><item><term>Luminosity</term><description> Pixel color is converted to grayscale and this value is used as intensity level. This conversion is made by adding all channel values multiplied at weights (all weights are normalized at 1). These weights are selected with taking into consideration specifics of human vision, that's why it provides more precise result comparing to the <b>Sum</b> method. You can build luminosity histogram using <see cref="M:Aurigma.GraphicsMill.Histogram.BuildLuminosity(Aurigma.GraphicsMill.Bitmap)" /> method.</description></item><item><term>Sum</term><description> Graphics Mill calculates sum of all channels of the pixel and divides it by the count of channels. The advantage of this method is a possibility to exclude some channel from the intensity level calculation. This way you can get a histogram, e.g., for one or two channels. This method is implemented at Adobe® Photoshop®. To build sum histogram, use some of overload of <see cref="Overload:Aurigma.GraphicsMill.Histogram.BuildSum" /> method.</description></item></list><para>Histogram enables you to estimate image contrast programmatically. Also you can get some other characteristics (<see cref="P:Aurigma.GraphicsMill.Histogram.Mean">mean brightness</see>, <see cref="P:Aurigma.GraphicsMill.Histogram.StandardDeviation">standard deviation</see>, <see cref="P:Aurigma.GraphicsMill.Histogram.Median">median</see>, etc).</para><para>Histogram is used (explicitly or implicitly) in a number of Graphics Mill transforms, such as <see cref="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" />, <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" />, <see cref="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" /> (in automatic mode), etc.</para></remarks>
            <example><code language="CS" source="Samples/Code/Reference.cs#statistics"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.BitmapStatisticsProvider" />
            <seealso cref="P:Aurigma.GraphicsMill.Bitmap.Statistics" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.~Histogram">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildLuminosity(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Builds a luminosity histogram for the specified bitmap.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on pixels luminosity.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildLuminosity(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Builds a luminosity histogram using the pipeline approach.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on pixels luminosity.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildSum(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Builds a sum histogram the for specified bitmap.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on average of pixel channels values.</returns>
            <overloads><summary>Builds the histogram for specified bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildSum(Aurigma.GraphicsMill.Bitmap,System.Int32)" draft="yes">
            <summary>Builds a sum histogram for the specified bitmap.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to build the histogram for.</param>
            <param name="channel">The index of a channel to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on the value of the channel at specified index.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildSum(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Builds a sum histogram using the pipeline approach.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on average of pixel channels values.</returns>
            <overloads><summary>Builds the histogram for specified pipeline.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.BuildSum(Aurigma.GraphicsMill.Pipeline,System.Int32)" draft="yes">
            <summary>Builds a sum histogram using the pipeline approach.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to build the histogram for.</param>
            <param name="channel">The index of a channel to build the histogram for.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> based on the value of the channel at specified index.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Histogram" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.IsExtended" draft="yes">
            <summary>Gets a value that indicates whether the histogram is extended (16-bit).</summary>
            <value><c>true</c> if the histogram is extended (16-bit); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.Item(System.Int32)" draft="yes">
            <summary>Gets or sets histogram entry at the specified index.</summary>
            <param name="index">The zero-based index of the entry to get or set.</param>
            <value>The histogram entry at the specified index.</value>
            <remarks>Maximum index value can be calculated as <see cref="P:Aurigma.GraphicsMill.Histogram.Length" /> - 1.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.Length" draft="yes">
            <summary>Gets the number of histogram entries.</summary>
            <value>The number of histogram entries. Depending on a bitmap pixel format it is either 256 (if it is non-extended) or 65356 (if it is extended).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.Mean" draft="yes">
            <summary>Gets a mean value of the histogram.</summary>
            <value>The mean value of the histogram.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.Median" draft="yes">
            <summary>Gets a median value of the histogram.</summary>
            <value>The median value of the histogram.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.Merge(Aurigma.GraphicsMill.Histogram,Aurigma.GraphicsMill.Histogram)" draft="yes">
            <summary>Merges two histograms by summation the corresponding entries.</summary>
            <param name="h1">The first <see cref="T:Aurigma.GraphicsMill.Histogram" /> to merge.</param>
            <param name="h2">The second <see cref="T:Aurigma.GraphicsMill.Histogram" /> to merge.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Histogram" /> containing the result of merging.</returns>
            <remarks>The <see cref="P:Aurigma.GraphicsMill.Histogram.Length" /> of input histograms must be the same; otherwise the exception is throw.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Histogram.#ctor(Aurigma.GraphicsMill.Histogram)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Histogram" /> class from the specified existing histogram.</summary>
            <param name="histogram">The <see cref="T:Aurigma.GraphicsMill.Histogram" /> to be copied.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Histogram.StandardDeviation" draft="yes">
            <summary>Gets a standard deviation value of the histogram.</summary>
            <value>The standard deviation value of the histogram.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.HistogramMode">
            <summary>Contains modes for histogram building.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.HistogramMode.Luminosity">
            <summary>Histogram is built from pixels luminosity.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.HistogramMode.Sum">
            <summary>Histogram is built from average of pixels channels.</summary>
        </member>
		
<!-- IImageParams -->
        <member name="T:Aurigma.GraphicsMill.IImageParams" draft="yes">
            <summary>Provides image-related parameters.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.ColorProfile" draft="yes">
            <summary>Gets a color profile associated with an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.DpiX" draft="yes">
            <summary>Gets the horizontal resolution, in pixels per inch, of an image.</summary>
            <value>The horizontal resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.DpiY" draft="yes">
            <summary>Gets the vertical resolution, in pixels per inch, of an image.</summary>
            <value>The vertical resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.Height" draft="yes">
            <summary>Gets the height, in pixels, of an image.</summary>
            <value>The height, in pixels, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.Ink" draft="yes">
            <summary>Gets ink characteristics of a spot color of an image.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.Palette" draft="yes">
            <summary>Gets a palette associated with an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.PixelFormat" draft="yes">
            <summary>Gets a pixel format of an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.IImageParams.Width" draft="yes">
            <summary>Gets the width, in pixels, of an image.</summary>
            <value>The width, in pixels, of an image.</value>
        </member>
		
<!-- ImageGenerator -->
        <member name="T:Aurigma.GraphicsMill.ImageGenerator" draft="yes">
            <summary>Represents a pipeline element that creates a bitmap.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.BackgroundColor" draft="yes">
            <summary>Gets or sets a color to fill the resulting bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill the resulting bitmap. The default value is black color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.ColorProfile" draft="yes">
            <summary>Gets or sets a color profile associated with the resulting bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.DpiX" draft="yes">
            <summary>Gets or sets the horizontal resolution, in pixels per inch, of the resulting bitmap.</summary>
            <value>The horizontal resolution, in pixels per inch, of the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.DpiY" draft="yes">
            <summary>Gets or sets the vertical resolution, in pixels per inch, of the resulting bitmap.</summary>
            <value>The vertical resolution, in pixels per inch, of the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.FillPath" draft="yes">
            <summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw on the resulting bitmap.</summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> containing series of connected lines and curves to drawn on the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.FillPathColor" draft="yes">
            <summary>Gets or sets a color to fill a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> specified by the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.FillPath" /> property.</summary>
            <value>A color of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to be drawn on the resulting bitmap. The default value is black color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.GraphicsContainer" draft="yes">
            <summary>Gets or sets a <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> having the elements that should be drawn on the resulting bitmap.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> having the elements that should be drawn on the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.Height" draft="yes">
            <summary>Gets or set the height, in pixels, of the resulting bitmap.</summary>
            <value>The height, in pixels, of the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.Ink" draft="yes">
            <summary>Gets or sets ink characteristics of a spot color of the resulting bitmap.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageGenerator.#ctor(Aurigma.GraphicsMill.IImageParams,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ImageGenerator" /> class using the specified parameters.</summary>
            <param name="params">An <see cref="T:Aurigma.GraphicsMill.IImageParams" /> containing parameters to initialize this <see cref="T:Aurigma.GraphicsMill.ImageGenerator" />.</param>
            <param name="backgroundColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.BackgroundColor" /> property.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ImageGenerator" /> class using the specified parameters.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageGenerator.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ImageGenerator" /> class using the specified parameters.</summary>
            <param name="width">The width, in pixels, of the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.Width" /> property.</param>
            <param name="height">The height, in pixels, of the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.Height" /> property.</param>
            <param name="pixelFormat">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.PixelFormat" /> property.</param>
            <param name="backgroundColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.BackgroundColor" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageGenerator.#ctor(System.Drawing.Size,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ImageGenerator" /> class using the specified parameters.</summary>
            <param name="size">The <see cref="T:System.Drawing.Size" /> containing the size the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.Width" /> and  <see cref="P:Aurigma.GraphicsMill.ImageGenerator.Height" /> properties.</param>
            <param name="pixelFormat">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.PixelFormat" /> property.</param>
            <param name="backgroundColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.BackgroundColor" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageGenerator.#ctor(Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer,Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ImageGenerator" /> class using the specified parameters.</summary>
            <param name="container">The <see cref="T:Aurigma.GraphicsMill.AdvancedDrawing.GraphicsContainer" /> having the elements that should be drawn on the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.GraphicsContainer" /> property.</param>
            <param name="pixelFormat">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.PixelFormat" /> property.</param>
            <param name="backgroundColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill the resulting bitmap. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.ImageGenerator.BackgroundColor" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.Palette" draft="yes">
            <summary>Gets or sets a palette associated with the resulting bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.PixelFormat" draft="yes">
            <summary>Gets or sets a pixel format of the resulting bitmap.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of the resulting bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageGenerator.Width" draft="yes">
            <summary>Gets or set the width, in pixels, of the resulting bitmap.</summary>
            <value>The width, in pixels, of the resulting bitmap.</value>
        </member>
		
<!-- ImageParams -->
        <member name="T:Aurigma.GraphicsMill.ImageParams" draft="yes">
            <summary>Provides image-related parameters.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.ColorProfile" draft="yes">
            <summary>Gets a color profile associated with an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> associated with an image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageParams.Create(Aurigma.GraphicsMill.IImageParams)" draft="yes">
            <summary>Returns a new <see cref="T:Aurigma.GraphicsMill.ImageParams" /> from an object implementing the <see cref="T:Aurigma.GraphicsMill.IImageParams" /> interface.</summary>
            <param name="params">An object implementing the <see cref="T:Aurigma.GraphicsMill.IImageParams" /> interface to create a new <see cref="T:Aurigma.GraphicsMill.ImageParams" /> from.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.ImageParams" /> instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageParams.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Histogram" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ImageParams.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.DpiX" draft="yes">
            <summary>Gets the horizontal resolution, in pixels per inch, of an image.</summary>
            <value>The horizontal resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.DpiY" draft="yes">
            <summary>Gets the vertical resolution, in pixels per inch, of an image.</summary>
            <value>The vertical resolution, in pixels per inch, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.Height" draft="yes">
            <summary>Gets the height, in pixels, of an image.</summary>
            <value>The height, in pixels, of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.Ink" draft="yes">
            <summary>Gets ink characteristics of a spot color of this bitmap.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.Palette" draft="yes">
            <summary>Gets a palette associated with an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> associated with an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.PixelFormat" draft="yes">
            <summary>Gets a pixel format of an image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> of an image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.ImageParams.Width" draft="yes">
            <summary>Gets the width, in pixels, of an image.</summary>
            <value>The width, in pixels, of an image.</value>
        </member>

<!-- Ink -->
        <member name="T:Aurigma.GraphicsMill.Ink" draft="yes">
            <summary>Represents ink characteristics of a color.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Ink.#ctor(System.String,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Ink" /> class with a specified name and an alternative color.</summary>
            <param name="name">The name to initialize this ink with.</param>
            <param name="color">An alternative color to initialize this instance.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Ink.AlternativeColor" draft="yes">
            <summary>Gets or sets an alternative color for the color preview.</summary>
            <value>The alternative <see cref="T:Aurigma.GraphicsMill.Color" /> of this ink.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Ink.Name" draft="yes">
            <summary>Gets or sets a name of the ink.</summary>
            <value>The name of this ink.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Ink.Solidity" draft="yes">
            <summary>Gets or sets a solidity value of the ink.</summary>
            <value>A float value in the range from 0 to 1.0.</value>
        </member>

<!-- InvalidSourceException -->
        <member name="T:Aurigma.GraphicsMill.InvalidSourceException" draft="yes">
            <summary>Represents the error that occurs when the image reader/writer source is not valid.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.InvalidSourceException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.InvalidSourceException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.InvalidSourceException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.InvalidSourceException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.InvalidSourceException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.InvalidSourceException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.InvalidSourceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.InvalidSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Color" draft="yes">
            <summary>Represents the base class for classes that contain color values.</summary>
            <threadsafety static="false" instance="false" />
        </member>

<!-- ITextSettings -->
        <member name="T:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings" draft="yes">
            <summary>Provides text-related parameters.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.Caps" draft="yes">
            <summary>Gets capitalization options (caps) of the text.</summary>
            <value>Capitalization options of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.Color" draft="yes">
            <summary>Gets text color.</summary>
            <value>Text color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.DigitType" draft="yes">
            <summary>Gets digit type.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Codecs.Psd.DigitType" /> of digits.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.FauxBold" draft="yes">
            <summary>Gets bold style emulation of the text.</summary>
            <value>Bold style emulation of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.FauxItalic" draft="yes">
            <summary>Gets italic style emulation of the text.</summary>
            <value>Italic style emulation of the text.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.FontName" draft="yes">
            <summary>Gets name of the text font.</summary>
            <value>Name of the text font.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.FontSize" draft="yes">
            <summary>Gets size of the text font.</summary>
            <value>Size of the text font.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.HorizontalScale" draft="yes">
            <summary>Gets horizontal scaling value of the text.</summary>
            <value>Horizontal scaling value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.Strikeout" draft="yes">
            <summary>Gets text strikeout.</summary>
            <value>If <c>true</c> then text is stricken out, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.Tracking" draft="yes">
            <summary>Gets text tracking (also known as intercharacter spacing).</summary>
            <value>Text tracking.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.Underline" draft="yes">
            <summary>Gets text underline.</summary>
            <value>If <c>true</c> then text is underlined out, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Codecs.Psd.ITextSettings.VerticalScale" draft="yes">
            <summary>Gets vertical scaling value of the text.</summary>
            <value>Vertical scaling value.</value>
        </member>
		
		
<!-- Lab16Color -->		
        <member name="T:Aurigma.GraphicsMill.Lab16Color" draft="yes">
            <summary>Represents 16-bit (extended) color value in LAB color space.</summary>
            <remarks><para>To get access to A, B, and lightness components use <see cref="P:Aurigma.GraphicsMill.Lab16Color.A" />, <see cref="P:Aurigma.GraphicsMill.Lab16Color.B" />, and <see cref="P:Aurigma.GraphicsMill.Lab16Color.L" /> properties accordingly. Alpha channel is available through <see cref="P:Aurigma.GraphicsMill.Lab16Color.Alpha" /> property. Also there is an 8-bit version of this class named <see cref="T:Aurigma.GraphicsMill.LabColor" />.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Lab16Color.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent RGB value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Lab16Color.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Lab16Color.#ctor(System.UInt16,System.Int16,System.Int16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> class with the specified channel values.</summary>
            <param name="l">A lightness channel value.</param>
            <param name="a">An A channel value.</param>
            <param name="b">A B channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Lab16Color.#ctor(System.UInt16,System.Int16,System.Int16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> class with the specified channel values.</summary>
            <param name="l">A lightness channel value.</param>
            <param name="a">An A channel value.</param>
            <param name="b">A B channel value.</param>
            <param name="alpha">An alpha channel value.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Lab16Color.A" draft="yes">
            <summary>Gets 16-bit A channel value.</summary>
            <value>16-bit A channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Lab16Color.Alpha" draft="yes">
            <summary>Gets 16-bit alpha channel value (color opacity).</summary>
            <value>16-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Lab16Color.B" draft="yes">
            <summary>Gets 16-bit B channel value.</summary>
            <value>16-bit B channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Lab16Color.L" draft="yes">
            <summary>Gets 16-bit lightness channel value.</summary>
            <value>16-bit lightness channel value.</value>
        </member>
		<member name="M:Aurigma.GraphicsMill.Lab16Color.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>

<!-- LabChannelCombiner -->		
        <member name="T:Aurigma.GraphicsMill.LabChannelCombiner" draft="yes">
            <summary>Creates a Lab image by combining several grayscale images.</summary>
            <remarks><note>The merging channels must be of the same dimensions and resolution.</note></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelCombiner.A" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the A channel.</summary>
            <value>Gets or sets a pipeline producing an image for the A channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelCombiner.Alpha" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelCombiner.B" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the B channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the B channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabChannelCombiner.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabChannelCombiner" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelCombiner.L" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the lightness channel.</summary>
            <value>Gets or sets a pipeline producing an image for the lightness channel.</value>
        </member>
		
<!-- LabChannelSplitter -->		
        <member name="T:Aurigma.GraphicsMill.LabChannelSplitter" draft="yes">
            <summary>Separates a Lab image by color channels.</summary>
            <remarks><para>The result of channels separation is a number of grayscale images. The number of images depends on the source image color space. The pixel format of the resulting image depends on the source image pixel format. The resulting image is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> if the source bitmap is not extended, and <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> otherwise.</para></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelSplitter.A" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the A channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the A channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelSplitter.Alpha" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelSplitter.B" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the B channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the B channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabChannelSplitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabChannelSplitter" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabChannelSplitter.L" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the lightness channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the lightness channel.</value>
        </member>

<!-- LabColor -->
        <member name="T:Aurigma.GraphicsMill.LabColor" draft="yes">
            <summary>Represents color value in LAB color space.</summary>
            <remarks><para>To get access to A, B, and lightness components use <see cref="P:Aurigma.GraphicsMill.LabColor.A" />, <see cref="P:Aurigma.GraphicsMill.LabColor.B" />, and <see cref="P:Aurigma.GraphicsMill.LabColor.L" /> properties accordingly. Alpha channel is available through <see cref="P:Aurigma.GraphicsMill.LabColor.Alpha" /> property. Also there is an extended version of this class named <see cref="T:Aurigma.GraphicsMill.Lab16Color" /> (that represents 16-bit (extended) color value ).</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabColor.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabColor" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent RGB value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabColor" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabColor.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabColor" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabColor.#ctor(System.Byte,System.SByte,System.SByte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabColor" /> class with the specified channel values.</summary>
            <param name="l">A lightness channel value.</param>
            <param name="a">An A channel value.</param>
            <param name="b">A B channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.LabColor.#ctor(System.Byte,System.SByte,System.SByte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.LabColor" /> class with the specified channel values.</summary>
            <param name="l">A lightness channel value.</param>
            <param name="a">An A channel value.</param>
            <param name="b">A B channel value.</param>
            <param name="alpha">An alpha channel value.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabColor.A" draft="yes">
            <summary>Gets 8-bit A channel value.</summary>
            <value>8-bit A channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabColor.Alpha" draft="yes">
            <summary>Gets 8-bit alpha channel value (color opacity).</summary>
            <value>8-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabColor.B" draft="yes">
            <summary>Gets 8-bit B channel value.</summary>
            <value>8-bit B channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.LabColor.L" draft="yes">
            <summary>Gets 8-bit lightness channel value.</summary>
            <value>8-bit lightness channel value.</value>
        </member>
		<member name="M:Aurigma.GraphicsMill.LabColor.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
		
<!-- GraphicsMill.Licensing namespace -->
        <member name="N:Aurigma.GraphicsMill.Licensing" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Licensing" /> namespaces includes classes intended to get information about registered license keys.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Licensing.LicenseException" draft="yes">
            <summary>Represents the error that occurs when the registered license key is not valid or maintenance or eveluation period is expired.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Licensing.LicenseException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Licensing.LicenseException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Licensing.LicenseException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Licensing.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Licensing.LicenseInfo" draft="yes">
            <summary>Contains properties providing information about the registered license.</summary>
            <remarks><para>Read this class properties to get the license information concerning your Graphics Mill assembly.</para><para>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider.LicenseInfo">LicenseInfoProvider.LicenseInfo</see> property.</para></remarks>
            <example><code language="CS" source="Samples/Code/License.cs#check"></code></example>
            <seealso cref="P:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider.LicenseInfo" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Licensing.LicenseInfo.IsTrial" draft="yes">
            <summary>Gets a value indicating whether the current license is a trial.</summary>
            <value><c>true</c> if the current license is a trial; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Licensing.LicenseInfo.LicenseKeySource" draft="yes">
            <summary>Gets the source from which the license key is read.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseKeySource" /> specifying the source from which the key is read.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Licensing.LicenseInfo.MaintenanceExpirationDate" draft="yes">
            <summary>Gets the expiration date of the maintenance.</summary>
            <value>Date when the maintenance ends.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Licensing.LicenseInfo.#ctor(Aurigma.GraphicsMill.Licensing.License)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Licensing.LicenseInfo.TrialExpirationDate" draft="yes">
            <summary>Gets the expiration date of the evaluation period.</summary>
            <value>Date when the evaluation period ends.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider" draft="yes">
            <summary>Provides the information about the registered license.</summary>
            <remarks><para>To get the licensing information about your copy of Graphics Mill read the <see cref="P:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider.LicenseInfo" /> property. This object will contain all available information about your license for Graphics Mill.</para></remarks>
            <example><code language="CS" source="Samples/Code/License.cs#check"></code></example>
            <seealso cref="P:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider.LicenseInfo" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Licensing.LicenseInfoProvider.LicenseInfo" draft="yes">
            <summary>Gets the available license information for the current copy of Graphics Mill.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Licensing.LicenseInfo" /> containing the license information.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Licensing.LicenseKeySource" draft="yes">
            <summary>Contains possible sources from which a key can be read.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Licensing.LicenseKeySource.EmbeddedIntoAssembly" draft="yes">
            <summary>Assembly code.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Licensing.LicenseKeySource.LicFileInWebBin" draft="yes">
            <summary><b>lic</b> file of the Web root <b>bin</b> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Licensing.LicenseKeySource.LicFileNearAssembly" draft="yes">
            <summary><b>lic</b> file in the same folder as the assembly.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Licensing.LicenseKeySource.None" draft="yes">
            <summary>No key available.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Licensing.LicenseKeySource.Registry" draft="yes">
            <summary>System registry.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.ObjectClosedException" draft="yes">
            <summary>Represents the error that occurs when you try to operate with an object which needs to be opened (like file format readers or writers), but it is closed.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectClosedException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectClosedException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectClosedException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectClosedException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectClosedException" /> class with a specified error message.</summary>
            <param name="name">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectClosedException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectClosedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.ObjectEmptyException" draft="yes">
            <summary>Represents the error that occurs when empty object (like bitmap or color palette) is accessed.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectEmptyException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectEmptyException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectEmptyException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectEmptyException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectEmptyException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectEmptyException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ObjectEmptyException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.ObjectEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.OnInitEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.PipelineElement.OnInit">PipelineElement.OnInit</see> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.OnInitEventArgs.ImageParams" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of an image to initialize the <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> with.</summary>
            <value>An <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of an image to initialize the <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> with.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.OutOfMemoryException" draft="yes">
            <summary>Represents the error that occurs when there is not enough memory to continue the execution of a program.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.OutOfMemoryException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.OutOfMemoryException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.OutOfMemoryException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.OutOfMemoryException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.OutOfMemoryException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.OutOfMemoryException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Pipeline" draft="yes">
            <summary>Represents a collection of <see cref="T:Aurigma.GraphicsMill.PipelineElement" />s.</summary>
            <remarks><para>Pipelines allow reading and writing image files and processing them without the necessity to load a whole bitmap into memory. This essentially means that you can process large images without getting out-of-memory errors, even on an x86 platform. Pipelines offer the following benefites:</para><list type="bullet"><item><description>Within a pipeline, an image is processed stripe by stripe - a portion of image data having the same width as the original and height selected by Graphics Mill for optimal processing.</description></item><item><description>Temporary bitmap data may be dumped to the hard drive if it is necessary.</description></item><item><description>Descriptive image processing sequence, meaning that image data flows through the pipeline from one transformation to another, so each next element receives the result of the previous processing.</description></item><item><description>Ability to build branched pipelines. This is an approach whereby the transformation result can be passed to an arbitrary number of receivers and each of them can process the received data in its own way. For example, you can open an image and save it to JPEG and PNG files, or produce multiple thumbnails of different size at one pass. See the <b>Examples</b> section for details.</description></item></list></remarks>
            <example><para>This code sample reads an image from JPEG file, crops a square from its center, adjusts brightness, and writes the result to another file.</para><code language="CS" source="Samples/Code/Pipelines.cs#simpleSyntax"></code><para>The following code shows how to create two 128x128 and 2048x2048 thumbnails for a single image.</para><code language="CS" source="Samples/Code/Pipelines.cs#nonLinear"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.PipelineElement" />
<seealso href="processing-large-images-using-pipelines.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.Build" draft="yes">
            <summary>Builds this <see cref="T:Aurigma.GraphicsMill.Pipeline" /> and returns its root element.</summary>
            <returns>A root <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> of this <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</returns>
            <seealso href="processing-large-images-using-pipelines.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.DisposeAllElements" draft="yes">
            <summary>Releases all resources used by elements contained in this <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</summary>
            <seealso href="disposing-pipeline-elements.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Pipeline" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Pipeline" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.#ctor(Aurigma.GraphicsMill.PipelineElement)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Pipeline" /> class using the specified root element.</summary>
            <param name="pipelineRoot">A root <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to initialize this pipeline with.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.#ctor(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Pipeline" /> class using the specified existing pipeline.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to initialize this pipeline with.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.op_Addition(Aurigma.GraphicsMill.Pipeline,System.String)" draft="yes">
            <summary>Adds the specified <see cref="T:Aurigma.GraphicsMill.Pipeline" /> and file name.</summary>
            <param name="pipeline">The <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to add.</param>
            <param name="str">A file name to add.</param>
            <returns>The resulting <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.op_Implicit(Aurigma.GraphicsMill.PipelineElement)~Aurigma.GraphicsMill.Pipeline" draft="yes">
            <summary>Converts the root <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to a <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</summary>
            <param name="pipelineRoot">The root <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> that represents the root <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.Run" draft="yes">
            <summary>Runs this <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</summary>
            <overloads><summary>Runs the <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.Run(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Runs the specified pipeline.</summary>
            <param name="pipeline">A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to run.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Pipeline.Run(Aurigma.GraphicsMill.PipelineElement)" draft="yes">
            <summary>Runs a pipeline with the specified root element.</summary>
            <param name="pipelineRoot">A root <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to run the pipeline from.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.PipelineElement" draft="yes">
            <summary>Represents the base class for classes that process an image within a pipeline.</summary>
            <remarks><para>Pipelines allow reading and writing image files and processing them without the necessity to load a whole bitmap into memory. This essentially means that you can process large images without getting out-of-memory errors, even on an x86 platform. Pipelines offer the following benefites:</para><list type="bullet"><item><description>Within a pipeline, an image is processed stripe by stripe - a portion of image data having the same width as the original and height selected by Graphics Mill for optimal processing.</description></item><item><description>Temporary bitmap data may be dumped to the hard drive if it is necessary.</description></item><item><description>Descriptive image processing sequence, meaning that image data flows through the pipeline from one transformation to another, so each next element receives the result of the previous processing.</description></item><item><description>Ability to build branched pipelines. This is an approach whereby the transformation result can be passed to an arbitrary number of receivers and each of them can process the received data in its own way. For example, you can open an image and save it to JPEG and PNG files, or produce multiple thumbnails of different size at one pass. See the <b>Examples</b> section for details.</description></item></list></remarks>
            <example><para>This code sample reads an image from JPEG file, crops a square from its center, adjusts brightness, and writes the result to another file.</para><code language="CS" source="Samples/Code/Pipelines.cs#simpleSyntax"></code><para>The following code shows how to create two 128x128 and 2048x2048 thumbnails for a single image.</para><code language="CS" source="Samples/Code/Pipelines.cs#nonLinear"></code></example>
            <seealso cref="T:Aurigma.GraphicsMill.Pipeline" />
<seealso href="processing-large-images-using-pipelines.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Aurigma.GraphicsMill.PipelineElement._onInit">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.PipelineElement.Id" draft="yes">
            <summary>Gets or sets a unique identifier of this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> identifier.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.IsPixelFormatSupported(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Verifies whether the specified pixel format is supported by this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> value to verify.</param>
            <returns><c>true</c> if the specified pixel format is supported; otherwise, <c>false</c>.</returns>
            <remarks><para>If you try to process an image which has an unsupported pixel format, the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> is thrown.</para><para>To get the list of all pixel formats supported by this pipeline element, use the <see cref="P:Aurigma.GraphicsMill.PipelineElement.SupportedPixelFormats" /> property.</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.PipelineElement.SupportedPixelFormats" />
        </member>
        <member name="P:Aurigma.GraphicsMill.PipelineElement.License">
            <exclude />
        </member>
        <member name="E:Aurigma.GraphicsMill.PipelineElement.OnInit" draft="yes">
            <summary>Occurs when the pipeline element is initialized.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.op_Addition(Aurigma.GraphicsMill.Pipeline,Aurigma.GraphicsMill.PipelineElement)" draft="yes">
            <summary>Adds the specified <see cref="T:Aurigma.GraphicsMill.Pipeline" /> and <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
            <param name="pipeline">The <see cref="T:Aurigma.GraphicsMill.Pipeline" /> to add.</param>
            <param name="element">The <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to add.</param>
            <returns>The result of adding <i>pipeline</i> and <i>element</i>.</returns>
            <overloads><summary>Adds the specified pipeline elements</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.op_Addition(Aurigma.GraphicsMill.PipelineElement,Aurigma.GraphicsMill.PipelineElement)" draft="yes">
            <summary>Adds two specified <see cref="T:Aurigma.GraphicsMill.PipelineElement" />s.</summary>
            <param name="dst">The first <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to add.</param>
            <param name="src">The second <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> to add.</param>
            <returns>The resulting <see cref="T:Aurigma.GraphicsMill.Pipeline" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.op_Implicit(System.String)~Aurigma.GraphicsMill.PipelineElement" draft="yes">
            <summary>Converts the specified file name to a corresponded image reader or writer.</summary>
            <param name="fileName">A file name to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> representing an image reader or writer suitable for a given file name.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.raise_OnInit(System.Object,Aurigma.GraphicsMill.OnInitEventArgs)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.PipelineElement.Receivers" draft="yes">
            <summary>Gets a collection of pipeline elements that will receive the result of this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
            <value>The <see cref="T:System.Collections.Generic.IList`1" /> containing receivers.</value>
            <remarks>This property is used in branched image processing.</remarks>
            <example><para>The following code shows how to create two 128x128 and 2048x2048 thumbnails for a single image.</para><code language="CS" source="Samples/Code/Pipelines.cs#nonLinear"></code></example>
            <seealso href="processing-large-images-using-pipelines.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineElement.RunPipeline" draft="yes">
            <summary>Runs a pipeline staring from this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.PipelineElement.SupportedPixelFormats" draft="yes">
            <summary>Gets a collection of pixel formats that are supported by this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that are supported by this <see cref="T:Aurigma.GraphicsMill.PipelineElement" />.</value>
            <remarks><para>If you try to process an image which has an unsupported pixel format, the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> is thrown.</para><para>To check if some pixel format is supported by this pipeline element, use the <see cref="M:Aurigma.GraphicsMill.PipelineElement.IsPixelFormatSupported(Aurigma.GraphicsMill.PixelFormat)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.PipelineElement.IsPixelFormatSupported(Aurigma.GraphicsMill.PixelFormat)" />
        </member>
        <member name="T:Aurigma.GraphicsMill.PipelineException" draft="yes">
            <summary>Represents the error that occurs during pipeline image processing.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PipelineException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PipelineException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PipelineException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PipelineException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.PipelineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.PixelFormat" draft="yes">
            <summary>Represents a pixel format supported by Graphics Mill.</summary>
            <remarks><note>GDI cannot handle bitmaps with an alpha channel (<see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) when it draws anything on it. As the high byte of 4-byte color must be zero in GDI, each pixel drawn with GDI becomes transparent. So now, if you try to call any drawing methods for the bitmaps with an alpha channel when using GDI, the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> exception will be thrown.</note></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.AddAlpha(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Adds an alpha channel to the specified pixel format.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to add an alpha channel to.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> with an alpha channel.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.ChannelCount" draft="yes">
            <summary>Gets a number of channels available in this pixel format.</summary>
            <value>The number of channels available in this pixel format.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.ColorSpace" draft="yes">
            <summary>Gets a color space of the pixel format.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.ColorSpace" /> of the pixel format.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.ConvertToExtended(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Convertes the specified pixel format to an extended one.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert.</param>
            <returns>An extended <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.ConvertToSimple(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Converts the specified pixel format in non-extended one.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert.</param>
            <returns>A non-extended <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.DiscardAlpha(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Removes an alpha channel from the specified pixel format.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to remove an alpha channel from.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> without an alpha channel.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.Equals(System.Object)" draft="yes">
            <summary>Determines whether the specified object is equal to the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</summary>
            <param name="obj">The object to compare with the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</param>
            <returns><p>true</p> if the specified object is equal to the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format16bppAgrayscale" draft="yes">
            <summary>Gets a 16bppAGrayScale pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 16 bits per pixel grayscale color with alpha channel.</value>
            <remarks>8 bits are used for alpha channel and other 8 bits are used for luminosity level.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format16bppAspot" draft="yes">
            <summary>Gets a 16bppAspot pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 16 bits per pixel spot color with alpha channel.</value>
            <remarks>8 bits are used for alpha channel and other 8 bits are used for luminosity level.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" draft="yes">
            <summary>Gets a 16bppGrayScale pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 16 bits per pixel grayscale color.</value>
            <remarks>All 16 bits are used for luminosity level (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format1bppIndexed" draft="yes">
            <summary>Gets a 1bppIndexed pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 1 bit per pixel indexed color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format24bppLab" draft="yes">
            <summary>Gets a 24bppLab pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 24 bits per pixel Lab color.</value>
            <remarks>8 bits each are used for the A, B, and lightness components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" draft="yes">
            <summary>Gets a 24bppRGB pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 24 bits per pixel RGB color.</value>
            <remarks>8 bits each are used for the red, green, and blue components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format32bppAgrayscale" draft="yes">
            <summary>Gets a 32bppAGrayScale pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 32 bits per pixel grayscale color with alpha channel.</value>
            <remarks>16 bits are used for alpha channel and other 16 bits are used for luminosity level (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format32bppAlab" draft="yes">
            <summary>Gets a 32bppALab pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 32 bits per pixel Lab color with alpha channel.</value>
            <remarks>8 bits each are used for the alpha, A, B, and lightness components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" draft="yes">
            <summary>Gets a 32bppARGB pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 32 bits per pixel RGB color with alpha channel.</value>
            <remarks>8 bits each are used for the alpha, red, green, and blue components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format32bppCmyk" draft="yes">
            <summary>Gets a 32bppCMYK pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 32 bits per pixel CMYK color.</value>
            <remarks>8 bits each are used for the cyan, magenta, yellow, and black components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format32bppRgb" draft="yes">
            <summary>Gets a 32bppRGB pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 32 bits per pixel RGB color.</value>
            <remarks>8 bits each are used for the red, green, and blue components. The rest 8 bits are unused.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format40bppAcmyk" draft="yes">
            <summary>Gets a 40bppACMYK pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 40 bits per pixel CMYK color with alpha channel.</value>
            <remarks>8 bits each are used for the alpha, cyan, magenta, yellow, and black components.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format48bppLab" draft="yes">
            <summary>Gets a 48bppLab pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 48 bits per pixel Lab color</value>
            <remarks>16 bits each are used for the A, B, and lightness components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format48bppRgb" draft="yes">
            <summary>Gets a 48bppRGB pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 48 bits per pixel RGB color</value>
            <remarks>16 bits each are used for the red, green, and blue components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format4bppIndexed" draft="yes">
            <summary>Gets a 4bppIndexed pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 4 bit per pixel indexed color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format64bppAlab" draft="yes">
            <summary>Gets a 64bppALab pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 64 bits per pixel Lab color with alpha channel.</value>
            <remarks>16 bits each are used for the alpha, A, B, and lightness components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format64bppArgb" draft="yes">
            <summary>Gets a 64bppARGB pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 64 bits per pixel RGB color with alpha channel.</value>
            <remarks>16 bits each are used for the alpha, red, green, and blue components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format64bppCmyk" draft="yes">
            <summary>Gets a 64bppCMYK pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 64 bits per pixel CMYK color.</value>
            <remarks>16 bits each are used for the cyan, magenta, yellow, and black components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format80bppAcmyk" draft="yes">
            <summary>Gets a 80bppACMYK pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 80 bits per pixel CMYK color with alpha channel.</value>
            <remarks>16 bits each are used for the alpha, cyan, magenta, yellow, and black components (extended pixel format).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" draft="yes">
            <summary>Gets a 8bppGrayScale pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 8 bits per pixel grayscale color.</value>
            <remarks>8 bits are used for luminosity level.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format8bppIndexed" draft="yes">
            <summary>Gets a 8bppIndexed pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 8 bits per pixel indexed color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Format8bppSpot" draft="yes">
            <summary>Gets a 8bppSpot pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing 8 bits per pixel spot color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.FormatUnknown" draft="yes">
            <summary>Gets an undefined pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> representing an undefined color.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.GetHashCode" draft="yes">
            <summary>Returns a hash code of this <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</summary>
            <returns>A hash code for the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.HasAlpha" draft="yes">
            <summary>Gets a value indicating whether the current pixel format supports alpha channel (information about opacity of pixels).</summary>
            <value><c>true</c> if the current pixel format supports alpha channel; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsCmyk" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is CMYK.</summary>
            <value><c>true</c> if the pixel format is CMYK; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsExtended" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is extended (i.e. 16 bits per channel).</summary>
            <value><c>true</c> if this bitmap is 16 bits per channel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsGrayscale" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is grayscale.</summary>
            <value><c>true</c> if the pixel format is grayscale; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsIndexed" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is indexed (i.e. 16 bits per channel).</summary>
            <value><c>true</c> if the pixel format is 16 bits per channel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsLab" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is Lab.</summary>
            <value><c>true</c> if the pixel format is Lab; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsRgb" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is RGB.</summary>
            <value><c>true</c> if the pixel format is RGB; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.IsSpot" draft="yes">
            <summary>Gets a value indicating whether the current pixel format is spot.</summary>
            <value><c>true</c> if the pixel format is spot; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.MaxChannelValue" draft="yes">
            <summary>Gets a maximum channel value available in this pixel format.</summary>
            <value>The maximum channel value available in this pixel format. 16 if the pixel format is extended; otherwise 8.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.#ctor(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> class from the specified existing pixel format.</summary>
            <param name="format">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.#ctor(System.Drawing.Imaging.PixelFormat)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> class using the specified <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see> enumeration member.</summary>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see> from which to create the new <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.op_Equality(Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> instances are equivalent.</summary>
            <param name="format1">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that is to the left of the equality operator.</param>
            <param name="format2">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.op_Implicit(Aurigma.GraphicsMill.PixelFormat)~System.Int32" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to integer value.</summary>
            <param name="format">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert.</param>
            <returns>An integer value that represents the converted <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.op_Implicit(Aurigma.GraphicsMill.PixelFormat)~System.Drawing.Imaging.PixelFormat" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.PixelFormat">Aurigma.GraphicsMill.PixelFormat</see> to a <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see>.</summary>
            <param name="format">The <see cref="T:Aurigma.GraphicsMill.PixelFormat">Aurigma.GraphicsMill.PixelFormat</see> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see> that represents the converted <see cref="T:Aurigma.GraphicsMill.PixelFormat">Aurigma.GraphicsMill.PixelFormat</see>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.op_Implicit(System.Drawing.Imaging.PixelFormat)~Aurigma.GraphicsMill.PixelFormat" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see> to a <see cref="T:Aurigma.GraphicsMill.PixelFormat">Aurigma.GraphicsMill.PixelFormat</see>.</summary>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.PixelFormat">Aurigma.GraphicsMill.PixelFormat</see> that represents the converted <see cref="T:System.Drawing.Imaging.PixelFormat">System.Drawing.Imaging.PixelFormat</see>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.op_Inequality(Aurigma.GraphicsMill.PixelFormat,Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> instances are different.</summary>
            <param name="format1">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that is to the left of the inequality operator.</param>
            <param name="format2">The <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.PixelFormat.Size" draft="yes">
            <summary>Gets a size of this pixel format.</summary>
            <value>The pixel format size.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.PixelFormat.ToString" draft="yes">
            <summary>Returns a string that represents the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</summary>
            <returns>A string that represents the current <see cref="T:Aurigma.GraphicsMill.PixelFormat" />.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.ProgressEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.ProgressReporter.Progress">ProgressReporter.Progress</see> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.ProgressEventArgs.Progress" draft="yes">
            <summary>Gets a current position of the progress in percents.</summary>
            <value>The current position of the progress in percents.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.ProgressReporter" draft="yes">
            <summary>Indicates a progress of a pipeline.</summary>
            <remarks>In order to handle the pipeline progress, add <see cref="T:Aurigma.GraphicsMill.ProgressReporter" /> at the beginning of <see cref="T:Aurigma.GraphicsMill.Pipeline" /> and implement the <see cref="E:Aurigma.GraphicsMill.ProgressReporter.Progress" /> event handler.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.ProgressReporter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.ProgressReporter" /> class.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.ProgressReporter.Progress" draft="yes">
            <summary>Occurs when the current image stripe had run through the pipeline.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.ProgressReporter.raise__progress(System.Object,Aurigma.GraphicsMill.ProgressEventArgs)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Rational" draft="yes">
            <summary>Represents signed rational numbers.</summary>
            <remarks><para>Rational number is a number which may be represented as a division of two natural numbers. For example, 3/4, 2/1, 1/6, etc. Not all fractional numbers are rational. For example, a Pi number is <i>irrational</i> (i.e. cannot be represented as a division of two natural numbers).</para><para>This class provides an access to <see cref="P:Aurigma.GraphicsMill.Rational.Dividend" /> and <see cref="P:Aurigma.GraphicsMill.Rational.Divider" />. A <see cref="P:Aurigma.GraphicsMill.Rational.Divider" /> cannot be zero.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Rational.Dividend" draft="yes">
            <summary>Gets or sets a dividend of the rational number.</summary>
            <value>The dividend of the rational number (i.e. if represent rational number as <i>p/q</i>, dividend is <i>p</i>).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Rational.Divider" draft="yes">
            <summary>Gets or sets a divider of the rational number.</summary>
            <value>The divider of the rational number (i.e. if represent rational number as <i>p/q</i>, divider is <i>q</i>).</value>
            <remarks>Divider cannot equal to zero.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.Rational" /> instance and is equivalent to this <see cref="T:Aurigma.GraphicsMill.Rational" />.</summary>
            <param name="object">The object to test.</param>
            <returns><c>true</c> if <i>object</i> is a <see cref="T:Aurigma.GraphicsMill.Rational" /> instance equivalent to this <see cref="T:Aurigma.GraphicsMill.Rational" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.Rational" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.Rational" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rational" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rational" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.#ctor(System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rational" /> class with the specified dividend and divider.</summary>
            <param name="dividend">The dividend of the rational number (i.e. if represent rational number as <i>p/q</i>, dividend is <i>p</i>). You can change it later using <see cref="P:Aurigma.GraphicsMill.Rational.Dividend" /> property.</param>
            <param name="divider">The divider of the rational number (i.e. if represent rational number as <i>p/q</i>, divider is <i>q</i>). You can change it later using <see cref="P:Aurigma.GraphicsMill.Rational.Divider" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.op_Equality(Aurigma.GraphicsMill.Rational,Aurigma.GraphicsMill.Rational)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Rational" /> instances are equivalent.</summary>
            <param name="l">The <see cref="T:Aurigma.GraphicsMill.Rational" /> that is to the left of the equality operator.</param>
            <param name="r">The <see cref="T:Aurigma.GraphicsMill.Rational" /> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Rational" /> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.op_Inequality(Aurigma.GraphicsMill.Rational,Aurigma.GraphicsMill.Rational)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Rational" /> instances are different.</summary>
            <param name="l">The <see cref="T:Aurigma.GraphicsMill.Rational" /> that is to the left of the inequality operator.</param>
            <param name="r">The <see cref="T:Aurigma.GraphicsMill.Rational" /> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Rational" /> instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rational.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.Rgb16Color" draft="yes">
            <summary>Represents 16-bit (extended) color value in RGB color space.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Rgb16Color.A" draft="yes">
            <summary>Gets 16-bit alpha channel value (color opacity).</summary>
            <value>16-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Rgb16Color.B" draft="yes">
            <summary>Gets 16-bit blue channel value.</summary>
            <value>16-bit blue channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Rgb16Color.G" draft="yes">
            <summary>Gets 16-bit green channel value.</summary>
            <value>16-bit green channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rgb16Color.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent RGB value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rgb16Color.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rgb16Color.#ctor(System.UInt16,System.UInt16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> class with the specified channel values.</summary>
            <param name="r">A red channel value.</param>
            <param name="g">A green channel value.</param>
            <param name="b">A blue channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rgb16Color.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> class with the specified channel values.</summary>
            <param name="r">A red channel value.</param>
            <param name="g">A green channel value.</param>
            <param name="b">A blue channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Rgb16Color.R" draft="yes">
            <summary>Gets 16-bit red channel value.</summary>
            <value>16-bit red channel value.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Rgb16Color.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.RgbChannelCombiner" draft="yes">
            <summary>Creates a RGB image by combining several grayscale images.</summary>
            <remarks><note>The merging channels must be of the same dimensions and resolution.</note></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelCombiner.A" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelCombiner.B" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the blue channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an image for the blue channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelCombiner.G" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the green channel.</summary>
            <value>Gets or sets a pipeline producing an image for the green channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbChannelCombiner.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbChannelCombiner" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelCombiner.R" draft="yes">
            <summary>Gets or sets a pipeline producing an image for the red channel.</summary>
            <value>Gets or sets a pipeline producing an image for the red channel.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.RgbChannelSplitter" draft="yes">
            <summary>Separates a RGB image by color channels.</summary>
            <remarks><para>The result of channels separation is a number of grayscale images that are used to create printing plates. The number of images depends on the source image color space. The pixel format of the resulting image depends on the source image pixel format. The resulting image is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> if the source bitmap is not extended, and <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format16bppGrayscale" /> otherwise.</para></remarks>
            <seealso href="reading-and-writing-channels.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelSplitter.A" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the alpha channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the alpha channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelSplitter.B" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the blue channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the blue channel.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelSplitter.G" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the green channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the green channel.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbChannelSplitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbChannelSplitter" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbChannelSplitter.R" draft="yes">
            <summary>Gets or sets a pipeline element which receives an image containing the red channel.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PipelineElement" /> which receives an image containing the red channel.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.RgbColor" draft="yes">
            <summary>Represents color value in RGB color space.</summary>
            <remarks><para>To get access to red, green, and blue component use <see cref="P:Aurigma.GraphicsMill.RgbColor.R" />, <see cref="P:Aurigma.GraphicsMill.RgbColor.G" />, and <see cref="P:Aurigma.GraphicsMill.RgbColor.B" /> properties accordingly. Alpha channel is available through <see cref="P:Aurigma.GraphicsMill.RgbColor.A" /> property. Also there is an extended version of this class named <see cref="T:Aurigma.GraphicsMill.Rgb16Color" /> (that represents 16-bit (extended) color value ).</para><para>There are a number static properties which return predefined colors, such as <see cref="P:Aurigma.GraphicsMill.RgbColor.Red" />, <see cref="P:Aurigma.GraphicsMill.RgbColor.Maroon" />, <see cref="P:Aurigma.GraphicsMill.RgbColor.Pink" />, <see cref="P:Aurigma.GraphicsMill.RgbColor.SeaGreen" />, etc.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.A" draft="yes">
            <summary>Gets 8-bit alpha channel value (color opacity).</summary>
            <value>8-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.AliceBlue">
            <summary>Alice blue color.</summary>
            <value>Value that represents alice blue color.</value>
            <remarks><span style="color:black;background-color:aliceblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.AntiqueWhite">
            <summary>Antique white color.</summary>
            <value>Value that represents antique white color.</value>
            <remarks><span style="color:black;background-color:antiquewhite">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Aqua">
            <summary>Aqua color.</summary>
            <value>Value that represents aqua color.</value>
            <remarks><span style="color:black;background-color:aqua">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Azure">
            <summary>Azure color.</summary>
            <value>Value that represents azure color.</value>
            <remarks><span style="color:black;background-color:azure">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.B" draft="yes">
            <summary>Gets 8-bit blue channel value.</summary>
            <value>Blue channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Beige">
            <summary>Beige color.</summary>
            <value>Value that represents beige color.</value>
            <remarks><span style="color:black;background-color:beige">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Bisque">
            <summary>Bisque color.</summary>
            <value>Value that represents bisque color.</value>
            <remarks><span style="color:black;background-color:bisque">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Black">
            <summary>Black color.</summary>
            <value>Value that represents black color.</value>
            <remarks><span style="color:white;background-color:black">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.BlanchedAlmond">
            <summary>Blanched almond color.</summary>
            <value>Value that represents blanched almond color.</value>
            <remarks><span style="color:black;background-color:blanchedalmond">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Blue">
            <summary>Blue color.</summary>
            <value>Value that represents blue color.</value>
            <remarks><span style="color:black;background-color:blue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.BlueViolet">
            <summary>Blue violet color.</summary>
            <value>Value that represents blue violet color.</value>
            <remarks><span style="color:black;background-color:blueviolet">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Brown">
            <summary>Brown color.</summary>
            <value>Value that represents brown color.</value>
            <remarks><span style="color:black;background-color:brown">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.BurlyWood">
            <summary>Burly wood color.</summary>
            <value>Value that represents burly wood color.</value>
            <remarks><span style="color:black;background-color:burlywood">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.CadetBlue">
            <summary>Cadet blue color.</summary>
            <value>Value that represents cadet blue color.</value>
            <remarks><span style="color:black;background-color:cadetblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Chartreuse">
            <summary>Chartreuse color.</summary>
            <value>Value that represents chartreuse color.</value>
            <remarks><span style="color:black;background-color:chartreuse">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Chocolate">
            <summary>Chocolate color.</summary>
            <value>Value that represents chocolate color.</value>
            <remarks><span style="color:black;background-color:chocolate">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Coral">
            <summary>Coral color.</summary>
            <value>Value that represents coral color.</value>
            <remarks><span style="color:black;background-color:coral">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.CornflowerBlue">
            <summary>Cornflower blue color.</summary>
            <value>Value that represents cornflower blue color.</value>
            <remarks><span style="color:black;background-color:cornflowerblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Cornsilk">
            <summary>Cornsilk color.</summary>
            <value>Value that represents cornsilk color.</value>
            <remarks><span style="color:black;background-color:cornsilk">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Crimson">
            <summary>Crimson color.</summary>
            <value>Value that represents crimson color.</value>
            <remarks><span style="color:black;background-color:crimson">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Cyan">
            <summary>Cyan color.</summary>
            <value>Value that represents cyan color.</value>
            <remarks><span style="color:black;background-color:cyan">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkBlue">
            <summary>Dark blue color.</summary>
            <value>Value that represents dark blue color.</value>
            <remarks><span style="color:white;background-color:darkblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkCyan">
            <summary>Dark cyan color.</summary>
            <value>Value that represents dark cyan color.</value>
            <remarks><span style="color:black;background-color:darkcyan">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkGoldenrod">
            <summary>Dark goldenrod color.</summary>
            <value>Value that represents dark goldenrod color.</value>
            <remarks><span style="color:black;background-color:darkgoldenrod">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkGray">
            <summary>Dark gray color.</summary>
            <value>Value that represents dark gray color.</value>
            <remarks><span style="color:black;background-color:darkgray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkGreen">
            <summary>Dark green color.</summary>
            <value>Value that represents dark green color.</value>
            <remarks><span style="color:black;background-color:darkgreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkKhaki">
            <summary>Dark khaki color.</summary>
            <value>Value that represents dark khaki color.</value>
            <remarks><span style="color:black;background-color:darkkhaki">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkMagenta">
            <summary>Dark magenta color.</summary>
            <value>Value that represents dark magenta color.</value>
            <remarks><span style="color:black;background-color:darkmagenta">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkOliveGreen">
            <summary>Dark olive green color.</summary>
            <value>Value that represents dark olive green color.</value>
            <remarks><span style="color:white;background-color:darkolivegreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkOrange">
            <summary>Dark orange color.</summary>
            <value>Value that represents dark orange color.</value>
            <remarks><span style="color:black;background-color:darkorange">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkOrchid">
            <summary>Dark orchid color.</summary>
            <value>Value that represents dark orchid color.</value>
            <remarks><span style="color:black;background-color:darkorchid">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkRed">
            <summary>Dark red color.</summary>
            <value>Value that represents dark red color.</value>
            <remarks><span style="color:black;background-color:darkred">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkSalmon">
            <summary>Dark salmon color.</summary>
            <value>Value that represents dark salmon color.</value>
            <remarks><span style="color:black;background-color:darksalmon">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkSeaGreen">
            <summary>Dark sea green color.</summary>
            <value>Value that represents dark sea green color.</value>
            <remarks><span style="color:black;background-color:darkseagreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkSlateBlue">
            <summary>Dark slate blue color.</summary>
            <value>Value that represents dark slate blue color.</value>
            <remarks><span style="color:black;background-color:darkslateblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkSlateGray">
            <summary>Dark slate gray color.</summary>
            <value>Value that represents dark slate gray color.</value>
            <remarks><span style="color:white;background-color:darkslategray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkTurquoise">
            <summary>Dark turquoise color.</summary>
            <value>Value that represents dark turquoise color.</value>
            <remarks><span style="color:black;background-color:darkturquoise">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DarkViolet">
            <summary>Dark violet color.</summary>
            <value>Value that represents dark violet color.</value>
            <remarks><span style="color:black;background-color:darkviolet">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DeepPink">
            <summary>Deep pink color.</summary>
            <value>Value that represents deep pink color.</value>
            <remarks><span style="color:black;background-color:deeppink">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DeepSkyBlue">
            <summary>Deep sky blue color.</summary>
            <value>Value that represents deep sky blue color.</value>
            <remarks><span style="color:black;background-color:deepskyblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DimGray">
            <summary>Dim gray color.</summary>
            <value>Value that represents dim gray color.</value>
            <remarks><span style="color:black;background-color:dimgray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.DodgerBlue">
            <summary>Dodger blue color.</summary>
            <value>Value that represents dodger blue color.</value>
            <remarks><span style="color:black;background-color:dodgerblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Firebrick">
            <summary>Firebrick color.</summary>
            <value>Value that represents firebrick color.</value>
            <remarks><span style="color:black;background-color:firebrick">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.FloralWhite">
            <summary>Floral white color.</summary>
            <value>Value that represents floral white color.</value>
            <remarks><span style="color:black;background-color:floralwhite">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.ForestGreen">
            <summary>Forest green color.</summary>
            <value>Value that represents forest green color.</value>
            <remarks><span style="color:black;background-color:forestgreen">Sample color</span></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.FromHsl(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Creates a <see cref="T:Aurigma.GraphicsMill.RgbColor" /> from the specified HSL color.</summary>
            <param name="hue">Hus channel value.</param>
            <param name="saturation">Saturation channel value.</param>
            <param name="lightness">Lightness channel value.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.RgbColor" /> that this method creates.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Fuchsia">
            <summary>Fuchsia color.</summary>
            <value>Value that represents fuchsia color.</value>
            <remarks><span style="color:black;background-color:fuchsia">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.G" draft="yes">
            <summary>Gets 8-bit green channel value.</summary>
            <value>Green channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Gainsboro">
            <summary>Gainsboro color.</summary>
            <value>Value that represents gainsboro color.</value>
            <remarks><span style="color:black;background-color:gainsboro">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.GhostWhite">
            <summary>Ghost white color.</summary>
            <value>Value that represents ghost white color.</value>
            <remarks><span style="color:black;background-color:ghostwhite">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Gold">
            <summary>Gold color.</summary>
            <value>Value that represents gold color.</value>
            <remarks><span style="color:black;background-color:gold">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Goldenrod">
            <summary>Goldenrod color.</summary>
            <value>Value that represents goldenrod color.</value>
            <remarks><span style="color:black;background-color:goldenrod">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Gray">
            <summary>Gray color.</summary>
            <value>Value that represents gray color.</value>
            <remarks><span style="color:black;background-color:gray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Green">
            <summary>Green color.</summary>
            <value>Value that represents green color.</value>
            <remarks><span style="color:black;background-color:green">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.GreenYellow">
            <summary>Green yellow color.</summary>
            <value>Value that represents green yellow color.</value>
            <remarks><span style="color:black;background-color:greenyellow">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Honeydew">
            <summary>Honeydew color.</summary>
            <value>Value that represents honeydew color.</value>
            <remarks><span style="color:black;background-color:honeydew">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.HotPink">
            <summary>Hot pink color.</summary>
            <value>Value that represents hot pink color.</value>
            <remarks><span style="color:black;background-color:hotpink">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.IndianRed">
            <summary>Indian red color.</summary>
            <value>Value that represents indian red color.</value>
            <remarks><span style="color:black;background-color:indianred">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Indigo">
            <summary>Indigo color.</summary>
            <value>Value that represents indigo color.</value>
            <remarks><span style="color:white;background-color:indigo">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Khaki">
            <summary>Khaki color.</summary>
            <value>Value that represents khaki color.</value>
            <remarks><span style="color:black;background-color:khaki">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Lavender">
            <summary>Lavender color.</summary>
            <value>Value that represents lavender color.</value>
            <remarks><span style="color:black;background-color:lavender">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LavenderBlush">
            <summary>Lavender blush color.</summary>
            <value>Value that represents lavender blush color.</value>
            <remarks><span style="color:black;background-color:lavenderblush">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LawnGreen">
            <summary>Lawn green color.</summary>
            <value>Value that represents lawn green color.</value>
            <remarks><span style="color:black;background-color:lawngreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LemonChiffon">
            <summary>Lemon chiffon color.</summary>
            <value>Value that represents lemon chiffon color.</value>
            <remarks><span style="color:black;background-color:lemonchiffon">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightBlue">
            <summary>Light blue color.</summary>
            <value>Value that represents light blue color.</value>
            <remarks><span style="color:black;background-color:lightblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightCoral">
            <summary>Light coral color.</summary>
            <value>Value that represents light coral color.</value>
            <remarks><span style="color:black;background-color:lightcoral">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightCyan">
            <summary>Light cyan color.</summary>
            <value>Value that represents light cyan color.</value>
            <remarks><span style="color:black;background-color:lightcyan">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightGoldenrodYellow">
            <summary>Light goldenrod yellow color.</summary>
            <value>Value that represents light goldenrod yellow color.</value>
            <remarks><span style="color:black;background-color:lightgoldenrodyellow">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightGray">
            <summary>Light gray color.</summary>
            <value>Value that represents light gray color.</value>
            <remarks><span style="color:black;background-color:lightgray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightGreen">
            <summary>Light green color.</summary>
            <value>Value that represents light green color.</value>
            <remarks><span style="color:black;background-color:lightgreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightPink">
            <summary>Light pink color.</summary>
            <value>Value that represents light pink color.</value>
            <remarks><span style="color:black;background-color:lightpink">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightSalmon">
            <summary>Light salmon color.</summary>
            <value>Value that represents light salmon color.</value>
            <remarks><span style="color:black;background-color:lightsalmon">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightSeaGreen">
            <summary>Light sea green color.</summary>
            <value>Value that represents light sea green color.</value>
            <remarks><span style="color:black;background-color:lightseagreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightSkyBlue">
            <summary>Light sky blue color.</summary>
            <value>Value that represents light sky blue color.</value>
            <remarks><span style="color:black;background-color:lightskyblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightSlateGray">
            <summary>Light slate gray color.</summary>
            <value>Value that represents light slate gray color.</value>
            <remarks><span style="color:black;background-color:lightslategray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightSteelBlue">
            <summary>Light steel blue color.</summary>
            <value>Value that represents light steel blue color.</value>
            <remarks><span style="color:black;background-color:lightsteelblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LightYellow">
            <summary>Light yellow color.</summary>
            <value>Value that represents light yellow color.</value>
            <remarks><span style="color:black;background-color:lightyellow">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Lime">
            <summary>Lime color.</summary>
            <value>Value that represents lime color.</value>
            <remarks><span style="color:black;background-color:lime">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.LimeGreen">
            <summary>Lime green color.</summary>
            <value>Value that represents lime green color.</value>
            <remarks><span style="color:black;background-color:limegreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Linen">
            <summary>Linen color.</summary>
            <value>Value that represents linen color.</value>
            <remarks><span style="color:black;background-color:linen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Magenta">
            <summary>Magenta color.</summary>
            <value>Value that represents magenta color.</value>
            <remarks><span style="color:black;background-color:magenta">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Maroon">
            <summary>Maroon color.</summary>
            <value>Value that represents maroon color.</value>
            <remarks><span style="color:white;background-color:maroon">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumAquamarine">
            <summary>Medium aquamarine color.</summary>
            <value>Value that represents medium aquamarine color.</value>
            <remarks><span style="color:black;background-color:mediumaquamarine">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumBlue">
            <summary>Medium blue color.</summary>
            <value>Value that represents medium blue color.</value>
            <remarks><span style="color:white;background-color:mediumblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumOrchid">
            <summary>Medium orchid color.</summary>
            <value>Value that represents medium orchid color.</value>
            <remarks><span style="color:black;background-color:mediumorchid">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumPurple">
            <summary>Medium purple color.</summary>
            <value>Value that represents medium purple color.</value>
            <remarks><span style="color:black;background-color:mediumpurple">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumSeaGreen">
            <summary>Medium sea green color.</summary>
            <value>Value that represents medium sea green color.</value>
            <remarks><span style="color:black;background-color:mediumseagreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumSlateBlue">
            <summary>Medium slate blue color.</summary>
            <value>Value that represents medium slate blue color.</value>
            <remarks><span style="color:black;background-color:mediumslateblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumSpringGreen">
            <summary>Medium spring green color.</summary>
            <value>Value that represents medium spring green color.</value>
            <remarks><span style="color:black;background-color:mediumspringgreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumTurquoise">
            <summary>Medium turquoise color.</summary>
            <value>Value that represents medium turquoise color.</value>
            <remarks><span style="color:black;background-color:mediumturquoise">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MediumVioletRed">
            <summary>Medium violet red color.</summary>
            <value>Value that represents medium violet red color.</value>
            <remarks><span style="color:white;background-color:mediumvioletred">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MidnightBlue">
            <summary>Midnight blue color.</summary>
            <value>Value that represents midnight blue color.</value>
            <remarks><span style="color:white;background-color:midnightblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MintCream">
            <summary>Mint cream color.</summary>
            <value>Value that represents mint cream color.</value>
            <remarks><span style="color:black;background-color:mintcream">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.MistyRose">
            <summary>Misty rose color.</summary>
            <value>Value that represents misty rose color.</value>
            <remarks><span style="color:black;background-color:mistyrose">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Moccasin">
            <summary>Moccasin color.</summary>
            <value>Value that represents moccasin color.</value>
            <remarks><span style="color:black;background-color:moccasin">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.NavajoWhite">
            <summary>Navajo white color.</summary>
            <value>Value that represents navajo white color.</value>
            <remarks><span style="color:black;background-color:navajowhite">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Navy">
            <summary>Navy color.</summary>
            <value>Value that represents navy color.</value>
            <remarks><span style="color:black;background-color:navy">Sample color</span></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class.</summary>
            <remarks>All channels are initialized with zeros, therefore this color will be represent absolutely black and transparent RGB value.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class with the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to initialize this instance.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.#ctor(System.Byte,System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class with the specified channel values.</summary>
            <param name="r">A red channel value.</param>
            <param name="g">A green channel value.</param>
            <param name="b">A blue channel value.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.RgbColor" /> class with the specified channel values.</summary>
            <param name="r">A red channel value.</param>
            <param name="g">A green channel value.</param>
            <param name="b">A blue channel value.</param>
            <param name="a">An alpha channel value.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.OldLace">
            <summary>Old lace color.</summary>
            <value>Value that represents old lace color.</value>
            <remarks><span style="color:black;background-color:oldlace">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Olive">
            <summary>Olive color.</summary>
            <value>Value that represents olive color.</value>
            <remarks><span style="color:black;background-color:olive">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.OliveDrab">
            <summary>Olive drab color.</summary>
            <value>Value that represents olive drab color.</value>
            <remarks><span style="color:black;background-color:olivedrab">Sample color</span></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.op_Implicit(System.Drawing.Color)~Aurigma.GraphicsMill.RgbColor" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Color">System.Drawing.Color</see> to a <see cref="T:Aurigma.GraphicsMill.RgbColor">Aurigma.GraphicsMill.RgbColor</see>.</summary>
            <param name="color">The <see cref="T:System.Drawing.Color">System.Drawing.Color</see> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.RgbColor">Aurigma.GraphicsMill.RgbColor</see> that represents the converted <see cref="T:System.Drawing.Color">System.Drawing.Color</see>.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Orange">
            <summary>Orange color.</summary>
            <value>Value that represents orange color.</value>
            <remarks><span style="color:black;background-color:orange">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.OrangeRed">
            <summary>Orange red color.</summary>
            <value>Value that represents orange red color.</value>
            <remarks><span style="color:black;background-color:orangered">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Orchid">
            <summary>Orchid color.</summary>
            <value>Value that represents orchid color.</value>
            <remarks><span style="color:black;background-color:orchid">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PaleGoldenrod">
            <summary>Pale goldenrod color.</summary>
            <value>Value that represents pale goldenrod color.</value>
            <remarks><span style="color:black;background-color:palegoldenrod">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PaleGreen">
            <summary>Pale green color.</summary>
            <value>Value that represents pale green color.</value>
            <remarks><span style="color:black;background-color:palegreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PaleTurquoise">
            <summary>Pale turquoise color.</summary>
            <value>Value that represents pale turquoise color.</value>
            <remarks><span style="color:black;background-color:paleturquoise">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PaleVioletRed">
            <summary>Pale violet red color.</summary>
            <value>Value that represents pale violet red color.</value>
            <remarks><span style="color:black;background-color:palevioletred">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PapayaWhip">
            <summary>Papaya whip color.</summary>
            <value>Value that represents papaya whip color.</value>
            <remarks><span style="color:black;background-color:papayawhip">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PeachPuff">
            <summary>Peach puff color.</summary>
            <value>Value that represents peach puff color.</value>
            <remarks><span style="color:black;background-color:peachpuff">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Peru">
            <summary>Peru color.</summary>
            <value>Value that represents peru color.</value>
            <remarks><span style="color:black;background-color:peru">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Pink">
            <summary>Pink color.</summary>
            <value>Value that represents pink color.</value>
            <remarks><span style="color:black;background-color:pink">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Plum">
            <summary>Plum color.</summary>
            <value>Value that represents plum color.</value>
            <remarks><span style="color:black;background-color:plum">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.PowderBlue">
            <summary>Powder blue color.</summary>
            <value>Value that represents powder blue color.</value>
            <remarks><span style="color:black;background-color:powderblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Purple">
            <summary>Purple color.</summary>
            <value>Value that represents purple color.</value>
            <remarks><span style="color:black;background-color:purple">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.R" draft="yes">
            <summary>Gets 8-bit red channel value.</summary>
            <value>Red channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Red">
            <summary>Red color.</summary>
            <value>Value that represents red color.</value>
            <remarks><span style="color:black;background-color:red">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.RosyBrown">
            <summary>Rosy brown color.</summary>
            <value>Value that represents rosy brown color.</value>
            <remarks><span style="color:black;background-color:rosybrown">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.RoyalBlue">
            <summary>Royal blue color.</summary>
            <value>Value that represents royal blue color.</value>
            <remarks><span style="color:black;background-color:royalblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SaddleBrown">
            <summary>Saddle brown color.</summary>
            <value>Value that represents saddle brown color.</value>
            <remarks><span style="color:white;background-color:saddlebrown">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Salmon">
            <summary>Salmon color.</summary>
            <value>Value that represents salmon color.</value>
            <remarks><span style="color:black;background-color:salmon">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SandyBrown">
            <summary>Sandy brown color.</summary>
            <value>Value that represents sandy brown color.</value>
            <remarks><span style="color:black;background-color:sandybrown">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SeaGreen">
            <summary>Sea green color.</summary>
            <value>Value that represents sea green color.</value>
            <remarks><span style="color:black;background-color:seagreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SeaShell">
            <summary>Sea shell color.</summary>
            <value>Value that represents sea shell color.</value>
            <remarks><span style="color:black;background-color:seashell">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Sienna">
            <summary>Sienna color.</summary>
            <value>Value that represents sienna color.</value>
            <remarks><span style="color:black;background-color:sienna">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Silver">
            <summary>Silver color.</summary>
            <value>Value that represents silver color.</value>
            <remarks><span style="color:black;background-color:silver">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SkyBlue">
            <summary>Sky blue color.</summary>
            <value>Value that represents sky blue color.</value>
            <remarks><span style="color:black;background-color:skyblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SlateBlue">
            <summary>Slate blue color.</summary>
            <value>Value that represents slate blue color.</value>
            <remarks><span style="color:black;background-color:slateblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SlateGray">
            <summary>Slate gray color.</summary>
            <value>Value that represents slate gray color.</value>
            <remarks><span style="color:black;background-color:slategray">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Snow">
            <summary>Snow color.</summary>
            <value>Value that represents snow color.</value>
            <remarks><span style="color:black;background-color:snow">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SpringGreen">
            <summary>Spring green color.</summary>
            <value>Value that represents spring green color.</value>
            <remarks><span style="color:black;background-color:springgreen">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.SteelBlue">
            <summary>Steel blue color.</summary>
            <value>Value that represents steel blue color.</value>
            <remarks><span style="color:black;background-color:steelblue">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Tan">
            <summary>Tan color.</summary>
            <value>Value that represents tan color.</value>
            <remarks><span style="color:black;background-color:tan">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Teal">
            <summary>Teal color.</summary>
            <value>Value that represents teal color.</value>
            <remarks><span style="color:black;background-color:teal">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Thistle">
            <summary>Thistle color.</summary>
            <value>Value that represents thistle color.</value>
            <remarks><span style="color:black;background-color:thistle">Sample color</span></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.ToGdiPlusColor" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Color">System.Drawing.Color</see> containing the same color value as this <see cref="T:Aurigma.GraphicsMill.RgbColor" />.</summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> containing the same color.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.ToInt32" draft="yes">
            <summary>Gets a non-extended (8 bit per channel) numeric representation of this <see cref="T:Aurigma.GraphicsMill.RgbColor" />.</summary>
            <returns>The numeric representation of this <see cref="T:Aurigma.GraphicsMill.RgbColor" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Tomato">
            <summary>Tomato color.</summary>
            <value>Value that represents tomato color.</value>
            <remarks><span style="color:black;background-color:tomato">Sample color</span></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.RgbColor.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Transparent">
            <summary>Transparent color.</summary>
            <value>Value that represents transparent color.</value>
            <remarks><span style="color:black;background-color:transparent">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Turquoise">
            <summary>Turquoise color.</summary>
            <value>Value that represents turquoise color.</value>
            <remarks><span style="color:black;background-color:turquoise">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Violet">
            <summary>Violet color.</summary>
            <value>Value that represents violet color.</value>
            <remarks><span style="color:black;background-color:violet">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Wheat">
            <summary>Wheat color.</summary>
            <value>Value that represents wheat color.</value>
            <remarks><span style="color:black;background-color:wheat">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.White">
            <summary>White color.</summary>
            <value>Value that represents white color.</value>
            <remarks><span style="color:black;background-color:white">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.WhiteSmoke">
            <summary>White smoke color.</summary>
            <value>Value that represents white smoke color.</value>
            <remarks><span style="color:black;background-color:whitesmoke">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.Yellow">
            <summary>Yellow color.</summary>
            <value>Value that represents yellow color.</value>
            <remarks><span style="color:black;background-color:yellow">Sample color</span></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.RgbColor.YellowGreen">
            <summary>Yellow green color.</summary>
            <value>Value that represents yellow green color.</value>
            <remarks><span style="color:black;background-color:yellowgreen">Sample color</span></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.SpotColor" draft="yes">
            <summary>Represents a color value of a spot color.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.SpotColor.#ctor(Aurigma.GraphicsMill.Ink,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SpotColor" /> class with specified ink characteristics and a tint.</summary>
            <param name="ink">Ink characteristics of the spot color.</param>
            <param name="tint">A tint of the spot color.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.SpotColor.#ctor(Aurigma.GraphicsMill.Ink,System.Byte,System.Byte)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SpotColor" /> class with specified ink characteristics, a tint, and alpha channel.</summary>
            <param name="ink">Ink characteristics of the spot color.</param>
            <param name="tint">A tint of the spot color.</param>
            <param name="alpha">An alpha channel of the spot color.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.SpotColor.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.SpotColor.Alpha" draft="yes">
            <summary>Gets 8-bit alpha channel value (color opacity).</summary>
            <value>8-bit alpha channel value.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.SpotColor.Ink" draft="yes">
            <summary>Gets ink characteristics of a spot color.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Ink" /> of the spot color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.SpotColor.Tint" draft="yes">
            <summary>Gets the tint of the spot color.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Ink" /> characteristics of the spot color.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.SehException" draft="yes">
            <summary>Represents the Structured Exception Handling (SEH) error.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.SehException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SehException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SehException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.SehException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SehException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.SehException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.SehException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.SehException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
		
<!-- Transforms namespace -->
        <member name="N:Aurigma.GraphicsMill.Transforms" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Transforms" /> namespace provides access to Graphics Mill transforms and attendant functionality. Most classes of this namespace represent single transform algorithm.</summary>
        </member>
		
<!-- Transforms.AddNoise -->
        <member name="T:Aurigma.GraphicsMill.Transforms.AddNoise" draft="yes">
            <summary>Applies a noise effect to an image.</summary>
            <remarks><para>This class transforms an image by adding a random number to each pixel. It supports the following settings:</para><list type="bullet"><item><description><see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.DistributionKind" /> specifies a noise distribution (uniform or Gaussian).</description></item><item><description><see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Amount" /> specifies a strength of the noise.</description></item><item><description><see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.GrayNoise" /> specifies whether to put the same noise values to all channels of pixel.</description></item><item><description><see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Seed" /> specifies the seed for random generator.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AddNoise.Amount" draft="yes">
            <summary>Gets or sets an amount (strength) of the noise.</summary>
            <value>The strength of noise in range [-1, 1]. If 0, no noise added. The default value is <c>0</c>.2.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AddNoise.DistributionKind" draft="yes">
            <summary>Gets or sets a distribution kind of the noise.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.DistributionKind" /> specifying noise distribution law. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.DistributionKind.Uniform" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AddNoise.GrayNoise" draft="yes">
            <summary>Gets or sets a value indicating whether the noise is gray.</summary>
            <value><c>true</c> if the noise is gray; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <remarks>If this property is <c>true</c>, the generated random value is the same for all channels of one pixel; otherwise the noise is color and the random value may vary for each channel in one pixel.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AddNoise.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AddNoise.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class using the specified noise strength.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Amount" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AddNoise.#ctor(System.Single,Aurigma.GraphicsMill.Transforms.DistributionKind)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class using the specified noise type and strength.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Amount" /> property.</param>
            <param name="distributionKind">A <see cref="T:Aurigma.GraphicsMill.Transforms.DistributionKind" /> specifying noise distribution law. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.DistributionKind" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AddNoise.#ctor(System.Single,Aurigma.GraphicsMill.Transforms.DistributionKind,System.Boolean,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class using the specified noise settings.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Amount" /> property.</param>
            <param name="distributionKind">A <see cref="T:Aurigma.GraphicsMill.Transforms.DistributionKind" /> specifying noise distribution law. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.DistributionKind" /> property.</param>
            <param name="grayNoise"><c>true</c> if the noise is gray; otherwise, <c>false</c>. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.GrayNoise" /> property.</param>
            <param name="seed">The seed for the noise random generator. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AddNoise.Seed" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AddNoise.Seed" draft="yes">
            <summary>Gets or sets a seed value for the noise random generator.</summary>
            <value>The seed for the noise random generator. The default value is <c>0</c>.</value>
            <remarks><para>The set of random numbers is always the same for the same seed. So if you need to have the same result for multiple execution of this transform, specify a fixed seed. If you want to have different result each time you run this transform, set this property randomly (for example, from system clock or some other unpredictable value).</para></remarks>
        </member>
		
<!-- Transforms.AdjustHsl -->
        <member name="T:Aurigma.GraphicsMill.Transforms.AdjustHsl" draft="yes">
            <summary>Adjusts an image in HSL color space.</summary>
            <remarks><para>This transform supports the <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Hue" />, <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Saturation" />, and <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Lightness" /> settings. The specified values are added to appropriate components in HSL color space to each pixel.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Hue" draft="yes">
            <summary>Gets or sets a hue modifier.</summary>
            <value>The hue modifier value in range [-1, 1] (degrees normalized at 360). The default value is <c>0</c>.</value>
            <remarks>Hue is measured in degrees relatively red point on color wheel. It means that if, for example, you specify 120 degrees, red color will turn to green, etc.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Lightness" draft="yes">
            <summary>Gets or sets a lightness modifier.</summary>
            <value>The lightness modifier value in range [-1, 1]. The default value is <c>0</c>.</value>
            <remarks>This parameter allows to change intensity of the color. It works similar to <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> transform, however another algorithm is used and result differs from brightness adjustment.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AdjustHsl.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AdjustHsl" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AdjustHsl" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AdjustHsl.#ctor(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AdjustHsl" /> class using the specified noise settings.</summary>
            <param name="hue">The hue modifier value in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Hue" /> property.</param>
            <param name="saturation">The saturation modifier value in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Saturation" /> property.</param>
            <param name="lightness">The lightness modifier value in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Lightness" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AdjustHsl.Saturation" draft="yes">
            <summary>Gets or sets a saturation modifier.</summary>
            <value>The saturation modifier value in range [-1, 1]. The default value is <c>0</c>.</value>
            <remarks>Saturation means "purity" of the color. Small (negative) values will make image desaturated, gray. Large values will make image very saturated, all the color will be deep. Note, natural colors are seldom very saturated, so if you apply this method on photo, don't make this parameter close to maximum (if you don't deal with tropical butterflies and flowers).</remarks>
        </member>

<!-- Transforms.AutoCrop -->
        <member name="T:Aurigma.GraphicsMill.Transforms.AutoCrop" draft="yes">
            <summary>Removes a border around an image in the automatic mode.</summary>
            <remarks><para>This transform supports two settings:</para>
			<list type="bullet">
				<item><term><see cref="P:Aurigma.GraphicsMill.Transforms.AutoCrop.BorderColor" /></term> <description>The color of the border to remove.</description></item>
				<item><term><see cref="P:Aurigma.GraphicsMill.Transforms.AutoCrop.Threshold" /></term> <description>The sensitivity of the auto crop. The higher the value the more color will be cropped.</description></item>
			</list>
			</remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#AutoCropOutOfPlace"></code></example>
			<seealso ref="resizing-and-cropping-images.htm#AutoCroppingImages" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AutoCrop.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AutoCrop" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AutoCrop" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.AutoCrop.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AutoCrop" /> class using the specified color.</summary>
            <param name="borderColor">The color of the border to remove.</param>
            <example><code language="CS" source="Samples/Code/Transforms.cs#AutoCropOutOfPlace"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AutoCrop.BorderColor" draft="yes">
            <summary>Gets or sets the color of the border to remove.</summary>
            <value>The color of the border to remove. The default color is white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AutoCrop.Result" draft="yes">
            <summary>Gets the resulting rectangle.</summary>
            <value>The resulting <see cref="T:System.Drawing.RectangleF" /> where the transform was applied.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.AutoCrop.Threshold" draft="yes">
            <summary>Gets or sets the sensitivity of the auto crop.</summary>
            <value>The sensitivity of the auto crop. The higher the value the more color will be cropped. The default value is <c>0</c>.</value>
        </member>

<!-- Transforms.BezierTransform -->		
        <member name="T:Aurigma.GraphicsMill.Transforms.BezierTransform" draft="yes">
            <summary>Applies a warp transformation based on Bezier surface.</summary>
            <remarks>This transform is very useful for mapping textures on surfaces.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BezierTransform.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class.</summary></overloads>
			<remarks><para>If the <see cref="P:Aurigma.GraphicsMill.Transforms.BezierTransform.ControlPoints" /> is not specified before the transform is applied, then exception will arise.</para><para>The default background color is white, you can change it via the <see cref="P:Aurigma.GraphicsMill.Transforms.BezierTransform.Color" /> property.</para><para>The default interpolation mode is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />, you can change it via the <see cref="P:Aurigma.GraphicsMill.Transforms.BezierTransform.InterpolationMode" /> property.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BezierTransform.#ctor(System.Drawing.PointF[])" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class defined by the given Bezier surface.</summary>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
			<remarks><para>The default background color is white, you can change it via the <see cref="P:Aurigma.GraphicsMill.Transforms.BezierTransform.Color" /> property.</para><para>The default interpolation mode is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />, you can change it via the <see cref="P:Aurigma.GraphicsMill.Transforms.BezierTransform.InterpolationMode" /> property.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BezierTransform.#ctor(System.Drawing.PointF[],Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class defined by the given Bezier surface.</summary>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
            <param name="backgroundColor">Color to fill empty spaces that can occur as a result of transformation.</param>
            <param name="mode">An <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BezierTransform.Apply(Aurigma.GraphicsMill.Bitmap,System.Drawing.PointF[])" draft="yes">
            <summary>Produces a transformed copy of a given bitmap using the given Bezier surface.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BezierTransform.Apply(Aurigma.GraphicsMill.Bitmap,System.Drawing.PointF[],Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap using the given Bezier surface, background color and interpolation mode.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
            <param name="backgroundColor">Color to fill empty spaces that can occur as a result of transformation.</param>
            <param name="mode">An <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.BackgroundColor" draft="yes">
            <summary>Gets or sets the color to fill empty spaces that can occur as a result of transformation.</summary>
            <value>A color to fill empty spaces that can occur as a result of transformation.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.ControlPoints" draft="yes">
            <summary>Gets or sets the sixteen control points that defines the Bezier surface for this transform.</summary>
            <value>An array of sixteen control points that defines the Bezier surface for this transform.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.DestinationSize" draft="yes">
            <summary>Gets or sets the bounding box to which the Bezier surface will be scaled.</summary>
            <value>The bounding box to which the Bezier surface will be scaled.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.DestinationOffset" draft="yes">
            <summary>Gets or sets the offset of the bounding box.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.InterpolationMode" draft="yes">
            <summary>Gets or sets the interpolation mode of the transform.</summary>
            <value>An <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BezierTransform.SourceCellSize" draft="yes">
            <summary>Gets or sets the size of the cells to which the image will be splitted to perform transformation.</summary>
            <value>The size of the cells to which the image will be splitted to perform transformation.</value>
			<remarks><para>The smaller number gives better result, but slows transformation. The grater number gives faster transformation, but can result in not so smooth image.</para></remarks>
        </member>

<!-- Transforms.BlendMode -->
        <member name="T:Aurigma.GraphicsMill.Transforms.BlendMode" draft="yes">
            <summary>Contains standard blend modes. They are used when the bitmap is drawn on window or blended with another bitmap.</summary>
            <seealso href="blending-modes.htm" />
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.ColorBurn" draft="yes">
            <summary>Divides the inverted bottom layer by the top layer, and then inverts the result.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.ColorDodge" draft="yes">
            <summary>Divides the bottom layer by the inverted top layer.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Darken" draft="yes">
            <summary>Creates a pixel that retains the smallest components of the foreground and background pixels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Difference" draft="yes">
            <summary>Subtracts the bottom layer from the top layer or vice versa to get a positive value.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Exclusion" draft="yes">
            <summary>Subtracts the bottom layer from the top layer or vice versa to get a positive value. It's less contrast than <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.Difference" />.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.HardLight" draft="yes">
            <summary>Combines <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.Multiply" /> and <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.Screen" /> blend modes.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Lighten" draft="yes">
            <summary>Selects the maximum of each component from the foreground and background pixels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Multiply" draft="yes">
            <summary>Multiplies pixels of the top layer with the corresponding pixels of the bottom layer.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Normal" draft="yes">
            <summary>Uses the top layer alone.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Overlay" draft="yes">
            <summary>Combines <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.Multiply" /> and <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.Screen" /> blend modes.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.Screen" draft="yes">
            <summary>The pixels in the two layers are inverted, multiplied, and then inverted again.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.BlendMode.SoftLight" draft="yes">
            <summary>Combines <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.ColorBurn" /> and <see cref="F:Aurigma.GraphicsMill.Transforms.BlendMode.ColorDodge" /> blend modes.</summary>
        </member>
      
<!-- Transforms.Blender -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Blender" draft="yes">
            <summary>Combines two images using the specified <see cref="T:Aurigma.GraphicsMill.Transforms.BlendMode" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blender.AutoDisposeTopImage" draft="yes">
            <summary>Gets or sets a value indicating whether an overlay image should be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" />.</summary>
            <value><c>true</c> if the overlay image (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.Blender.TopImage" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blender.Mode" draft="yes">
            <summary>Gets or sets a blend mode.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.BlendMode" /> specifying how source and overlaying pixels should be combined.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blender.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blender.#ctor(Aurigma.GraphicsMill.Transforms.BlendMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> class using the specified blend mode.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.BlendMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blender.#ctor(Aurigma.GraphicsMill.Transforms.BlendMode,Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> class using the specified blend mode and overlaying image.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.BlendMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
            <param name="topImage">An overlay image. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Blender.TopImage" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blender.#ctor(Aurigma.GraphicsMill.Transforms.BlendMode,Aurigma.GraphicsMill.Pipeline,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> class using the specified settings.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.CombineMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
            <param name="topImage">An overlay image. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Blender.TopImage" /> property.</param>
            <param name="autoDisposeTopImage"><c>true</c> if the overlay image (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.Blender.TopImage" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" />; otherwise, <c>false</c>. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Blender.AutoDisposeTopImage" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blender.TopImage" draft="yes">
            <summary>Gets or sets an overlay image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an overlay image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blender.X" draft="yes">
            <summary>Gets or sets the x-coordinate of the upper-left corner of the overlay image.</summary>
            <value>The x-coordinate of the upper-left corner of the overlay image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blender.Y" draft="yes">
            <summary>Gets or sets the y-coordinate of the upper-left corner of the overlay image.</summary>
            <value>The y-coordinate of the upper-left corner of the overlay image.</value>
        </member>
		
<!-- Transforms.BlenderOnInitEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Transforms.BlenderOnInitEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.PipelineElement.OnInit">Blender.OnInit</see> event.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BlenderOnInitEventArgs.TopImageParams" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of a top image to initialize the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> with.</summary>
            <value>An <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of a top image to initialize the <see cref="T:Aurigma.GraphicsMill.Transforms.Blender" /> with.</value>
        </member>
 
<!-- Transforms.Blur -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Blur" draft="yes">
            <summary>Applies a blur effect to an image.</summary>
            <remarks>This transform supports the only <see cref="P:Aurigma.GraphicsMill.Transforms.Blur.Radius" /> settings. Large values of radius makes image more blurry, so you can treat this parameter as "blur strength".</remarks>
            <seealso href="adding-vignette.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blur.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blur" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blur" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Blur.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blur" /> class using the specified radius.</summary>
            <param name="radius">The blur radius. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Blur.Radius" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Blur.Radius" draft="yes">
            <summary>Gets or sets the blur radius.</summary>
            <value>The blur radius must be positive. The default value is <c>2</c>.</value>
            <remarks><para>Radius means how much neighbour pixels the algorithm fetches (for radius = 1 it will take 8 neighbours, for radius = 2 it will use already 24 neighbour pixels, etc). That's why in general the larger radius, the slower blur works. However Graphics Mill implements special algorithms which are optimized for large radiuses, that's why this rule not always works.</para></remarks>
        </member>
		
<!-- Transforms.Brightness -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Brightness" draft="yes">
            <summary>Corrects a brightness of an image.</summary>
            <remarks><para>This class provides a simple brightness adjustment functionality. Being extremely easy-to-use for end user (it has the single parameter <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Amount" />), it is used by professional retouchers very seldom (because as usual it leads to losses of details in highlights and/or shadows).</para><para>You can also use this transform in automatic mode using <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" /> property.</para><para>If you want to apply both brightness and contrast, you should consider the <see cref="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" /> transform. Both of these operation will be performed at the single pass, so it will work faster than sequential execution of <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" />.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Brightness.Amount" draft="yes">
            <summary>Gets or sets the brightness modifier.</summary>
            <value>The brightness modifier in range [-1, 1]. The default value is <c>0</c>.</value>
            <remarks><note>If you set <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" /> property to <c>true</c>, and modifying <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Amount" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" /> is reset to <c>false</c>.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" draft="yes">
            <summary>Gets or sets a value indicating whether the transform should be run in automatic mode.</summary>
            <value><c>true</c> if the brightness is automatic; otherwise, <c>false</c>.</value>
            <remarks><note>If you set <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" /> property to <c>true</c>, and modifying <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Amount" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Auto" /> is reset to <c>false</c>.</note><para>When you create the <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> without specifying brightness amount, default value is <c>true</c>. If amount is passed to constructor, default value is <c>false</c>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Brightness.CalculateAuto(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Returns a brightness modifier which this class would apply in automatic mode.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> for which the brightness modifier is calculated automatically.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> which represents the brightness modification.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Brightness.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Brightness.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> class using the specified brightness modifier.</summary>
            <param name="amount">The brightness modifier in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Brightness.Amount" /> property.</param>
        </member>
		
<!-- Transforms.BrightnessContrast -->
        <member name="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" draft="yes">
            <summary>Corrects brightness and contrast of an image.</summary>
            <remarks><para>This class provides simple brightness and contrast adjustment functionality. Being extremely easy-to-use for end user, it is used by professional retouchers very seldom (because as usual it leads to losses of details in highlights and/or shadows).</para><para>It provides two parameters - brightness modifier (<see cref="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Brightness" /> property) and contrast modifier (<see cref="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Contrast" /> property).</para>
			<para>If you want to modify only brightness or contrast, you can use <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> or <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> transform. It will work slightly faster.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Brightness" draft="yes">
            <summary>Gets or sets the brightness modifier.</summary>
            <value>The brightness modifier in range [-1, 1]. The default value is <c>0</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Contrast" draft="yes">
            <summary>Gets or sets the contrast modifier.</summary>
            <value>The contrast modifier in range [-1, 1]. The default value is <c>0</c>. Minimum value (-1) will produce absolutely gray image, neutral value (0) does no effect, maximum value (1) makes the image extremely posterized.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BrightnessContrast.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.BrightnessContrast.#ctor(System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.AddNoise" /> class using the specified brightness and contrast modifiers.</summary>
            <param name="brightness">The brightness modifier in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Brightness" /> property.</param>
            <param name="contrast">The contrast modifier in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.BrightnessContrast.Contrast" /> property.</param>
        </member>
		
<!-- Transforms.ChannelBalance -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ChannelBalance" draft="yes">
            <summary>Adjusts the channel balance of an image.</summary>
            <remarks><para>In order to modify the channel balance, specify an array of addends (<see cref="P:Aurigma.GraphicsMill.Transforms.ChannelBalance.Addends" />) and/or an array of multipliers (<see cref="P:Aurigma.GraphicsMill.Transforms.ChannelBalance.Multipliers" />).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ChannelBalance.Addends" draft="yes">
            <summary>Gets or sets an array of addends.</summary>
            <value>The array of integer values in range [-max, max] which will be added to appropriate channels of all pixels. <c>max</c> is 255 (for non-extended pixel formats) or 65535 (for extended pixel formats).</value>
            <remarks><note>If the length of this array is less than the number of channels in the target image, the rest channels will be unchanged. If there are more array entries than channels in the target image, all extra entries will be ignored.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ChannelBalance.MaxChannelCount" draft="yes">
            <summary>Gets a maximum number of channels.</summary>
            <value>The maximum number of channels. Always 5.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ChannelBalance.Multipliers" draft="yes">
            <summary>Gets or sets an array of multipliers.</summary>
            <value>The array of float values in range [-1, 1] which will be multiplied with appropriate channels of all pixels. These values are normalized to 255 (for non-extended pixel formats) or 65535 (for extended pixel formats).</value>
            <remarks><note>If the length of this array is less than the number of channels in the target image, the rest channels will be unchanged. If there are more array entries than channels in the target image, all extra entries will be ignored.</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ChannelBalance.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ChannelBalance" /> class.</summary>
        </member>
		
<!-- Transforms.CnvTransform -->
        <member name="T:Aurigma.GraphicsMill.Transforms.CnvTransform" draft="yes">
            <summary>Applies a convolution matrix transform to an image (such as sharpen or edges outline).</summary>
            <threadsafety static="false" instance="false" />
        </member>
		
<!-- Transforms.ColorConverter -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ColorConverter" draft="yes">
            <summary>Applies color conversion to an image.</summary>
            <remarks><para>This class should be used for appling color management during color conversions, drawing, and other operations where it is applicable. To choose the color management engine, use the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.ColorManagementEngine" /> property. You can specify such color management parameters as a default input profile (<see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DefaultSourceProfile" />), output profile (<see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" /> property), and profile for target device (<see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TargetDeviceProfile" /> property). A color management intent parameter is accessible through the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TransformationIntent" /> property.</para><para>After you set color management up, you can apply color conversions. This class applies two different kinds of color conversion: conversion to indexed pixel formats (color reduction) and conversion to continuous ones.</para></remarks>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#cmykToRgbCMPipeline"></code></example>
            <seealso href="converting-color-with-color-management.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color used when alpha channel is flatten.</summary>
            <value>The background color. The default value is white color.</value>
            <remarks>This property makes sense only when you convert from pixel format which supports alpha channel to pixel format which does not.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.ColorManagementEngine" draft="yes">
            <summary>Gets or sets color management engine which will be used during image transformation. Graphics Mill supports the following engines: LittleCMS and Adobe CMM. The property also allows disabling color management and perform transformation without color matching.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.ColorManagementEngine" /> to use.</value>
            <remarks><para>Color management will be applied during transformation of image between color formats in case if all the following conditions are met:</para><list type="number"><item><description>This property is set to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" /> or <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" />.</description></item><item><description>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> which needs to be transformed has a <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile" /> initialized with a correct color profile (e.g. it is embedded color profile loaded from image file, or this property is initialized after the image has been loaded or created). Additionally you can use the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DefaultSourceProfile" /> to be sure that an input profile is set.</description></item><item><description>An output color profile is initialized via the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" /> property.</description></item></list><para>If you do not need to apply color management during image transformation, set this property to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" />.</para></remarks>
            <seealso href="converting-color-with-color-management.htm" />
			<seealso href="selecting-color-management-engine.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ColorConverter.ConvertColor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Converts a given color into another color space. Color management is not applied.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to convert.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color" /> converted to another color space.</returns>
            <remarks><para>The destination color space is specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationPixelFormat" /> property. The color space of this pixel format is a destination color space.</para><para>If you want to apply color management during conversion of this color, use the <see cref="M:Aurigma.GraphicsMill.Transforms.ColorConverter.ConvertColor(Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile)" /> overload of this method. This profile will be used as an input profile, output profile is specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" /> property. The <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TargetDeviceProfile" /> property will be used as well.</para></remarks>
            <overloads><summary>Converts a given color into another color space.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ColorConverter.ConvertColor(Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.ColorProfile)" draft="yes">
            <summary>Converts a given color into another color space. Color management is applied.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> to convert.</param>
            <param name="colorProfile">An input <see cref="T:Aurigma.GraphicsMill.ColorProfile" />.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color" /> converted to another color space.</returns>
            <remarks><para>The destination color space is specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationPixelFormat" /> property. The color space of this pixel format is a destination color space.</para><para>This method allows converting colors using color management. The provided <i>colorProfile</i> used as an input profile, output profile should be specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" /> property. The <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TargetDeviceProfile" /> property will be used as well.</para><note>If an output profile is not specified or the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.ColorManagementEngine" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" />, color management is disabled.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DefaultSourceProfile" draft="yes">
            <summary>Gets or sets a default input color profile.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> which will be used if an input image doesn't contain a color profile.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationPixelFormat" draft="yes">
            <summary>Gets or sets a destination pixel format.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert an image to. The default value is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" draft="yes">
            <summary>Gets or sets the output color profile.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> specifying an output color profile.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DeviceLinkProfile" draft="yes">
            <summary>Gets or sets a device link color profile.</summary>
            <example><code language="CS" source="Samples/Code/ColorConversion.cs#deviceLinkProfile"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.Dithering" draft="yes">
            <summary>Gets or sets a dithering algorithm used to emulate missing halftones.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.DitheringType" /> used during color reduction to emulate missing halftones. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.DitheringType.FloydSteinberg" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DitheringIntensity" draft="yes">
            <summary>Gets or sets a dithering intensity.</summary>
            <value>The dithering intensity in range [0, 1]. The default value is 1.0.</value>
            <remarks>Small values of dithering intensity makes dithering less visible (if it is 0, the result is the same as for <see cref="F:Aurigma.GraphicsMill.Transforms.DitheringType.None" /> dithering type).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DropDestinationProfile" draft="yes">
            <summary>Gets or sets a boolean value defining whether the resulting file contains the destination profile.</summary>
            <value><c>true</c> if you want to drop the destination profile from the resulting file. By default, this value is <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ColorConverter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ColorConverter" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ColorConverter" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ColorConverter.#ctor(Aurigma.GraphicsMill.PixelFormat)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ColorConverter" /> class using the specified pixel format.</summary>
            <param name="format">A <see cref="T:Aurigma.GraphicsMill.PixelFormat" /> to convert an image to. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationPixelFormat" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.Opacity" draft="yes">
            <summary>Gets or sets a value to initialize alpha channel when converting from pixel format which does not support alpha to pixel format which does.</summary>
            <value>The total opacity of an image in range [0, 1]. The default value is 1.0.</value>
            <remarks>If 0, image is completely transparent, if 1, image is completely opaque.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.Palette" draft="yes">
            <summary>Gets or sets a palette used during conversion to indexed pixel formats.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorPalette" /> containing a palette used when <see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationPixelFormat" /> is one of indexed formats.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TargetDeviceProfile" draft="yes">
            <summary>Gets or sets the target device profile used for chain transformations.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.ColorProfile" /> of the target device.</value>
            <remarks><para>This profile is used to preview on one device how the image will be looking at another one. For example, let's assume you want to display on the screen how the image will be looking after being printed by specific printer. In this case set:</para><list type="number"><item><term>Output profile (<see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.DestinationProfile" />)</term><description> to monitor profile.</description></item><item><term>Target device profile (<see cref="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TargetDeviceProfile" />)</term><description> to printer profile.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TransformationIntent" draft="yes">
            <summary>Gets or sets the intent which defines gamut mapping method.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent" /> defining gamut mapping method.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ColorConverter.TransparentIndexThreshold" draft="yes">
            <summary>Gets or sets a transparency threshold.</summary>
            <value>The threshold is range [0, 255]. The default value is 128.</value>
            <remarks><para>When building a palette during color reduction for an image which should be saved to GIF, you need to have the only one transparent color. However during color reduction you may get a number of colors with a different level of transparency. To avoid this, use this property. All alpha channel values which are greater or equal to this value will be changed to 255 (fully opaque), otherwise it will be 0.</para></remarks>
        </member>
		
<!-- Transforms.ColorManagementEngine -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ColorManagementEngine" draft="yes">
            <summary>Contains possible color management engines.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" draft="yes">
            <summary>Adobe CMM.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" draft="yes">
            <summary>LittleCMS.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" draft="yes">
            <summary>Color management is disabled.</summary>
        </member>
		
<!-- Transforms.ColorQuantizationAlgorithm -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ColorQuantizationAlgorithm" draft="yes">
            <summary>Contains possible values of color quantization algorithms.</summary>
            <remarks><para>Color quantization is a process that reduces the number of distinct colors used in an image with the intention that the new image should be as visually similar as possible to the original image. It is used when you convert, say, 24-bit image to 8-bit (or lower). </para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorQuantizationAlgorithm.MedianCut">
            <summary><para>Median cut algorithm. The algorithm fits a box around all colors used in the RGB colorspace which it splits at the median value of its longest side. The algorithm stops after 255 recursions. All colors in one box are mapped to the centroid of this box.</para>
			<para>Implementing this algorithm on very big images can cause an exception in Graphics Mill x86 (32-bit) edition.</para></summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorQuantizationAlgorithm.Octree">
            <summary>Octree algorithm. The algorithm encodes image colour data as an octree up to nine levels deep. The node index to branch out from at the top level is determined by a formula that uses the most significant bits of the red, green, and blue colour components. The next lower level uses the next bit significance, and so on. Less significant bits are sometimes ignored to reduce the tree size. The algorithm is highly memory efficient because the tree's size can be limited. The bottom level of the octree consists of leaf nodes that accrue colour data not represented in the tree; these nodes initially contain single bits. If much more than the desired number of palette colours are entered into the octree, its size can be continually reduced by seeking out a bottom-level node and averaging its bit data up into a leaf node, pruning part of the tree. Once sampling is complete, exploring all routes in the tree down to the leaf nodes, taking note of the bits along the way, will yield approximately the required number of colours.</summary>
        </member>
		
<!-- Transforms.ColorTransformationIntent -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent" draft="yes">
            <summary>Contains possible values for color management rendering intents.</summary>
            <remarks><para>The definition of the rendering intent is given in ICC Profile Format Specification Version 3.4 which can be downloaded at this site:</para><para><see href="http://www.color.org">http://www.color.org</see></para><para>According to this document, rendering intent specifies the style of reproduction to be used during the evaluation of this profile in a sequence of profiles. It applies specifically to that profile in the sequence and not to the entire sequence. Typically, the user or application will set the rendering intent dynamically at runtime or embedding time.
			</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.AbsoluteColorimetric">
            <summary>Absolute colorimetric intent (also known as match intent). In this intent, any colors that fall outside the output device range are adjusted to the closest color that can be rendered, while all other colors are left unchanged. White point is preserved. For example, the whitest white of a paper is more yellow than the whitest white of a computer monitor. An image converted into the gamut of the printer using match intent would result in all colors being converted and matched into the gamut of the printer. The white point of the image is not moved to match the white point of the printer. Therefore, the distance of the colors to the white point may change. This produces an image that is less visually disconcerting to the user, but is also a less accurate rendition of printer output.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.Perceptual">
            <summary>Perceptual intent (also known as picture intent). According to clause 4.9 of ICC specification perceptual intent is a rendering intent that specifies the full gamut of the image is compressed or expanded to fill the gamut of the destination device. Gray balance is preserved but colorimetric accuracy might not be preserved.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.RelativeColorimetric">
            <summary>Relative colorimetric intent (also known as proof intent). In this intent, any colors that fall outside the output device range are adjusted to the closest color that can be rendered, while all other colors are left unchanged. However white point is not preserved. For example, the whitest white of a paper is more yellow than the whitest white of a computer monitor. An image converted into the gamut of the printer using relative colorimetric intent would result in all colors becoming more yellow. The white point of the image is moved to match the white point of the printer. All other colors in the image keep their position relative to the white point. This produces an image that more accurately reflects what the printed image will look like. However, the user may find it visually disconcerting.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.RelativeColorimetricBpc">
            <summary>Relative colorimetric intent (also known as proof intent) with additional black point compensation. In addition to operations made with <see cref="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.RelativeColorimetric" /> intent, this one tries to improve image histogram.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ColorTransformationIntent.Saturation">
            <summary>Saturation intent (also known as graphics intent). According to clause 4.12 of ICC specification, saturation intent is a rendering intent that specifies the saturation of the pixels in the image is preserved perhaps at the expense of accuracy in hue and lightness.</summary>
        </member>
		
<!-- Transforms.CombineMode -->
        <member name="T:Aurigma.GraphicsMill.Transforms.CombineMode" draft="yes">
            <summary>Contains possible combine modes. They are used when the bitmap is drawn on window or blended with another bitmap.</summary>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Add" draft="yes">
            <summary>Add combine mode. It sums pixel values of the source and overlaying images taking into account their transparency.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Alpha" draft="yes">
            <summary>Alpha combine mode. Each overlaying pixel is blended with the corresponding source pixel. The opacity value of the overlaying image is taken into account. Makes sense only if the overlaying image has alpha channel.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.AlphaOverlapped" draft="yes">
            <summary>Alpha overlapped combine mode. The same as <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Alpha" />, but the resulting alpha channel is calculated as the maximum between the source and overlaying alpha channels. This mode is useful only when both, the source and the overlaying images have alpha channels.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.AlphaOverlay" draft="yes">
            <summary>Alpha overlay combine mode. Allows blending multiple transparent images and supports image reordering without quality loss.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.And" draft="yes">
            <summary>AND combine mode. Bitwise AND operation is applied to the source and overlaying colors.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Behind" draft="yes">
            <summary>Behind combine mode. Colors are blended only in the semi-transparent areas of the overlaying image. The opaque areas are ignored.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Color" draft="yes">
            <summary>Color combine mode. Hue and saturation of the resulting color are taken from the overlaying color, and the luminosity is taken from the overlaying color. This mode is useful for tinting images.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Copy" draft="yes">
            <summary>Copy combine mode. Each overlaying pixel replaces the corresponding source pixel. The opacity value is ignored, as a result the transparent zones become black.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Difference" draft="yes">
            <summary>Difference combine mode. The resulting value is the difference between the source and overlaying colors, whichever has the greater luminosity.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Divide" draft="yes">
            <summary>Divide combine mode. The resulting value is source pixel divided by the overlaying one.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Hue" draft="yes">
            <summary>Hue combine mode. The hue of the resulting color is taken from the overlaying color, and the other components, saturation and luminosity, are taken from the source color.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.IfDarker" draft="yes">
            <summary>"If Darker" combine mode. The resulting color is defined as the darkest between the colors of source and overlaying images.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.IfLighter" draft="yes">
            <summary>"If Lighter" combine mode. The resulting color is defined as the lightest between the colors of source and overlaying images.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Invert" draft="yes">
            <summary>Invert combine mode. The overlaying image is inverted and blended with the source image in the same way as in the <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Alpha" /> mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Luminosity" draft="yes">
            <summary>Luminosity combine mode. The luminosity of the resulting color is taken from the overlaying color, and the other components are taken from the source color.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Multiply" draft="yes">
            <summary>Multiply combine mode. The source color is multiplied by the overlaying one. The resulting value is normalized to the maximum luminosity value.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Or" draft="yes">
            <summary>OR combine mode. Bitwise OR operation is applied to the source and overlaying colors.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Overlay" draft="yes">
            <summary>Overlay combine mode. Depending on the source pixel luminosity the <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Screen" /> (lightening) or the <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Multiply" /> (darkening) mode is used to calculate the resulting pixel. The lighter the source pixel, the lighter the resulting pixel; and the darker the source pixel, the darker the resulting pixel.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Saturation" draft="yes">
            <summary>Saturation combine mode. The saturation of the resulting color is taken from the overlaying color, and the other components are taken from the source color.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Screen" draft="yes">
            <summary>Screen combine mode. The overlaying color is inverted and multiplied by the source one. The resulting value is normalized to the maximum luminosity value.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Subtract" draft="yes">
            <summary>Substract combine mode. The source and overlaying colors are added, and then the maximum luminosity value is subtracted from the resulting value.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Texturize" draft="yes">
            <summary>Texturize combine mode. The overlaying image is converted to grayscale and blended with the source image in the same way as in the <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Alpha" /> mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.CombineMode.Xor" draft="yes">
            <summary>XOR combine mode. Bitwise XOR operation is applied to the source and overlaying colors.</summary>
        </member>
		
<!-- Transforms.Combiner -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Combiner" draft="yes">
            <summary>Combines two images using the specified mode.</summary>
            <remarks><para>Images can be combined in the different way: just copying pixels from one image to another, alpha blending, bitwise operations, etc. You can adjust it with <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.Mode" /> property.</para></remarks>
            <example><para>The following code creates a collage from the two photos, given mask and background images:</para><code language="CS" source="Samples/Code/Drawing.cs#collage"></code></example>
            <seealso href="combine-modes.htm" />
			<seealso href="overlaying-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Combiner.AutoDisposeTopImage" draft="yes">
            <summary>Gets or sets a value indicating whether an overlay image should be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" />.</summary>
            <value><c>true</c> if the overlay image (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.TopImage" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Combiner.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Combiner.Mode" draft="yes">
            <summary>Gets or sets a combine mode.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.CombineMode" /> specifying how source and overlaying pixels should be combined. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.CombineMode.Alpha" />.</value>
            <seealso href="combine-modes.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Combiner.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Combiner.#ctor(Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class using the specified combine mode.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.CombineMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Combiner.#ctor(Aurigma.GraphicsMill.Transforms.CombineMode,Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class using the specified combine mode and overlaying image.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.CombineMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
            <param name="topImage">An overlay image. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.TopImage" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Combiner.#ctor(Aurigma.GraphicsMill.Transforms.CombineMode,Aurigma.GraphicsMill.Pipeline,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class using the specified settings.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.CombineMode" /> specifying how source and overlaying pixels should be combined. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
            <param name="topImage">An overlay image. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.TopImage" /> property.</param>
            <param name="autoDisposeTopImage"><c>true</c> if the overlay image (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.TopImage" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" />; otherwise, <c>false</c>. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Combiner.AutoDisposeTopImage" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Combiner.TopImage" draft="yes">
            <summary>Gets or sets an overlay image.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Pipeline" /> producing an overlay image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Combiner.X" draft="yes">
            <summary>Gets or sets the x-coordinate of the upper-left corner of the overlay image.</summary>
            <value>The x-coordinate of the upper-left corner of the overlay image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Combiner.Y" draft="yes">
            <summary>Gets or sets the y-coordinate of the upper-left corner of the overlay image.</summary>
            <value>The y-coordinate of the upper-left corner of the overlay image.</value>
        </member>
		
<!-- Transforms.CombinerOnInitEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Transforms.CombinerOnInitEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.PipelineElement.OnInit">Combiner.OnInit</see> event.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.CombinerOnInitEventArgs.TopImageParams" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of a top image to initialize the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> with.</summary>
            <value>An <see cref="T:Aurigma.GraphicsMill.ImageParams" /> containing parameters of a top image to initialize the <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> with.</value>
        </member>
		
<!-- Transforms.Contrast -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Contrast" draft="yes">
            <summary>Corrects a contrast of an image.</summary>
            <remarks><para>This class provides a simple contrast adjustment functionality. Being extremely easy-to-use for end user (it has the single parameter <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" />), it is used by professional retouchers very seldom (because as usual it leads to losses of details in highlights and/or shadows).</para><para>You can also use this transform in automatic mode using <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> property.</para><para>If you want to apply both brightness and contrast, you should consider the <see cref="T:Aurigma.GraphicsMill.Transforms.BrightnessContrast" /> transform. Both of these operation will be performed at the single pass, so it will work faster than sequential execution of <see cref="T:Aurigma.GraphicsMill.Transforms.Brightness" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" />.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" draft="yes">
            <summary>Gets or sets the contrast modifier.</summary>
            <value>The contrast modifier in range <c>[-1, 1]</c>. The default value is <c>0</c>. Minimum value <c>-1</c> will produce absolutely gray image, neutral value <c>0</c> does no effect, maximum value <c>1</c> makes the image extremely posterized.</value>
            <remarks><note>If you set <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> property to <c>true</c>, and modifying <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> is reset to <c>false</c>.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" draft="yes">
            <summary>Gets or sets a value indicating whether the transform should be run in automatic mode.</summary>
            <value><c>true</c> if the contrast is automatic; otherwise, <c>false</c>.</value>
            <remarks><note>If you set <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> property to <c>true</c>, and modifying <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> is reset to <c>false</c>.</note><para>When you create <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> without specifying contrast amount, default value is <c>true</c>. If amount is passed to constructor, default value is <c>false</c>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Contrast.CalculateAuto(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Returns a contrast modifier which this class would apply in automatic mode.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> for which the contrast modifier is calculated automatically.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> which represents the contrast modification.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Contrast.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Contrast.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> class using the specified brightness modifier.</summary>
            <param name="amount">The contrast modifier in range [-1, 1]. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Amount" /> property.</param>
        </member>
		
<!-- Transforms.Crop -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Crop" draft="yes">
            <summary>Crops an image.</summary>
            <remarks><para>Crop transform returns pixels which are inside of the <i>cropping rectangle</i> (see <see cref="P:Aurigma.GraphicsMill.Transforms.Crop.Rectangle" /> property).</para></remarks>
            <example><para>The following code crops a 50*100 pixels rectangle from an image and saves the result in JPEG format.</para><code language="CS" source="Samples/Code/Transforms.cs#cropOutOfPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Crop.Apply(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Produces a cropped copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to crop.</param>
            <param name="x">The x-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="width">The width of the cropping rectangle.</param>
            <param name="height">The height of the cropping rectangle.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of crop transformation.</returns>
            <overloads><summary>Produces a cropped copy of a given bitmap. The source bitmap remains unchanged.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Crop.Apply(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle)" draft="yes">
            <summary>Produces a cropped copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to crop.</param>
            <param name="rect">The cropping rectangle.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of crop transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Crop.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class.</summary>
            <remarks>If you use this constructor, do not forget to initialize a cropping rectangle via the <see cref="P:Aurigma.GraphicsMill.Transforms.Crop.Rectangle" /> property.</remarks>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Crop.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class using the specified cropping rectangle.</summary>
            <param name="x">The x-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="width">The width of the cropping rectangle.</param>
            <param name="height">The height of the cropping rectangle.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Crop.#ctor(System.Drawing.Rectangle)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class using the specified cropping rectangle.</summary>
            <param name="rect">The cropping rectangle. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Crop.Rectangle" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Crop.Rectangle" draft="yes">
            <summary>Gets or sets a cropping rectangle.</summary>
            <value>The cropping rectangle.</value>
            <remarks>By default this rectangle has zero width and height. That's why it is necessary to always initialize this property before applying crop.</remarks>
        </member>
		
<!-- Transforms.Cylindrize -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Cylindrize" draft="yes">
            <summary>Applies a cylindrize transformation on an image.</summary>
            <remarks><para>This transformation is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug. In this case the following sequence is used:</para><list type="number"><item><description>Use <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> to fit the bitmap to cylinder parameters.</description></item><item><description>Use <see cref="T:Aurigma.GraphicsMill.Transforms.Cylindrize" /> to distort the bitmap.</description></item><item><description>Combine distorted bitmap and mug image using <see cref="T:Aurigma.GraphicsMill.Transforms.Combiner" /> class or <see cref="M:Aurigma.GraphicsMill.Bitmap.Draw(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" /> method.</description></item></list><para>You can specify a number of cylinder parameters: height (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CylinderHeight" /> property), half-perimeter (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CylinderHalfPerimeter" /> property), color (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CupColor" /> property). You can also specify position of the image relatively top left corner of the "face" part of cylinder (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.HorizontalOffset" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.VerticalOffset" /> properties). If the cylinder (e.g. mug) is tilted, you can take it into account with <see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.SlopeAngle" /> property. And of course like for any other geometry bitmap transform, you can specify interpolation algorithm (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.InterpolationMode" /> property) and background color (<see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.BackgroundColor" /> property).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Cylindrize.~Cylindrize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Cylindrize.Apply(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Produces a cylindrized copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to cylindrize.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of cylindrize transformation.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color. This color will be used to fill all the areas which are out of the cylinder.</summary>
            <value>The background color. The default value is transparent white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CupColor" draft="yes">
            <summary>Gets or sets a cylinder color. This color is used to fill the cylinder surface which is not covered with bitmap pixels.</summary>
            <value>The cylinder color. The default value is transparent white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CylinderHalfPerimeter" draft="yes">
            <summary>Gets or sets a half-perimeter of the cylinder (i.e. length of the surface visible to user).</summary>
            <value>A half-perimeter of the cylinder. The default value is -1.</value>
            <remarks>If this property is -1, the width of the bitmap will be taken. If you want entire image to fit on the visible part of cylinder, you should resize the bitmap first to make its width equal to cylinder half-perimeter.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CylinderHeight" draft="yes">
            <summary>Gets or sets the cylinder height.</summary>
            <value>The height of the cylinder. The default value is -1.</value>
            <remarks>If this property is -1, the height of the bitmap will be taken.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Cylindrize.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Transforms.Cylindrize" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Cylindrize.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.HorizontalOffset" draft="yes">
            <summary>Gets or sets a horizontal offset of the bitmap relatively to the upper-left corner of the visible part of the cylinder.</summary>
            <value>The horizontal offset of the bitmap on the cylinder.</value>
            <remarks>If the offset is negative, the image will be shifted left on cylinder and part of the image will be invisible. Positive offset will shift the image right. Empty space between the left edge of bitmap and edge of the visible part of cylinder will be filled with <see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CupColor" />.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.InterpolationMode" draft="yes">
            <summary>Gets or sets the interpolation mode of the transform (i.e. algorithm which is used to resample bitmap).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used in the transform.</value>
            <remarks>As usual fast interpolation algorithms produces lower quality comparing to slow ones, and vice versa. That's why using this property you can select between speed and quality of cylindrizing.</remarks>
            <seealso href="interpolation-modes-comparison.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Cylindrize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Cylindrize" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.SlopeAngle" draft="yes">
            <summary>Gets or sets a slope angle of the cylinder.</summary>
            <value>A slope angle of the cylinder. The default value is 5.</value>
            <remarks>It is often you need to bend the image on the cylindric surface like a mug, which is slightly tilted toward to user. It happens when objective of the camera shooting the mug is higher than mug. In this case you should estimate the angle of the slope and set it to this property to obtain more realistic result.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Cylindrize.VerticalOffset" draft="yes">
            <summary>Gets or sets a vertical offset of the bitmap relatively to the upper-left corner of the visible part of the cylinder.</summary>
            <value>The vertical offset of the bitmap on the cylinder.</value>
            <remarks>If the offset is negative, the image will be shifted up on cylinder and part of the image will be invisible. Positive offset will shift the image down. Empty space between the top edge of bitmap and edge of the visible part of cylinder will be filled with <see cref="P:Aurigma.GraphicsMill.Transforms.Cylindrize.CupColor" />.</remarks>
        </member>
		
<!-- Transforms.Desaturate -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Desaturate" draft="yes">
            <summary>Desaturates an image.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Desaturate.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Desaturate" /> class.</summary>
        </member>
		
<!-- Transforms.DistributionKind -->
        <member name="T:Aurigma.GraphicsMill.Transforms.DistributionKind" draft="yes">
            <summary>Contains distribution kinds to generate random values for the additive noise transform.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DistributionKind.Gaussian">
            <summary>Gaussian (normal) distribution.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DistributionKind.Uniform">
            <summary>Uniform distribution.</summary>
        </member>

<!-- Transforms.DitheringType -->
        <member name="T:Aurigma.GraphicsMill.Transforms.DitheringType">
            <summary>Contains possible values for dithering types. Dithering is an algorithm of color reducing which allows to preserve halftones.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Burkes">
            <summary>Burkes dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Fan">
            <summary>Fan dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.FloydSteinberg">
            <summary>Floyd-Steinberg dithering algorithm (most wide-spread one).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Jarvis">
            <summary>Jarvis dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Noise">
            <summary>White noise dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.None">
            <summary>No dithering.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedBayer2">
            <summary>Ordered Bayer dithering algorithm of order 2.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedBayer3">
            <summary>Ordered Bayer dithering algorithm of order 3.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedBayer4">
            <summary>Ordered Bayer dithering algorithm of order 4.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedSpiral2">
            <summary>Ordered spiral dithering algorithm of order 2.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedSpiral3">
            <summary>Ordered spiral dithering algorithm of order 3.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.OrderedSpiral4">
            <summary>Ordered spiral dithering algorithm of order 4.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Original">
            <summary>Original dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Sierra">
            <summary>Sierra dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Stephenson">
            <summary>Stephenson dithering algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.DitheringType.Stucki">
            <summary>Stucki dithering algorithm.</summary>
        </member>
		
<!-- Transforms.EdgeDetect -->
        <member name="T:Aurigma.GraphicsMill.Transforms.EdgeDetect" draft="yes">
            <summary>Outlines edges of an image.</summary>
            <remarks>This class uses certain spatial filters to detect edges. Using the <see cref="P:Aurigma.GraphicsMill.Transforms.EdgeDetect.Mode" /> property you can specify the edge detector.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.EdgeDetect.Mode" draft="yes">
            <summary>Gets or sets an edge detector used to outline image edges.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetectMode" /> specifying an edge detector.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.EdgeDetect.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetect" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetect" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.EdgeDetect.#ctor(Aurigma.GraphicsMill.Transforms.EdgeDetectMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetect" /> class using the specified edge detector</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetectMode" /> specifying an edge detector. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.EdgeDetect.Mode" /> property.</param>
        </member>
		
<!-- Transforms.EdgeDetectMode -->
        <member name="T:Aurigma.GraphicsMill.Transforms.EdgeDetectMode" draft="yes">
            <summary>Contains possible edge detect modes for <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetect" /> transform.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.Glow">
            <summary>Glow edge detect mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.LaplaceHV">
            <summary>Laplacian edge detector (horizontal/vertical).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.LaplaceOmni">
            <summary>Laplacian edge detector (omni-directional).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.Pattern">
            <summary>Pattern edge detect mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.Prewitt">
            <summary>Prewitt edge detector.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.Sharp">
            <summary>Sharp edge detect mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.SharpMore">
            <summary>Strong sharp edge detect mode.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.EdgeDetectMode.TraceContour">
            <summary>Trace contour edge detector.</summary>
        </member>
		
<!-- Transforms.Emboss -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Emboss" draft="yes">
            <summary>Applies an emboss effect on an image.</summary>
            <remarks><para>This effect imitates embossed image. You can adjust angle of the emboss (property <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Angle" />). The strength of the effect is specified by <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Amount" />. Also you can set a height of the emboss (property <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Height" />). Avoid to set too large height, because it will not be looking naturally. The last parameter you can change is a brightness of the output image (property <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Brightness" />).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Emboss.Amount" draft="yes">
            <summary>Gets or sets an emboss amount ("strength" of embossing).</summary>
            <value>The emboss amount ("strength" of embossing). The default value is 100.</value>
            <remarks>This property is specified in percents - values below 100 reduce contrast, values above 100 increase contrast.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Emboss.Angle" draft="yes">
            <summary>Gets or sets an emboss angle.</summary>
            <value>The emboss angle (in degrees). The default value is 135.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Emboss.Brightness" draft="yes">
            <summary>Gets or sets an embossed image brightness.</summary>
            <value>The embossed image brightness in range [-1, 1]. The default value is <c>0</c>.5f.</value>
            <remarks>Typically it is useless to specify values which is out of range [0, 1]. However you still can specify value less than 0.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Emboss.Height" draft="yes">
            <summary>Gets or sets an embossing pixel height.</summary>
            <value>The embossed image height (in pixels). The default value is 3.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Emboss.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Emboss" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Emboss" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Emboss.#ctor(System.Single,System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Emboss" /> class using the specified settings.</summary>
            <param name="angle">The emboss angle (in degrees). You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Angle" /> property.</param>
            <param name="height">The embossed image height (in pixels). You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Height" /> property.</param>
            <param name="amount">The emboss amount ("strength" of embossing). You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.Emboss.Amount" /> property.</param>
        </member>
		
<!-- Transforms.FadeType -->
        <member name="T:Aurigma.GraphicsMill.Transforms.FadeType">
            <summary>Contains various fade types for a number of artistic effects.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FadeType.Linear">
            <summary>Linear fading.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FadeType.None">
            <summary>No fading.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FadeType.Nonlinear">
            <summary>Non-linear fading.</summary>
        </member>
		
<!-- Transforms.Flip -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Flip" draft="yes">
            <summary>Flips an image.</summary>
            <remarks>This transformation supports the only one setting - flip type (<see cref="P:Aurigma.GraphicsMill.Transforms.Flip.Type" />).</remarks>
            <example><para>The following code flips an image horizontally.</para><code language="CS" source="Samples/Code/Transforms.cs#flipOutOfPlace"></code></example>
            <seealso href="rotating-and-flipping-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Flip.Apply(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Transforms.FlipType)" draft="yes">
            <summary>Produces a flipped copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to flip.</param>
            <param name="type">A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> to flip the given bitmap.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of flip transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Flip.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Flip" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Flip" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Flip.#ctor(Aurigma.GraphicsMill.Transforms.FlipType)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Flip" /> class using the specified mode.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Flip.Type" draft="yes">
            <summary>Gets or set a flip mode.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> to flip an image.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.FlipType" draft="yes">
            <summary>Contains various types for the flip transform.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FlipType.Both">
            <summary>Horizontal and vertical flip.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FlipType.Horizontal">
            <summary>Horizontal flip.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FlipType.None" draft="yes">
            <summary>No flipping.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FlipType.Vertical">
            <summary>Vertical flip.</summary>
        </member>
		
<!-- Transforms.FloodFill -->
        <member name="T:Aurigma.GraphicsMill.Transforms.FloodFill" draft="yes">
            <summary>Applies a flood fill transformation (analogue to Paint Bucket tool in the Adobe® Photoshop®) to an image.</summary>
            <remarks><para>This transform works in the following way: you specify a start point (with <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Point" /> property) and it begins filling this point and its neighbour with a color specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" /> property until a boundary will be met. Boundary can be defined in different ways: either as pixels of color equal to <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" /> property, or pixels which differ from this color. It is specified with <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" /> property.</para><para>As color values can differ very slightly (due various factors: noise, JPEG compression artifacts, or image features), sometimes algorithm can work not very well. In these situations you can use property <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" />. This property means the how close current pixel color can be to target color to match. If tolerance is very small only colors very close to target color matches. If big value specified (near 1), almost all colors matches. Thereby if property <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.ProcessHalftones" /> is set to <c>false</c>, algorithm will just replace all matching colors, otherwise it will blend matching colors with the original pixel using distance between these colors as a transparency level (this way you can produce more or less smooth edges on the boundaries).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" draft="yes">
            <summary>Gets or sets a color used to fill the surface.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill with. The default value is black color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" draft="yes">
            <summary>Gets or sets a value specifying how to determine the filling area boundary.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFillMode" /> value specifying how to determine the filling area boundary. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.FloodFillMode.Surface" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.FloodFill.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFill" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFill" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.FloodFill.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.FloodFillMode,System.Single,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFill" /> class using the specified settings.</summary>
            <param name="x">The x-coordinate of the point to start filling from. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Point" /> property.</param>
            <param name="y">The y-coordinate of the point to start filling from. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Point" /> property.</param>
            <param name="fillColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill with. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" /> property.</param>
            <param name="targetColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> used to determine the filling area boundaries. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" /> property.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFillMode" /> value specifying how to determine the filling area boundary. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" /> property.</param>
            <param name="tolerance">The tolerance for the target color in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" /> property.</param>
            <param name="preserveAlpha"><c>true</c> if to preserve alpha channel; otherwise, <c>false</c>. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.PreserveAlpha" /> property.</param>
            <param name="processHalftones"><c>true</c> if tolerant colors are alpha-blended; otherwise, <c>false</c>. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.ProcessHalftones" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.FloodFill.#ctor(System.ValueType!System.Drawing.Point!System.Runtime.CompilerServices.IsBoxed,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.FloodFillMode,System.Single,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFill" /> class using the specified settings.</summary>
            <param name="point">A point to start filling from. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Point" /> property.</param>
            <param name="fillColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to fill with. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" /> property.</param>
            <param name="targetColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> used to determine the filling area boundaries. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" /> property.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFillMode" /> value specifying how to determine the filling area boundary. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" /> property.</param>
            <param name="tolerance">The tolerance for the target color in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" /> property.</param>
            <param name="preserveAlpha"><c>true</c> if to preserve alpha channel; otherwise, <c>false</c>. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.PreserveAlpha" /> property.</param>
            <param name="processHalftones"><c>true</c> if tolerant colors are alpha-blended; otherwise, <c>false</c>. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.ProcessHalftones" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.Point" draft="yes">
            <summary>Gets or sets a starting point for the algorithm.</summary>
            <value>A point to start filling from.</value>
            <remarks>The default flood fill start position is the upper-left corner of the bitmap (point with coordinates (0, 0)).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.PreserveAlpha" draft="yes">
            <summary>Gets or sets a value indicating whether to leave alpha channel intacted with the flood fill algorithm.</summary>
            <value><c>true</c> if to preserve alpha channel; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
            <remarks>If <c>true</c>, alpha channel will not be overwritten by the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" />.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.ProcessHalftones" draft="yes">
            <summary>Gets or sets a value indicating whether to fill colors which are not exactly match the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" />.</summary>
            <value><c>true</c> if tolerant colors are alpha-blended; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
            <remarks>This property specifies how to handle situations when the current color does not exactly match target color, but tolerant to it (with specified the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" /> property). If <c>false</c>, this pixel is replaced with <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.FillColor" />, if <c>true</c>, it is alpha-blended (alpha is calculated as 1 - T, where T is actual tolerance between these colors).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" draft="yes">
            <summary>Gets or sets a target color that is used to find the boundaries of area to fill.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> used to determine the filling area boundaries. The default value is a white color.</value>
            <remarks>If <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" /> is <see cref="F:Aurigma.GraphicsMill.Transforms.FloodFillMode.Border" />, this property specifies a border color (when algorithm meets this color, it stops filling). If <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Mode" /> is <see cref="F:Aurigma.GraphicsMill.Transforms.FloodFillMode.Surface" />, this property specifies a surface color (algorithm continue filling till current color is the same as target color).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" draft="yes">
            <summary>Gets or sets a maximum allowed tolerance for the target color.</summary>
            <value>The tolerance for the target color in range [0, 1]. The default value is <c>0</c>.1.</value>
            <remarks>This property specifies an admissible tolerance (distance between colors in color space) when comparing current color and target color (see comments for <i>targetColor</i>). Minimum value (0) means exact match of the colors, maximum value (1) means that any color matches.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.FloodFillMode" draft="yes">
            <summary>Contains values which specify when stop filling during the <see cref="T:Aurigma.GraphicsMill.Transforms.FloodFill" /> transformation.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FloodFillMode.Border" draft="yes">
            <summary>The algorithm stops filling when it meets a pixel with the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" /> (or similar with a given <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" />).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.FloodFillMode.Surface" draft="yes">
            <summary>The algorithm continues filling till the current color is the same as the <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.TargetColor" /> (or similar with a given <see cref="P:Aurigma.GraphicsMill.Transforms.FloodFill.Tolerance" />).</summary>
        </member>
		
<!-- Transforms.GreenScreenRemoval -->
        <member name="T:Aurigma.GraphicsMill.Transforms.GreenScreenRemoval" draft="yes">
            <summary>Removes green areas in an image.</summary>
            <remarks>This transform is required to replace green background with another. Such technique is called color keying.</remarks>
            <seealso href="color-keying.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.GreenScreenRemoval.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.GreenScreenRemoval" /> class.</summary>
            <seealso href="color-keying.htm" />
        </member>
		
<!-- Transforms.HistogramEqualize -->
        <member name="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" draft="yes">
            <summary>Applies a histogram equalization.</summary>
            <summary>Applies a histogram equalization.</summary>
            <remarks><para>Histogram equalization algorithm is used for automatically enhancing the image contrast. As usual it makes the image too posterized, that's why it is seldom used to with photos (you should use <see cref="T:Aurigma.GraphicsMill.Transforms.Contrast" /> effect with <see cref="P:Aurigma.GraphicsMill.Transforms.Contrast.Auto" /> property set to <c>true</c>). However it suits for scientific tasks (as a preparation before applying some specific algorithm like vectorization, recognition, etc).</para><para>The main idea of this algorithm is to build a look-up table (LUT) which makes the bitmap histogram equalized (all histogram entries are equal each other). Actually the histogram is never equalized absolutely, however this algorithm makes it as much as possible. After that this LUT is applied using <see cref="T:Aurigma.GraphicsMill.Transforms.LutTransform" /> class.</para><para>This class enables you to use not only histogram of the source bitmap, but any other histogram too. In this case algorithm will build the LUT for this histogram, but apply this LUT on the source bitmap. To specify another histogram, use property <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.Histogram" />. If you want to get a histogram from the bitmap automatically, set <c>null</c> to this property.</para></remarks>
            <threadsafety static="false" instance="false" />
			<threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.Histogram" draft="yes">
            <summary>Gets or sets a histogram to be equalized.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Histogram" /> to equalize. The default value is <c>null</c>.</value>
            <remarks>If histogram is not set (this property is <c>null</c>), algorithm automatically builds it from the bitmap at which the effect is applied (depending on <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.HistogramMode" /> property). Otherwise it will build LUT that equalizes this histogram and apply it on the image.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.HistogramMode" draft="yes">
            <summary>Gets or sets value that specifies how to build histogram if no custom histogram specified.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> specifying how to build histogram if no custom histogram specified.</value>
            <remarks>If both <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.HistogramMode" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.Histogram" /> specified, histogram mode is ignored (custom histogram used).</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.HistogramEqualize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.HistogramEqualize.#ctor(Aurigma.GraphicsMill.Histogram)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" /> class using the specified histgram.</summary>
            <param name="histogram">A <see cref="T:Aurigma.GraphicsMill.Histogram" /> to equalize. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.Histogram" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.HistogramEqualize.#ctor(Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.HistogramEqualize" /> class using the specified histgram mode.</summary>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> specifying how to build histogram if no custom histogram specified. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.HistogramEqualize.HistogramMode" /> property.</param>
        </member>
		
<!-- Transforms.IBitmapTransform -->
        <member name="T:Aurigma.GraphicsMill.Transforms.IBitmapTransform" draft="yes">
            <summary>Defines a method to produce a transformed copy of a given bitmap.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.IBitmapTransform.Apply(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="bitmap">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of this transformation.</returns>
        </member>
		
<!-- Transforms.ImageTransmitter -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ImageTransmitter" draft="yes">
            <summary>Represents a pipeline element that creates a non-transformation transform.</summary>
			<remarks><para>This transform does nothing with image. It can be used to pass data to other transforms.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ImageTransmitter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ImageTransmitter" /> class.</summary>
        </member>

<!-- Transforms.InterpolationMode -->
        <member name="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" draft="yes">
            <summary>Contains possible interpolation modes for geometrical transformations applied to images.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.High" draft="yes">
            <summary>Best quality algorithm (usually lowest speed).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Low" draft="yes">
            <summary>Lowest quality algorithm, but usually fastest one.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" draft="yes">
            <summary>Medium quality algorithm (as usual with medium speed).</summary>
        </member>
		
<!-- Transforms.Invert -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Invert" draft="yes">
            <summary>Inverts all colors in an image.</summary>
            <remarks>This transform has no parameters.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Invert.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Invert" /> class.</summary>
        </member>
		
<!-- Transforms.Levels -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Levels" draft="yes">
            <summary>Applies levels correction to an image.</summary>
            <remarks><para>Using this class you can apply a tone correction similar to Adobe® Photoshop® Levels effect. You specify <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Shadows" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Midtones" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Highlights" />, as well as <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.MinimumLevel" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.MaximumLevel" /> modifiers. These values work in the same way as appropriate sliders in Adobe® Photoshop®.</para><para>It also can be applied automatically. To do it, set <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Auto" /> property to <c>true</c>.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.Auto" draft="yes">
            <summary>Gets or sets a value indicating whether the transform should be run in automatic mode.</summary>
            <value><c>true</c> if the levels correction is automatic; otherwise, <c>false</c>.</value>
            <remarks><note>If you set <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Auto" /> property to <c>true</c>, and modifying other settings, <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Auto" /> is reset to <c>false</c>.</note><para>When you create <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" /> without settings, default value is <c>true</c>. If the settings are passed to constructor, default value is <c>false</c>.
			</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.Highlights" draft="yes">
            <summary>Gets or sets a highlights level modifier.</summary>
            <value>The highlights level modifier in range [0, 1].</value>
            <remarks><para>This value is normalized to 1. Inside the transform it will be stretched to 255 or 65355 depending on pixel format (for 8 bits per channel formats it will be 255, for 16 bit per channel - 65355). For example, if you apply this transform on the bitmap with <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" /> pixel format, and this property is 0.9, algorithm will treat it as 229. </para><para>With this property you specify the upper bound of new tone range.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.HistogramMode" draft="yes">
            <summary>Gets or sets value that specifies how to build histogram during levels adjusting.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting.</value>
            <remarks>Adobe® Photoshop® builds histogram using <see cref="F:Aurigma.GraphicsMill.HistogramMode.Sum" /> technique.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.MaximumLevel" draft="yes">
            <summary>Gets or sets a maximum output level.</summary>
            <value>The maximum output level in range [0, 1].</value>
            <remarks><para>This value is normalized to 1. Inside the transform it will be stretched to 255 or 65355 depending on pixel format (for 8 bits per channel formats it will be 255, for 16 bit per channel - 65355). For example, for example, if you apply this transform on the bitmap with <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" /> pixel format, and this property is 0.9, algorithm will treat it as 229.</para><para>This property is useful when you are preparing an image for printing at the printer which does not support too high tone levels. This way instead of truncating highlights you can compress a tone range and preserve details in highlights at the hardcopy.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.Midtones" draft="yes">
            <summary>Gets or sets a midtones modifier.</summary>
            <value>The midtones modifier in range [0.1, 10].</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.MinimumLevel" draft="yes">
            <summary>Gets or sets a minimum output level.</summary>
            <value>The minimum output level in range [0, 1].</value>
            <remarks><para>This value is normalized to 1. Inside the transform it will be stretched to 255 or 65355 depending on pixel format (for 8 bits per channel formats it will be 255, for 16 bit per channel - 65355). For example, for example, if you apply this transform on the bitmap with <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" /> pixel format, and this property is 0.1, algorithm will treat it as 25. </para><para>This property is useful when you are preparing image for printing at the printer which does not support too low tone levels. This way instead of truncating shadows you can compress a tone range and preserve details in shadows at the hardcopy.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Levels.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Levels.#ctor(Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" /> class using the specified histogram mode.</summary>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.HistogramMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Levels.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,Aurigma.GraphicsMill.HistogramMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Levels" /> class using the specified settings.</summary>
            <param name="minimumLevel">The minimum output level in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.MinimumLevel" /> property.</param>
            <param name="maximumLevel">The maximum output level in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.MaximumLevel" /> property.</param>
            <param name="shadows">The shadows level modifier in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Shadows" /> property.</param>
            <param name="midtones">The midtones modifier in range [0.1, 10]. You can change it later using  You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Midtones" /> property.</param>
            <param name="highlights">The highlights level modifier in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.Highlights" /> property.</param>
            <param name="histogramMode">A <see cref="T:Aurigma.GraphicsMill.HistogramMode" /> value that specifies how to build histogram during levels adjusting. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Levels.HistogramMode" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.Shadows" draft="yes">
            <summary>Gets or sets a shadows level modifier.</summary>
            <value>The shadows level modifier in range [0, 1].</value>
            <remarks><para>This value is normalized to 1. Inside the transform it will be stretched to 255 or 65355 depending on pixel format (for 8 bits per channel formats it will be 255, for 16 bit per channel - 65355). For example, for example, if you apply this transform on the bitmap with <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" /> pixel format, and this property is 0.1, algorithm will treat it as 25.</para><para>With this property you specify the lower bound of new tone range.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Levels.Threshold" draft="yes">
            <summary>Gets or sets a threshold level.</summary>
            <value>The threshold level on which correction should be based.</value>
            <remarks><para>The threshold value is used to define a percent of pixels on edges of the tonal range to discard. Threshold = 1 is 100% of pixels. To get more or less realistic result, use a value less than 1% (0.01). For example: </para><list type="bullet"><item><description>If you want to get a result similar to Photoshop® 7, use 0.5% (0.005).</description></item><item><description>If you want a result similar to Photoshop CS or later, use 0.1% (0.001).</description></item></list></remarks>
        </member>
		
<!-- Transforms.Lut -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Lut" draft="yes">
            <summary>Represents a look-up table (LUT) used for intensity transformation.</summary>
            <remarks><para>Look-up tables are used in most tone correction algorithms. LUT defines a "luminosity function", in other words, a rule which translate channel luminosity to another value. This class defines this function as an array of points and interpolation algorithm.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.GetInterpolatedValues" draft="yes">
            <summary>Retruns an array of luminosity values produced by this function.</summary>
            <returns>An array of luminosity values in range [0, 255] for common pixel formats and [0, 65535] for the extended ones.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Lut.InterpolationMode" draft="yes">
            <summary>Gets or set an interpolation algorithm used to connect LUT points.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.LutInterpolationMode" /> used to connect LUT points.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.#ctor(System.Collections.Generic.ICollection{System.Drawing.Point},Aurigma.GraphicsMill.Transforms.LutInterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> class using the specified collection of points.</summary>
            <param name="points">A <see cref="System.Collections.Generic.ICollection{System.Drawing.Point}" /> of <see cref="T:System.Drawing.Point" /> to initialize this <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> with.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.LutInterpolationMode" /> used to connect LUT points. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Lut.InterpolationMode" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Lut.Points" draft="yes">
            <summary>Gets a collection of points.</summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Drawing.Point" /> defining this LUT.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.SetPoint(System.Int32,System.Int32)" draft="yes">
            <summary>Sets the specified point.</summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <remarks>If the point with a given x-coordinate is exists, this method updates it with a given y-coordinate value; otherwise, this method inserts a new point.</remarks>
            <overloads><summary>Sets the specified point.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Lut.SetPoint(System.Drawing.Point)" draft="yes">
            <summary>Sets the specified point.</summary>
            <param name="point">The <see cref="T:System.Drawing.Point" /> to set.</param>
            <remarks>If the point with a given x-coordinate is exists, this method updates it with a given y-coordinate value; otherwise, this method inserts a new point.</remarks>
        </member>
		
<!-- Transforms.LutInterpolationMode -->
        <member name="T:Aurigma.GraphicsMill.Transforms.LutInterpolationMode" draft="yes">
            <summary>Contains possible interpolation algorithms for defining look-up tables.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.LutInterpolationMode.Cubic" draft="yes">
            <summary>Cubic interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.LutInterpolationMode.Linear" draft="yes">
            <summary>Linear interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.LutInterpolationMode.None" draft="yes">
            <summary>No interpolation algorithm.</summary>
        </member>
		
<!-- Transforms.LutTransform -->
        <member name="T:Aurigma.GraphicsMill.Transforms.LutTransform" draft="yes">
            <summary>Performs intensity transformation of an image using the specified look-up table (LUT).</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.LutTransform.Lut" draft="yes">
            <summary>Gets or sets a look-up table which defines this LUT transform.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> which specifies a look-up table for this LUT transform.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.LutTransform.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.LutTransform" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.LutTransform" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.LutTransform.#ctor(Aurigma.GraphicsMill.Transforms.Lut)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.LutTransform" /> class using the specified LUT.</summary>
            <param name="lut">A <see cref="T:Aurigma.GraphicsMill.Transforms.Lut" /> which specifies a look-up table for this LUT transform. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.LutTransform.Lut" /> property.</param>
        </member>
		
<!-- Transforms.MaskTransform -->
        <member name="T:Aurigma.GraphicsMill.Transforms.MaskTransform" draft="yes">
            <summary>Represents a base class for all transforms which can be applied with mask.</summary>
            <remarks><para>All the transforms inherited from this class do not modify neither pixel format of the bitmap, nor its dimensions. It means that these transforms can be applied directly in-place (without creating bitmap copy).</para><para>Another interesting feature of this class descendants is the ability to apply the effect with specified mask. Mask is a grayscale image of the same size as a target bitmap which defines "region of interest" (ROI) in raster form. Black pixels on this mask are treated as transparent and effect is applied for appropriate pixels on target bitmap. White pixels are opaque and original pixels are copied to the target bitmap. Mask can be compared with a following sequense of actions:
</para><list type="number"><item><description>Effect is applied on copy of the original image.</description></item><item><description>Mask bitmap replaces alpha channel in modified image.</description></item><item><description>This image is alpha-blended with original image.</description></item></list><para>To apply transform with mask, you should use<see cref="M:Aurigma.GraphicsMill.Transforms.MaskTransform.ApplyMaskTransform(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Bitmap)" /> method.</para></remarks>
            <seealso href="overlaying-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MaskTransform.ApplyMaskTransform(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Transforms given bitmap using specified mask.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transfrom.</param>
            <param name="mask">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing a mask for transformation.</param>
            <returns>A bitmap containing the result of the transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MaskTransform.#ctor(System.String)">
            <exclude />
        </member>
		
<!-- Transforms.Matrix -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Matrix" draft="yes">
            <summary>Encapsulates a 3-by-3 affine matrix that represents a geometric transform.</summary>
            <remarks><para>The 3x3 matrix is used to apply geometry transformation on a bitmap. Geometry transformation can be both affine (such as scale, skew or rotate) and projective (such as perspective correction).</para><para>You can create this class instance in two ways: create a <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.#ctor">new matrix</see> and then manually fill it using <see cref="P:Aurigma.GraphicsMill.Transforms.Matrix.Elements" /> property, or generate it from points representing affine or projective transformation (see <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromAffinePoints(System.Drawing.PointF[],System.Drawing.PointF[])" /> and <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromProjectivePoints(System.Drawing.PointF[],System.Drawing.PointF[])" /> methods for more details).</para><para>This class also implements some matrix algebraic operations, such as matrix inversion, multiplication, determinant calculation, and etc. Moreover you can apply affine operations at the matrix: rotate (<see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.Rotate(System.Single)" /> and <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.RotateAt(System.Single,System.Drawing.PointF)" /> methods), scale (<see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.Scale(System.Single,System.Single)" /> method), and translate (<see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.Translate(System.Single,System.Single)" /> method).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.~Matrix">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromAffinePoints(System.Drawing.PointF[],System.Drawing.PointF[])" draft="yes">
            <summary>Returns a <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the affine transform which converts one set of points to another.</summary>
            <param name="sourcePoints">An array of 3 source (input) points to transform from.</param>
            <param name="destinationPoints">An array of 3 destination (output) points to transform source points to.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the transform which converts <i>sourcePoints</i> to <i>destinationPoints</i>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromProjectivePoints(System.Drawing.PointF[],System.Drawing.PointF[])" draft="yes">
            <summary>Returns a <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the projective transform which converts one set of points to another.</summary>
            <param name="sourcePoints">An array of 4 source (input) points to transform from.</param>
            <param name="destinationPoints">An array of 4 destination (output) points to transform source points to.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the transform which converts <i>sourcePoints</i> to <i>destinationPoints</i>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single)" draft="yes">
            <summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation transform.</summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation transform.</returns>
            <remarks><para>The clockwise rotation is applied. Use negative angle value to rotate counter-clockwise.</para><para>The rotation is applied around the point of origin. To rotate around an arbitrary point, use the <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single,System.Drawing.PointF)" /> or the <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateScale(System.Single,System.Single)" />
			<seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateTranslate(System.Single,System.Single)" />
            <overloads><summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation transform.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation around the specified point transform.</summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <param name="x">The x-coordinate of the center of the rotation.</param>
            <param name="y">The x-coordinate of the center of the rotation.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation transform.</returns>
            <remarks><para>The clockwise rotation is applied. Use negative angle value to rotate counter-clockwise.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateScale(System.Single,System.Single)" />
			<seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateTranslate(System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single,System.Drawing.PointF)" draft="yes">
            <summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation around the specified point transform.</summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <param name="point">The center of the rotation.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the rotation transform.</returns>
            <remarks><para>The clockwise rotation is applied. Use negative angle value to rotate counter-clockwise.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateScale(System.Single,System.Single)" />
			<seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateTranslate(System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateScale(System.Single,System.Single)" draft="yes">
            <summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the scale transform.</summary>
            <param name="dx">The value to scale horizontally.</param>
            <param name="dy">The value to scale vertically.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the scale transform.</returns>
            <seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single)" />
			<seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateTranslate(System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateTranslate(System.Single,System.Single)" draft="yes">
            <summary>Returns the affine <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the translate transform.</summary>
            <param name="offsetX">The value to move horizontally.</param>
            <param name="offsetY">The value to move vertically.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the translate transform.</returns>
            <seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateRotate(System.Single)" />
			<seealso cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateScale(System.Single,System.Single)" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Matrix.Determinant" draft="yes">
            <summary>Gets a determinant of the matrix.</summary>
            <value>A determinant of the matrix.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Matrix.Elements" draft="yes">
            <summary>Gets an array of floating-point values that represents the elements of this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</summary>
            <value>An array of floating-point values that represents the elements of this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</value>
            <remarks><para>This array stores 9 elements - the first triple represents the first row, the second triple - the second row, and the third triple is the third row. </para><note>This property returns a reference to the array rather than a copy. It means that if you modify some element in this array, the changes will immediately reflect in the matrix.</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> and is identical to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</summary>
            <param name="object">The object to test.</param>
            <returns><c>true</c> if <i>obj</i> is the specified <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> identical to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.GetHashCode" draft="yes">
            <summary>Returns a hash code.</summary>
            <returns>The hash code for this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.GetInverted" draft="yes">
            <summary>Returns an inverted copy of this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />, if it is invertible.</summary>
            <returns>The inverted copy of this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Matrix.IsIdentity" draft="yes">
            <summary>Gets a value indicating whether this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> is the identity matrix.</summary>
            <value><c>true</c> if this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> is identity; otherwise, <c>false</c>.</value>
            <remarks><para>Identifty matrix is a matrix which has a following structure: all elements of the main diagonal (i.e. A[0,0], A[1,1], and A[2,2]) are equal to 1, all other elements are equal to 0.</para><para>This kind of matrix is very important in the linear algebra. It has the following characteristics: when you multiply any other matrix or a vector by an identify matrix, the result is the same as an input matrix or vector. In other words, it represents a neutral element for an operation of matrix multiplication.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Matrix.IsInvertible" draft="yes">
            <summary>Gets a value indicating whether this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> is invertible.</summary>
            <value><c>true</c> if this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> is invertible; otherwise, <c>false</c>.</value>
            <remarks>The matrix cannot be inverted when it is singular, i.e. its determinant is 0. Therefore you can just check the <see cref="P:Aurigma.GraphicsMill.Transforms.Matrix.Determinant" /> property instead of this one.</remarks>
            <seealso cref="P:Aurigma.GraphicsMill.Transforms.Matrix.Determinant" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Multiply(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Multiplies two <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances.</summary>
            <param name="left">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the left.</param>
            <param name="right">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> containing the result.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Multiply(System.Drawing.PointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Multiplies <see cref="T:System.Drawing.PointF" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances.</summary>
            <param name="point">The <see cref="T:System.Drawing.PointF" /> that is to the left.</param>
            <param name="m">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right.</param>
            <returns>The <see cref="T:System.Drawing.PointF" /> containing the result.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> class.</summary>
            <remarks><para>This constructor creates the identity matrix. The identity matrix has the following structure: all elements at the main diagonal are equal to 1. All other elements are equal to 0. To check whether the current instance of this class is an identify matrix, use the <see cref="P:Aurigma.GraphicsMill.Transforms.Matrix.IsIdentity" /> property.</para><para>You can also create a matrix from the points which specify input and output quadrangles. Use <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromAffinePoints(System.Drawing.PointF[],System.Drawing.PointF[])" /> and <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.CreateFromProjectivePoints(System.Drawing.PointF[],System.Drawing.PointF[])" /> static methods for this.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.#ctor(Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> class from the specified existing matrix.</summary>
            <param name="matrix">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> to be copied.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Equality(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances are equivalent.</summary>
            <param name="left">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Explicit(Aurigma.GraphicsMill.Transforms.Matrix)~System.Drawing.Drawing2D.Matrix" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix">Aurigma.GraphicsMill.Transforms.Matrix</see> instance to a <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>.</summary>
            <param name="matrix">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix">Aurigma.GraphicsMill.Transforms.Matrix</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Explicit(System.Drawing.Drawing2D.Matrix)~Aurigma.GraphicsMill.Transforms.Matrix" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> instance to a <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix">Aurigma.GraphicsMill.Transforms.Matrix</see>.</summary>
            <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix">Aurigma.GraphicsMill.Transforms.Matrix</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Inequality(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances are different.</summary>
            <param name="left">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Multiply(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Multiplies two specified <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances.</summary>
            <param name="left">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the left of the multiply operator.</param>
            <param name="right">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right of the multiply operator.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> containing the result.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.op_Multiply(System.Drawing.PointF,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Multiplies the <see cref="T:System.Drawing.PointF" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> instances.</summary>
            <param name="point">The <see cref="T:System.Drawing.PointF" /> that is to the left of the multiply operator.</param>
            <param name="m">The <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> that is to the right of the multiply operator.</param>
            <returns>The <see cref="T:System.Drawing.PointF" /> containing the result.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Rotate(System.Single)" draft="yes">
            <summary>Prepend to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> a clockwise rotation, around the origin and by the specified angle.</summary>
            <param name="angle">The angle of the rotation, in degrees.</param>
            <remarks><para>The clockwise rotation is applied. Use negative angle value to rotate counter-clockwise.</para><para>Internally the rotation is applied by multiplying this instance of the matrix by the affine matrix of rotation. Left-sided multiplication is made.</para><para>The rotation is applied around the point of origin. To rotate around an arbitrary point, use the <see cref="M:Aurigma.GraphicsMill.Transforms.Matrix.RotateAt(System.Single,System.Drawing.PointF)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.RotateAt(System.Single,System.Drawing.PointF)" draft="yes">
            <summary>Applies a clockwise rotation to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> around the point specified in the <i>point</i> parameter, and by prepending the rotation.</summary>
            <param name="angle">The angle (extent) of the rotation, in degrees.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF" /> that represents the center of the rotation.</param>
            <remarks><para>The clockwise rotation is applied. Use negative angle value to rotate counter-clockwise.</para><para>Internally the rotation is applied by multiplying this instance of the matrix by the affine matrix of rotation. Left-sided multiplication is made.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Scale(System.Single,System.Single)" draft="yes">
            <summary>Applies the specified scale vector to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> by prepending the scale vector.</summary>
            <param name="scaleX">The value by which to scale this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> in the x-axis direction.</param>
            <param name="scaleY">The value by which to scale this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> in the y-axis direction.</param>
            <remarks><para>Internally the scaling is applied by multiplying this instance of the matrix by the affine matrix of scale. Left-sided multiplication is made.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.ToGdiPlusMatrix" draft="yes">
            <summary>Returns a matrix converted to <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>.</summary>
            <returns><see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> class instance.</returns>
            <remarks><para><see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> is intended only for affine transforms, and it has only 6 elements (2 columns x 3 rows). <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix">Aurigma.GraphicsMill.Transforms.Matrix</see> supports also projective transforms, and has 9 elements (3 columns x 3 rows). When conversion is applied, the last column is discarded (since it is not supported by GDI+ matrix). So if you are converting matrix of the projective transform, you will get another result with GDI+ matrix. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.Translate(System.Single,System.Single)" draft="yes">
            <summary>Applies the specified translation vector (<i>offsetX</i> and <i>offsetY</i>) to this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> by prepending the translation vector.</summary>
            <param name="offsetX">The x value by which to translate this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</param>
            <param name="offsetY">The y value by which to translate this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</param>
            <remarks><para>Internally the scaling is applied by multiplying this instance of the matrix by the affine matrix of translation. Left-sided multiplication is made.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Matrix.TransformPoints(System.Drawing.PointF[])" draft="yes">
            <summary>Multiplies the specified points by this <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" draft="yes">
            <summary>Applies an arbitrary convex linear transformation to an image (such as perspective distortion, rotation, skew, etc).</summary>
            <remarks><para>To apply a transfomation (both affine and projective), you should create a matrix of the linear transformation (see <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> class for more details). The only limitation - the matrix should not be singular (i.e. transformation must be convex). Put this matrix to the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.Matrix" /> property.</para><para>In fact, such transforms as <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> are special cases of the linear transformations. You can emulate these transforms by providing scaling/rotating matrix to this transform. However  <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> are optimized and we recommend to use it when you need only to resize or rotate.</para><para>As for all other geometry transforms you can specify the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.InterpolationMode" /> (which affects on the algorithm speed and output quality) and <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.BackgroundColor" />.</para></remarks>
            <seealso cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MatrixTransform.Apply(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <param name="matrix">A transformation <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of this transformation.</returns>
            <overloads><summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MatrixTransform.Apply(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <param name="matrix">A transformation <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" />.</param>
            <param name="bgColor">The background color.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of this transformation.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.BackgroundColor" draft="yes">
            <summary>Gets or sets the background color for the transformed image.</summary>
            <value>The background color. The default value is transparent white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.InterpolationMode" draft="yes">
            <summary>Gets or sets the interpolation mode of the transform.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.Matrix" draft="yes">
            <summary>Gets or sets a matrix of the transformation.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the linear transformation. The default value is an identify matrix.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MatrixTransform.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MatrixTransform.#ctor(Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class using the specified matrix.</summary>
            <param name="matrix">A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the linear transformation. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.Matrix" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.MatrixTransform.#ctor(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class using the specified settings.</summary>
            <param name="matrix">A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the linear transformation. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.Matrix" /> property.</param>
            <param name="bgColor">The background color. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.BackgroundColor" /> property.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.MatrixTransform.InterpolationMode" /> property.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Maximum" draft="yes">
            <summary>Applies a maximum filter (also known as erosion) to an image.</summary>
            <remarks><para>Maximum filter is a non-linear filter which works in the following way: for each pixel it searches pixel with maximum brightness in "running window" of the radius specified with <see cref="P:Aurigma.GraphicsMill.Transforms.Maximum.Radius" /> property. This pixel is copied to the result bitmap.</para><para>That's why if you apply this filter on the image with has black objects on white background (for example text), they will be <i>erosed</i>.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Maximum.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Maximum" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Maximum" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Maximum.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Maximum" /> class using the specified filter radius.</summary>
            <param name="radius">The radius of the filter in pixels.  You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Maximum.Radius" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Maximum.Radius" draft="yes">
            <summary>Gets or sets a radius of maximum filter.</summary>
            <value>The radius of the filter in pixels.</value>
            <remarks>This property specifies how much neighbour pixels will be processed (for radius = 1 it will take 8 neighbours, for radius = 2 it will use already 24 neighbour pixels, etc). That's why the larger radius you specify, the slower algorithm will work. It is recommended to limit user input for this parameter to avoid performance drop.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Median" draft="yes">
            <summary>Applies a median filter to an image.</summary>
            <remarks><para>Median filter is a non-linear filter which works in the following way: for each pixel it searches median pixel in "running window" of the radius specified with <see cref="P:Aurigma.GraphicsMill.Transforms.Median.Radius" /> property. This pixel is copied to the result bitmap.</para><para>This filter is good for removing noise (especially impulse noise).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Median.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Median" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Median" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Median.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Median" /> class using the specified filter radius.</summary>
            <param name="radius">The radius of the filter in pixels. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Median.Radius" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Median.Radius" draft="yes">
            <summary>Gets or sets a radius of median filter.</summary>
            <value>The radius of the filter in pixels.</value>
            <remarks>This property specifies how much neighbour pixels will be processed (for radius = 1 it will take 8 neighbours, for radius = 2 it will use already 24 neighbour pixels, etc). That's why the larger radius you specify, the slower algorithm will work. It is recommended to limit user input for this parameter to avoid performance drop.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Minimum" draft="yes">
            <summary>Applies a minimum filter (also known as dilation) to an image.</summary>
            <remarks><para>Minimum filter is a non-linear filter which works in the following way: for each pixel it searches pixel with minimum brightness in "running window" of the radius specified with <see cref="P:Aurigma.GraphicsMill.Transforms.Minimum.Radius" /> property. This pixel is copied to the result bitmap.</para><para>That's why if you apply this filter on the image with has black objects on white background (for example text), they will be <i>dilated</i>.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Minimum.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Minimum" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Minimum" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Minimum.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Minimum" /> class using the specified filter radius.</summary>
            <param name="radius">The radius of the filter in pixels. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Minimum.Radius" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Minimum.Radius" draft="yes">
            <summary>Gets or sets a radius of miminum filter.</summary>
            <value>The radius of the filter in pixels.</value>
            <remarks>This property specifies how much neighbour pixels will be processed (for radius = 1 it will take 8 neighbours, for radius = 2 it will use already 24 neighbour pixels, etc). That's why the larger radius you specify, the slower algorithm will work. It is recommended to limit user input for this parameter to avoid performance drop.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Mosaic" draft="yes">
            <summary>Applies a mosaic effect on an image.</summary>
            <remarks><para>This effect lies in averaging a block of pixels of specified size. You specify <see cref="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellWidth" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellHeight" />, and the image is "pixelated" according this cell size.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellHeight" draft="yes">
            <summary>Gets or sets a mosaic cell height.</summary>
            <value>The mosaic cell height.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellWidth" draft="yes">
            <summary>Gets or sets s mosaic cell width.</summary>
            <value>The mosaic cell width.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Mosaic.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Mosaic" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Mosaic" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Mosaic.#ctor(System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Mosaic" /> class using the specified cell settings.</summary>
            <param name="cellWidth">The mosaic cell width. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellWidth" /> property.</param>
            <param name="cellHeight">The mosaic cell height. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Mosaic.CellHeight" /> property.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.RedEyeBlob" draft="yes">
            <summary>Represents a red eye blob (i.e. an area which corresponds to a red eye).</summary>
            <remarks><para>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Blobs">RedEyeMask.Blobs</see> property. The blob is described by two parameters: <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeBlob.Center" /> point and <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeBlob.BoundingRectangle" /> box. All values are given in coordinates of the red eye mask this blob object is returned from.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeBlob.BoundingRectangle" draft="yes">
            <summary>Gets a bounding rectangle of this red eye blob.</summary>
            <value>A <see cref="T:System.Drawing.Rectangle" /> structure that specifies a bounding box of this red eye blob.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeBlob.Center" draft="yes">
            <summary>Gets a center of this red eye blob.</summary>
            <value>A <see cref="T:System.Drawing.Point" /> structure that specifies a center of this red eye blob.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" draft="yes">
            <summary>Represents a red eye mask calculated during the red eye removal process.</summary>
            <remarks><para>When the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> transform is working, it builds a mask which contains the information about red eyes found in the image. You can get this mask through the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mask" /> property. Of course, you can do it only after the algorithm completes.</para><para>This mask is a common grayscale bitmap where white areas correspond to red eyes and black ones - all the rest. You can get this bitmap using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.BinaryMask" /> property.</para><para>You can get blobs of the mask using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Blobs" /> property which returns an array of <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeBlob" /> objects.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.BinaryMask" draft="yes">
            <summary>Gets a grayscale bitmap which represents the red eye mask.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> which represents a red eye mask.</value>
            <remarks><para>A pixel format of this bitmap is always <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" />. White areas correspond to portions of the source image which are recognized as red eyes (i.e. <i>red eye blobs</i>). If you need to get coordinates of the red eye blobs, use the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Blobs" /> property. It will return an array of <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeBlob" /> objects.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Blobs" draft="yes">
            <summary>Gets an array of red eye blobs found in the image (i.e. areas which correspond to red eyes).</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeBlob" /> objects.</value>
            <remarks><para>Use this property to determine where the algorithm has found red eyes. For example, you can display to the user what portions of image are about to be modified. If the algorithm finds it incorrectly, the user can fix blobs coordinates and proceed with <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeMask.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeMask.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Height" draft="yes">
            <summary>Gets a height of the red eye mask.</summary>
            <value>The height of the mask. Its dimensions are always the same as the face selection rectangle.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Mask" draft="yes">
            <summary>Gets a two-dimensional array of <see cref="T:System.Single" /> values which represents a mask.</summary>
            <value>Two-dimensional array of <see cref="T:System.Single" /> values which represents a mask.</value>
            <remarks><para>To get the mask as a bitmap, use the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.BinaryMask" /> property instead.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Width" draft="yes">
            <summary>Gets a width of the red eye mask.</summary>
            <value>The width of the mask. Its dimensions are always the same as the face selection rectangle.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" draft="yes">
            <summary>Removes a red eye effect from an image.</summary>
            <remarks><para>Using this class you can add red eye removal functionality into your application. It supports two modes: <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> and <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" />.</para><para>In the <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode, the tranfrom works in two steps:</para><list type="number"><item><description>Select the face of the person whose eyes should be processed. The selection should be specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property.</description></item><item><description>Specify red eye coordinates on the selected face (e.g. by mouse click). It is specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.EyePoint" /> property.</description></item></list><para>The <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" /> mode also requires the user to select a face. However it automatically searches red eyes on the selected face. When this mode is used, you can get the coordinates of red eyes found by the algorithm with a help of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mask" /> property. This way if the algorithm mistakes, you can display the user what was found and possible give them an opportunity to fix it manually. See the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" /> and <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeBlob" /> classes description for more details on this.</para><para>If you are not happy with results, you can play with sensitivity of the algorithm. Try to reduce the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.RedChannelThreshold" /> property slightly. In the <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode you can play with additional property, namely <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Sensitivity" />.</para><note>Both modes analyzes facial features when deciding what red pixels should be suppressed and what ones should not. This way the algorithm reduces probability of malfunction (i.e. mistake reddish areas of the face or background for red eyes). The more precise the user selects the face, the more accurate red eye effect removal will be. Also, if the user works in the <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode, they need try to click inside the red area of an eye. If the user clicks, say, white area of the flash reflection, the algorithm will not be able to fix red eye effect.</note></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.~RedEyeRemoval">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Apply(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="bitmap">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of red eye removal transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.EyePoint" draft="yes">
            <summary>Gets or sets the point inside the eye.</summary>
            <value>A <see cref="T:System.Drawing.PointF" /> containing the red eye location. Coordinates should be specified relatively to the upper-left corner of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" />.</value>
            <remarks><para>This property makes sense only when the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" />. Typically the user clicks the red eye position with a mouse button. You should recalculate these coordinates relatively the face selection (specified by the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property).</para><note>If you specify the point outside of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> rectangle the transform fails.</note></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" />
<seealso cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" draft="yes">
            <summary>Gets or sets the rectangle which selects the person's face.</summary>
            <value>A <see cref="T:System.Drawing.RectangleF" /> structure containing the face region.</value>
            <remarks><para>When the algorithm works, it analyzes facial features. It helps to reduce probability of malfunction. To make the transformation process as precise as possible, you should have the user to select the person's face as accurate as possible.</para><para>Users should select the face even if they use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode. The eye they select should be inside this rectangle.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mask" draft="yes">
            <summary>Gets the mask built during the red eye removal process.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" /> generated during the red eye removal process.</value>
            <remarks><para>You can use this property when you apply the red eye effect removal in <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" /> mode to determine what image elements were recognized as red eyes. To do it, use the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.Blobs" /> property of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeMask" /> class. If you need to get this mask as a bitmap, use the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeMask.BinaryMask" /> property.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" draft="yes">
            <summary>Gets or sets the red eye removal mode (manual or automatic).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode" /> value which specify the mode of the red eye removal algorithm.</value>
            <remarks><para>When you use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode, the user should click eyes manually. When <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" /> mode is used, eyes are searched automatically. However in both cases the user should select the face which contains red eyes.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.#ctor(System.Drawing.Rectangle)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class using the specified face rectangle.</summary>
            <param name="faceRegion">A <see cref="T:System.Drawing.Rectangle" /> structure containing the face region. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property.</param>
            <remarks><para>When the red eye removal algorithm works, it analyzes facial features. It helps to reduce probability of malfunction. To make the red eye removal process as precise as possible, you should have the user to select the person's face as accurate as possible.</para><para>Users should select the face even if they use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode. The eye they select should be inside this rectangle.</para><para>When you use this constructor, the default value of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" />.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.#ctor(System.Drawing.Rectangle,System.Drawing.Point,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class using the specified face rectangle, eye point and algorithm sensitivity.</summary>
            <param name="faceRegion">A <see cref="T:System.Drawing.Rectangle" /> structure containing the face region. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property.</param>
            <param name="startPoint">A <see cref="T:System.Drawing.Point" /> containing the red eye location. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.EyePoint" /> property.</param>
            <param name="sensitivity">A float number in range [0, 1] which specifies a sensitivity of the red eye removal algorithm. The smaller value you specify, more pixels are affected. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Sensitivity" /> property.</param>
            <remarks><para>When the red eye removal algorithm works, it analyzes facial features. It helps to reduce probability of malfunction. To make the red eye removal process as precise as possible, you should have the user to select the person's face as accurate as possible.</para><para>Users should select the face even if they use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode. The eye they select should be inside this rectangle.</para><para>When you use this constructor, the default value of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" />.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.#ctor(System.Drawing.RectangleF)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class using the specified face rectangle.</summary>
            <param name="faceRegion">A <see cref="T:System.Drawing.RectangleF" /> structure containing the face region. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property.</param>
            <remarks><para>When the red eye removal algorithm works, it analyzes facial features. It helps to reduce probability of malfunction. To make the red eye removal process as precise as possible, you should have the user to select the person's face as accurate as possible.</para><para>Users should select the face even if they use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode. The eye they select should be inside this rectangle.</para><para>When you use this constructor, the default value of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" />.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.#ctor(System.Drawing.RectangleF,System.Drawing.PointF,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RedEyeRemoval" /> class using the specified face rectangle, eye point and algorithm sensitivity.</summary>
            <param name="faceRegion">A <see cref="T:System.Drawing.RectangleF" /> structure containing the face region. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.FaceRegion" /> property.</param>
            <param name="startPoint">A <see cref="T:System.Drawing.PointF" /> containing the red eye location. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.EyePoint" /> property.</param>
            <param name="sensitivity">A float number in range [0, 1] which specifies a sensitivity of the red eye removal algorithm. The smaller value you specify, more pixels are affected. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Sensitivity" /> property.</param>
            <remarks><para>When the red eye removal algorithm works, it analyzes facial features. It helps to reduce probability of malfunction. To make the red eye removal process as precise as possible, you should have the user to select the person's face as accurate as possible.</para><para>Users should select the face even if they use <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode. The eye they select should be inside this rectangle.</para><para>When you use this constructor, the default value of the <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Mode" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" />.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.RedChannelThreshold" draft="yes">
            <summary>Gets or sets the red channel threshold used during the red eye removal process.</summary>
            <value>A float number in range [0, 1] which specifies the red channel threshold.</value>
            <remarks><para>If the thershold is close to 0, the algorithm captures a lot of pixels (even those which are unlikely to be red). It highly reduces the performance and increase a number of false recognitions. Too high values may lead to reducing of probability of red eye removal. It is highly recommended to use default value of this property and adjust it only if it is actually necessary. </para><para>This property affects both for <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> and <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" /> modes.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.Sensitivity" draft="yes">
            <summary>Gets or sets a sensitivity of the algorithm in <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" /> mode.</summary>
            <value>A float number in range [0, 1] which specifies a sensitivity of the red eye removal algorithm. The smaller value you specify, more pixels are affected.</value>
            <remarks><para>This value is ignored in <see cref="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" /> mode (unlike <see cref="P:Aurigma.GraphicsMill.Transforms.RedEyeRemoval.RedChannelThreshold" /> property value).</para><para>It is recommended to use the default value of this property. However if you are not happy with the result, you can try to adjust it. </para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode" draft="yes">
            <summary>Contains possible red eye effect removal modes.</summary>
            <remarks><para>Both modes analyze facial features when deciding what red pixels should be suppressed and what ones should not. This way the algorithm reduces probability of malfunction (i.e. mistake reddish areas of the face or background for red eyes). The more precise the user selects the face, the more accurate red eye effect removal will be.</para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Manual" draft="yes">
            <summary>Manual mode. The user selects a face and clicks red eyes inside it. It makes sense to warn the user to click inside the red area of an eye. If the user clicks, say, white area of the flash reflection, the algorithm will not be able to fix a red eye effect.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.RedEyeRemovalMode.Semiautomatic" draft="yes">
            <summary>Semi-automatic mode. The user selects a face and the algorithm automatically searches eyes on the face.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.RemoveAlpha" draft="yes">
            <summary>Removes the alpha channel from an image.</summary>
            <remarks><para>If the <see cref="P:Aurigma.GraphicsMill.Transforms.RemoveAlpha.BackgroundColor" /> property is null, the alpha channel is just discarded without affecting other channels. Otherwise the alpha channel is flattened using specified color (i.e. each pixel is alpha-blended with this color).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.RemoveAlpha.BackgroundColor" draft="yes">
            <summary>Gets or sets a color to to blend semi-transparent areas with.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Color" /> to blend semi-transparent areas with. The default value is null.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RemoveAlpha.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RemoveAlpha" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RemoveAlpha" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.RemoveAlpha.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.RemoveAlpha" /> class using the specified background color.</summary>
            <param name="backgroundColor">The <see cref="T:Aurigma.GraphicsMill.Color" /> to blend semi-transparent areas with. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.RemoveAlpha.BackgroundColor" /> property.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Resize" draft="yes">
            <summary>Resizes an image.</summary>
            <remarks><para>Using this class you may resample the bitmap: specify <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> properties, then apply the transform, and it will return resized bitmap. If you set some of these properties to 0, this property is automatically calculated to preserve the aspect ratio of the image.</para><para>Essential parameter of all the geometric transforms (including resizing) is an interpolation algorithm. It specifies how to calculate intermediate points. Different algorithms produces different quality, but as usual the higher quality it produces, the slower algorithm works. You can select interpolation algorithm with <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" /> property.</para></remarks>
            <example><para>The following code proportionally resizes an image to 100 pixel width.</para><code language="CS" source="Samples/Code/Transforms.cs#resizeOutOfPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.Apply(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32)" draft="yes">
            <summary>Produces a resized copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to resize.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of resize transformation.</returns>
            <overloads><summary>Produces a resized copy of a given bitmap. The source bitmap remains unchanged.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.Apply(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Produces a resized copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to resize.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of resize transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.CalculateDimensions(System.Drawing.Size,System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Returns the dimensions of an image which will be produced by the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> transform using the given destination size and resize mode.</summary>
            <param name="srcSize">The source size.</param>
            <param name="dstSize">The destination size.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions.</param>
            <returns>The size of the resulting image.</returns>
            <remarks>You can use this method to calculate the dimensions of an image which will be produced by the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> transform.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Resize.Height" draft="yes">
            <summary>Gets or sets a height of the resulting image.</summary>
            <value>The height of the resulting image. The default value is <c>0</c>.</value>
            <remarks>If this value is set to 0, it is calculated automatically to preserve bitmap aspect ratio. <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> cannot be set to 0 at the same time. If you specify non-zero values for both dimensions, you should also specify the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" />.</remarks>
            <seealso cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" draft="yes">
            <summary>Gets or sets the interpolation mode of the resize transform.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified width and height.</summary>
            <param name="width">The width of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> property.</param>
            <param name="height">The height of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified width/height and interpolation algorithm.</summary>
            <param name="width">The width of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> property.</param>
            <param name="height">The height of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified settings.</summary>
            <param name="width">The width of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> property.</param>
            <param name="height">The height of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" /> property.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified settings.</summary>
            <param name="width">The width of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> property.</param>
            <param name="height">The height of the resulting image. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Drawing.Size)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified dimensions.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image. You can change these parameters later using <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified dimensions and interpolation algorithm.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image. You can change these parameters later using <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified settings.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image. You can change these parameters later using <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the resize. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.InterpolationMode" /> property.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Resize.#ctor(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class using the specified settings.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image. You can change these parameters later using <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> property.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" draft="yes">
            <summary>Gets or sets a value which specifies how to interpret resize dimensions (<see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> properties).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.ResizeMode.Resize" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Resize.Width" draft="yes">
            <summary>Gets or sets a width of the resulting image.</summary>
            <value>The width of the resulting image. The default value is <c>0</c>.</value>
            <remarks>If this value is set to 0, it is calculated automatically to preserve bitmap aspect ratio. <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Width" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.Height" /> cannot be set to 0 at the same time. If you specify non-zero values for both dimensions, you should also specify the <see cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" />.</remarks>
            <seealso cref="P:Aurigma.GraphicsMill.Transforms.Resize.ResizeMode" />
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" draft="yes">
            <summary>Contains possible interpolation modes for resizing images.</summary>
            <seealso href="interpolation-modes-comparison.htm" />
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Anisotropic4" draft="yes">
            <summary>Anisotropic filtration with 4 points.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Anisotropic9" draft="yes">
            <summary>Anisotropic filtration with 9 points.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Cubic" draft="yes">
            <summary>Cubic interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.High" draft="yes">
            <summary>Best quality algorithm (usually lowest speed).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Lanczos" draft="yes">
            <summary>Lanczos interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Lanczos3" draft="yes">
            <summary>Lanczos3 interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Linear" draft="yes">
            <summary>Linear interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Low" draft="yes">
            <summary>Lowest quality algorithm, but usually fastest one.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Medium" draft="yes">
            <summary>Medium quality algorithm (as usual with medium speed).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.NearestNeighbour" draft="yes">
            <summary>Nearest neighbour interpolation algorithm.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode.Supersampling" draft="yes">
            <summary>Supersampling interpolation algorithm.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.ResizeMode">
            <summary>Contains values for the resize modes (how the resize parameters should be intepreted).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeMode.Fit" draft="yes">
            <summary>Width and height specify a rectangle the image is inscribed into (image proportions are preserved).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeMode.ImageFill" draft="yes">
            <summary>In this mode image is proportionally resized and cropped. Firstly, the image is resized so that the given rectangle is inscribed into the resized image. After that the rectangle is centered on the resized image and the image is cropped by the rectangle bounds.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeMode.Resize" draft="yes">
            <summary>Width and height specify dimensions of the image after resize (proportions are not preserved).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Transforms.ResizeMode.Shrink" draft="yes">
            <summary>The same as <b>Fit</b>, but the resize occurs only if resize dimensions are smaller than image dimensions.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.ResolutionModifier" draft="yes">
            <summary>Updates a resolution of an image.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ResolutionModifier.DpiX" draft="yes">
            <summary>Gets or sets a horizontal resolution to update.</summary>
            <value>The horizontal resolution to update. The default value is 72.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ResolutionModifier.DpiY" draft="yes">
            <summary>Gets or sets a vertical resolution to update.</summary>
            <value>The vertical resolution to update. The default value is 72.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ResolutionModifier.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ResolutionModifier" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ResolutionModifier" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ResolutionModifier.#ctor(System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ResolutionModifier" /> class using the specified horizontal and vertical resolutions.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Rotate" draft="yes">
            <summary>Rotates an image at arbitrary angle.</summary>
            <remarks><para>The main parameter of this transform is <see cref="P:Aurigma.GraphicsMill.Transforms.Rotate.Angle" /> to rotate the image to.
              If specified angle is 90, 180, or 270 degrees, a special algorithm which avoids floating-point calculations is used automatically, which yields to higher performance.
            </para><para>Another important property is <see cref="P:Aurigma.GraphicsMill.Transforms.Rotate.InterpolationMode" /> that defines an interpolation algorithm. Different algorithms produce different quality, but as usual the higher quality an algorithm produces, the slower it works.</para></remarks>
            <example><para>The following code rotates an image by 5 degrees clockwise.</para><code language="CS" source="Samples/Code/Transforms.cs#rotateOutOfPlace"></code></example>
            <seealso href="rotating-and-flipping-images.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Rotate.Angle" draft="yes">
            <summary>Gets or sets an angle to rotate the image at.</summary>
            <value>The angle to rotate the image at (in degrees). The default value is <c>0</c>.</value>
            <remarks>If specified angle is 90, 180, or 270 degrees, a special algorithm which avoids floating-point calculations is used automatically, which yields to higher performance.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Rotate.Apply(Aurigma.GraphicsMill.Bitmap,System.Single)" draft="yes">
            <summary>Produces a rotated copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to rotate.</param>
            <param name="angle">The angle to rotate the image at (in degrees).</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of rotate transformation.</returns>
            <overloads><summary>Produces a rotated copy of a given bitmap. The source bitmap remains unchanged.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Rotate.Apply(Aurigma.GraphicsMill.Bitmap,System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Produces a rotated copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">An <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to rotate.</param>
            <param name="angle">The angle to rotate the image at (in degrees).</param>
            <param name="bgColor">The background color for the rotated image.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the rotate.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of rotate transformation.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Rotate.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color for the rotated image.</summary>
            <value>The background color for the rotated image. The default value is a transparent white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Rotate.InterpolationMode" draft="yes">
            <summary>Gets or sets the interpolation mode of the rotate transform.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the rotate. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Rotate.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Rotate.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class using the specified rotation angle.</summary>
            <param name="angle">The angle to rotate the image at (in degrees). You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Rotate.Angle" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Rotate.#ctor(System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class using the specified settings.</summary>
            <param name="angle">The angle to rotate the image at (in degrees). You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Rotate.Angle" /> property.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the rotate. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Rotate.InterpolationMode" /> property.</param>
        </member>
		
<!-- Transforms.ScaleAlpha -->
        <member name="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" draft="yes">
            <summary>Scales the alpha channel of an image.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ScaleAlpha.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ScaleAlpha.#ctor(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> class with the given scale source.</summary>
            <param name="scaleSource">A pipeline that produces a grayscale image to scale the channel to.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ScaleAlpha.#ctor(Aurigma.GraphicsMill.Pipeline,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> class with the given scale source and auto dispose flag.</summary>
            <param name="scaleSource">A pipeline that produces a grayscale image to scale the channel to.</param>
            <param name="autoDisposeSource"><c>true</c> if the the scale source should be disposed with this <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" />; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.ScaleAlpha.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> class using the specified scale factor.</summary>
            <param name="scale">The scale factor (up to <c>100</c>). You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.ScaleAlpha.Scale" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ScaleAlpha.Scale" draft="yes">
            <summary>Gets or sets a scale factor for this transformation.</summary>
            <value>The scale factor (up to <c>100</c>).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ScaleAlpha.AutoDisposeScaleSource" draft="yes">
            <summary>Gets or sets whether to dispose the scale source when this <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" /> is disposed.</summary>
            <value><c>true</c> if the the scale source should be disposed with this <see cref="T:Aurigma.GraphicsMill.Transforms.ScaleAlpha" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.ScaleAlpha.ScaleSource" draft="yes">
            <summary>Gets or sets a pipeline that produces a grayscale image to scale the channel to.</summary>
            <value>A pipeline that produces a grayscale image to scale the channel to.</value>
        </member>
		
<!-- Transforms.SetAlpha -->
        <member name="T:Aurigma.GraphicsMill.Transforms.SetAlpha" draft="yes">
            <summary>Sets the alpha channel to an image.</summary>
            <example><code language="CS" source="Samples/Code/Pipelines.cs#disposeSource"></code></example>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AlphaSource" draft="yes">
            <summary>Gets or sets a pipeline producing a grayscale image to initialize alpha channel with.</summary>
            <value>A grayscale image to initialize alpha channel with. It should have the same dimensions and color depth as the source image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AutoDisposeAlphaSource" draft="yes">
            <summary>Gets or sets a value indicating whether an alpha source should be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" />.</summary>
            <value><c>true</c> if the alpha source (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AlphaSource" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SetAlpha.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SetAlpha.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SetAlpha.#ctor(Aurigma.GraphicsMill.Pipeline)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" /> class using the specified alpha source.</summary>
            <param name="alphaSource">A grayscale image to initialize alpha channel with. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AlphaSource" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SetAlpha.#ctor(Aurigma.GraphicsMill.Pipeline,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" /> class using the specified settings.</summary>
            <param name="alphaSource">A grayscale image to initialize alpha channel with. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AlphaSource" /> property.</param>
            <param name="autoDisposeSource"><c>true</c> if the alpha source (specified with the <see cref="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AlphaSource" /> property) will be disposed along with this <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" />; otherwise, <c>false</c>. You can change this value later using the <see cref="P:Aurigma.GraphicsMill.Transforms.SetAlpha.AutoDisposeAlphaSource" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SetAlpha.#ctor(System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SetAlpha" /> class using the specified opacity.</summary>
            <param name="opacity">The opacity (in range [0, 1]) to initialize the alpha channel with. Depending on the channel color depth this value is normalized to 255 (for non-extended 8 bits per channel pixel formats) or to 65535 (for extended 16 bits per channel pixel formats).</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.SetAlpha.Opacity" draft="yes">
            <summary>Gets or sets an opacity to initialize the alpha channel with.</summary>
            <value>The opacity (in range [0, 1]) to initialize the alpha channel with. Depending on the channel color depth this value is normalized to 255 (for non-extended 8 bits per channel pixel formats) or to 65535 (for extended 16 bits per channel pixel formats).</value>
        </member>
		
<!-- Transforms.Shadow -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Shadow" draft="yes">
            <summary>Applies a shadow effect to an image.</summary>
            <remarks><para>When you apply this effect, the image drops a shadow with specified parameters (taking into account transparent areas of the image). This effect is ideal for creating artistic texts, logos, etc.</para><para>You can specify a number of shadow parameters. <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.HorizontalOffset" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.VerticalOffset" /> specify offset of the shadow relatively the image. <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.Color" /> means the shadow color. To make shadow looking more realistic, it is blurred. You can set blur <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.Radius" /> (amount of the shadow fuzziness). Property <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.EnlargeToFit" /> can be used to specify if the transform should increase size of the image to fit the shadow or it should truncate the shadow which is out of the original image (makes sense to set it to <c>true</c> when you create artistic thumbnails).</para><note>If the bitmap does not have an alpha channel (e.g. its pixel format is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" />), alpha channel is automatically added. So be aware that pixel format of the output bitmap may differ from the input one.</note></remarks>
            <example><para>The following code gets the thumbnail from an image EXIF metadata, applies the <see cref="T:Aurigma.GraphicsMill.Transforms.Shadow" /> transform on it, and saves the result:</para><code language="CS" source="Samples/Code/Effects.cs#shadows"></code></example>
            <seealso href="creating-artistic-thumbnails.htm#Shadow" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Shadow.Color" draft="yes">
            <summary>Gets or sets a shadow color.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> of this shadow. The default value is a dark gray color.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Shadow.EnlargeToFit" draft="yes">
            <summary>Gets or sets a value indicating whether to enlarge the image to fit entire shadow or put it to the image of the same size (in this case shadow which is out of the image will be cut off).</summary>
            <value><c>true</c> if the image fits an entire shadow; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Shadow.HorizontalOffset" draft="yes">
            <summary>Gets or sets a horizontal offset of the shadow.</summary>
            <value>The horizontal offset of the shadow. The default value is 10.0f.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Shadow.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Shadow" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Shadow" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Shadow.#ctor(Aurigma.GraphicsMill.Color,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Shadow" /> class using the specified color and offsets.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> of this shadow. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.Color" /> property.</param>
            <param name="horizontalOffset">The horizontal offset of the shadow. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.HorizontalOffset" /> property.</param>
            <param name="verticalOffset">The vertical offset of the shadow. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.VerticalOffset" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Shadow.#ctor(Aurigma.GraphicsMill.Color,System.Single,System.Single,System.Single,System.Boolean)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.Transforms.Shadow" /> class instance. You can set all the shadow parameters here.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> of this shadow. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.Color" /> property.</param>
            <param name="horizontalOffset">Value that specifies horizontal offset of the shadow. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.HorizontalOffset" /> property.</param>
            <param name="verticalOffset">Value that specifies vertical offset of the shadow. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.VerticalOffset" /> property.</param>
            <param name="radius">Value that specifies a blur radius used to blur the shadow. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.Radius" /> property.</param>
            <param name="enlargeToFit">Value that specifies whether to enlarge the image to fit entire shadow. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Shadow.EnlargeToFit" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Shadow.Radius" draft="yes">
            <summary>Gets or sets a blur radius used to blur the shadow.</summary>
            <value>The blur radius used to blur the shadow. The default value is 5.</value>
            <remarks>This parameter works in the same way as <see cref="P:Aurigma.GraphicsMill.Transforms.Blur.Radius" /> of the <see cref="T:Aurigma.GraphicsMill.Transforms.Blur" /> transform.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Shadow.VerticalOffset" draft="yes">
            <summary>Gets or sets a vertical offset of the shadow.</summary>
            <value>The vertical offset of the shadow. The default value is 10.0f.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Sharpen" draft="yes">
            <summary>Applies a simple sharpening algorithm to an image.</summary>
            <remarks>Sharpen algorithm is quite simple and has a single parameter <see cref="P:Aurigma.GraphicsMill.Transforms.Sharpen.Strength" />. You can also use more advanced sharpening algorithm - <see cref="T:Aurigma.GraphicsMill.Transforms.UnsharpMask" />, however it is harder to use.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Sharpen.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Sharpen" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Sharpen" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Sharpen.#ctor(System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Sharpen" /> class using the specified sharpening strength.</summary>
            <param name="strength">The sharpening strength in range <c>[0, 100]</c>. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Sharpen.Strength" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Sharpen.Strength" draft="yes">
            <summary>Gets or sets a strength of this algorithm.</summary>
            <value>The sharpening strength in range <c>[0, 100]</c>.</value>
            <remarks>Minimum value makes no changes, maximum value produces maximum sharpening effect.</remarks>
        </member>

<!-- Transforms.SmartBlur -->
        <member name="T:Aurigma.GraphicsMill.Transforms.SmartBlur" draft="yes">
            <summary>Applies a smart blur effect to an image.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SmartBlur.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SmartBlur" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SmartBlur" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.SmartBlur.#ctor(System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.SmartBlur" /> class using the specified <see cref="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Radius" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Threshold" />.</summary>
            <param name="radius">The smart blur radius. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Radius" /> property.</param>
            <param name="threshold">The smart blur threshold. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Threshold" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Radius" draft="yes">
            <summary>Gets or sets the blur radius.</summary>
            <value>The smart blur radius must be positive.</value>
            <remarks><para>Radius means how much neighbour pixels the algorithm fetches (for radius = 1 it will take 8 neighbours, for radius = 2 it will use already 24 neighbour pixels, etc). That's why in general the larger radius, the slower blur works. However Graphics Mill implements special algorithms which are optimized for large radiuses, that's why this rule not always works.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.SmartBlur.Threshold" draft="yes">
            <summary>Gets or sets the smart blur threshold.</summary>
            <value>The smart blur threshold must be positive.</value>
        </member>
      
        <member name="T:Aurigma.GraphicsMill.Transforms.Solarize" draft="yes">
            <summary>Apply a solarize effect to an image.</summary>
            <remarks>This class has no parameters.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Solarize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Solarize" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Spray" draft="yes">
            <summary>Applies a spray effect to an image.</summary>
            <remarks>Spray effect lies in spreading pixels randomly.</remarks>
            <example><para>The following code gets the thumbnail from an image EXIF metadata, applies the <see cref="T:Aurigma.GraphicsMill.Transforms.Spray" /> transform on it, and saves the result:</para><code language="CS" source="Samples/Code/Effects.cs#edges"></code></example>
            <seealso href="creating-artistic-thumbnails.htm" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Spray.Amount" draft="yes">
            <summary>Gets or sets a random number variance (used as offset of pixel when it is being spreading).</summary>
            <value>The amount of the effect (variance of the random number generated by the transform). The default value is 5.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Spray.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color used to replace pixels which should be taken outside of the image.</summary>
            <value>The background color. The default value is a transparent white.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Spray.FrameWidth" draft="yes">
            <summary>Gets or sets a width of the frame for which the effect should be applied.</summary>
            <value>The width of the frame. The default value is <c>0</c>.</value>
            <remarks>If this property is set to 0, effect is applied to entire image.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Spray.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Spray" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Spray.Seed" draft="yes">
            <summary>Gets or sets seed value for random generator.</summary>
            <value>Te seed for random generator. The default value is <c>0</c>.</value>
            <remarks>Set of random numbers is always the same for the same seed. So if you need to have the same result for multiple execution of this transform, specify some fixed seed. If you want to have different result each time you run this transform, set this property randomly (for example, from system clock or some other unpredictable value).</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Spray.Type" draft="yes">
            <summary>Gets or sets a fade type for the spray effect (how does it change from image edges to center).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.FadeType" /> that specifies fade type for the spray effect. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.FadeType.Linear" />.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Texturize" draft="yes">
            <summary>Applies a texturizing effect to an image.</summary>
            <remarks>This class creates a texture from the image by reducing its size and "gluing" it with its copies seamlessly. Here you can set <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.ColumnCount" /> and <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.RowCount" /> properties to specify how much image copies should be horizontally and vertically. Then you specify parameters which affects to edges processing such as <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.Fade" />, <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.HorizontalIntersection" />, and <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.VerticalIntersection" />. Property <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.Fade" /> can be used to make images rotated one relatively each other.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.ColumnCount" draft="yes">
            <summary>Gets or sets a number of columns (how much images will be put horizontally).</summary>
            <value>The number of columns. The default value is 4.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.Fade" draft="yes">
            <summary>Gets or sets a value that specifies how to fade out edges to eliminate seams.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.FadeType" /> that specifies how to fade out edges to eliminate seams. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.FadeType.Linear" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.FlipMode" draft="yes">
            <summary>Gets or sets a value that specifies how to flip images one relatively other.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> that specifies how to flip the images one relatively other.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.HorizontalIntersection" draft="yes">
            <summary>Gets or sets percents of an image to be overlapped horizontally (at single side).</summary>
            <value>The percents of an image to be overlapped horizontally in range [0, 50]. The default value is 2.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.InterpolationMode" draft="yes">
            <summary>Gets or sets an interpolation algorithm used during resizing.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> value specifying interpolation algorithm used during resizing. The default value is <see cref="F:Aurigma.GraphicsMill.Transforms.InterpolationMode.Medium" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Texturize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Texturize" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Texturize" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Texturize.#ctor(System.Int32,System.Int32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Texturize" /> class using the specified settings.</summary>
            <param name="columnCount">The number of columns. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.ColumnCount" /> property.</param>
            <param name="rowCount">The number of rows. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.RowCount" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Texturize.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.FlipType,Aurigma.GraphicsMill.Transforms.FadeType,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Texturize" /> class using the specified settings.</summary>
            <param name="columnCount">The number of columns. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.ColumnCount" /> property.</param>
            <param name="rowCount">The number of rows. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.RowCount" /> property.</param>
            <param name="horizontalIntersection">The percents of an image to be overlapped horizontally in range [0, 50]. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.HorizontalIntersection" /> property.</param>
            <param name="verticalIntersection">The percents of an image to be overlapped vertically in range [0, 50]. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.VerticalIntersection" /> property.</param>
            <param name="flipMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> that specifies how to flip the images one relatively other. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.FlipMode" /> property.</param>
            <param name="fadeType">A <see cref="T:Aurigma.GraphicsMill.Transforms.FadeType" /> that specifies how to fade out edges to eliminate seams. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.Fade" /> property.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> value specifying interpolation algorithm used during resizing. You can change it later using <see cref="P:Aurigma.GraphicsMill.Transforms.Texturize.InterpolationMode" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.RowCount" draft="yes">
            <summary>Gets or sets a number of rows (how much images will be put vertically).</summary>
            <value>The number of rows. The default value is 4.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Texturize.VerticalIntersection" draft="yes">
            <summary>Gets or sets percents of an image to be overlapped vertically (at single side).</summary>
            <value>The percents of an image to be overlapped vertically in range [0, 50]. The default value is 2.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.Transforms.Transform" draft="yes">
            <summary>Represents a base class of all transforms presented in Graphics Mill.</summary>
            <remarks>This abstract class contains partial implementation for all Graphics Mill transforms. It contains partial implementation of the <see cref="M:Aurigma.GraphicsMill.Transforms.Transform.Apply(Aurigma.GraphicsMill.Bitmap)" /> method which is used to apply the transform.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transform.Apply(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Produces a transformed copy of a given bitmap. The source bitmap remains unchanged.</summary>
            <param name="source">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to transform.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Bitmap" /> containing the result of this transformation.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transform.ApplyAndDeleteTransform(Aurigma.GraphicsMill.Bitmap,Aurigma.GraphicsMill.Transforms.Transform)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transform.#ctor(System.String)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transform.GetPathTransformMatrix(System.Int32,System.Int32)" draft="yes">
            <summary>Gets the transform matrix from an image.</summary>
            <param name="srcWidth">The width of the source image.</param>
            <param name="srcHeight">The height of the source image.</param>
        </member>
		
<!-- Transforms.Transparentize -->
        <member name="T:Aurigma.GraphicsMill.Transforms.Transparentize" draft="yes">
            <summary>Applies a transparentize effect to an image.</summary>
            <remarks>This transform sets alpha values of pixels with a given color (and tolerant ones) to transparent. This transform is very useful when you need to blend two images and "upper" image does not have alpha channel, but it has a background color. For example, you draw a logo placed in the center of the image on white background. In this case you set <see cref="P:Aurigma.GraphicsMill.Transforms.Transparentize.BackgroundColor" /> to white color. You can also adjust a <see cref="P:Aurigma.GraphicsMill.Transforms.Transparentize.Threshold" /> parameter to make colors close to white color semi-transparent (to get smooth colors). Besides of that <see cref="P:Aurigma.GraphicsMill.Transforms.Transparentize.Threshold" /> is useful when background color is not completely uniform (for example, you loaded JPEG file with low quality).</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Transparentize.BackgroundColor" draft="yes">
            <summary>Gets or sets a color to transparentize.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Color" /> to transparentize. The default value is white.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transparentize.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Transparentize" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Transparentize" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.Transparentize.#ctor(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.Transparentize" /> class with the given color.</summary>
            <param name="backgroundColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> to transparentize. The default value is white.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.Transparentize.Threshold" draft="yes">
            <summary>Gets or sets a value that specifies admissible threshold (distance between colors in color space) when comparing current color and transparent color.</summary>
            <value>The threshold in range <c>[0, 1]</c>.</value>
            <remarks>Minimum value (0) means exact match of the colors, maximum value (1) means that any color matches.</remarks>
        </member>
		
<!-- Transforms.UnsharpMask -->
        <member name="T:Aurigma.GraphicsMill.Transforms.UnsharpMask" draft="yes">
            <summary>Increases a sharpness of an image by using the <i>unsharp mask</i> technique.</summary>
            <remarks><para><i>Unsharp mask</i> is a wide-spread technique used by photographers to increase image sharpness even in precomputer times. The idea is to combine the image with the unfocused (blurred) version. This class provides the <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Radius" /> property to tune the blur effect. During combining the algorithm calculates the difference between corresponding pixels of original and blurred image. If this difference is greater than value specified with <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Threshold" /> property, algorithm adds this N percents of this difference to original pixel (N is set by <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Amount" /> property). Otherwise no changes to original pixel is done. As blurred image differs from original ones mainly on the object edges, sharpening effect is achieved.</para><para>Using this technique is quite difficult to untrained user as it requires three non-intuitive parameters (amount, radius, and threshold). That's why if you want to provide user easy way to manipulate image sharpness, you can use <see cref="T:Aurigma.GraphicsMill.Transforms.Sharpen" /> transform which is less flexible, but much more easy-to-use.
</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Amount" draft="yes">
            <summary>Gets or sets unsharp mask amount (the difference between blurred and original image).</summary>
            <value>The unsharp mask amount. The default value is 1.</value>
            <remarks>Amount*100 means the percentage of the difference between blurred and original image. Min value is 0.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.UnsharpMask.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.UnsharpMask" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.UnsharpMask" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Transforms.UnsharpMask.#ctor(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Transforms.UnsharpMask" /> class using the specified settings.</summary>
            <param name="amount">The unsharp mask amount. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Amount" /> property.</param>
            <param name="radius">The blur radius used to produce unfocused version of the image. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Radius" /> property.</param>
            <param name="threshold">The threshold value for the unsharp mask in range [0, 1]. You can change it later using the <see cref="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Threshold" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Radius" draft="yes">
            <summary>Gets or sets a blur radius used to produce unfocused version of the image (necessary for unsharp mask algorithm).</summary>
            <value>The blur radius used to produce unfocused version of the image. The default value is 1.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Transforms.UnsharpMask.Threshold" draft="yes">
            <summary>Gets or sets a threshold value for the unsharp mask.</summary>
            <value>The threshold value for the unsharp mask in range [0, 1]. The default value is <c>0</c>.1.</value>
            <remarks>Minimum value (0) means that all pixels are affected with unsharp mask, maximum value means that no pixels are affected. To calculate threshold in pixel luminosity levels, multiply it on 255 for non-extended (8 bit per channel) images, or 65535 for extended (16 bit per channel) images.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.TransformsProvider" draft="yes">
            <summary>Contains methods used to apply various effects on the bitmap.</summary>
            <remarks><para>This class is accessible via the <see cref="P:Aurigma.GraphicsMill.Bitmap.Transforms">Bitmap.Transforms</see> property. It alows you to apply effects and transforms (except ones used for tone and color correction) on the bitmap without creating an appropriate transform object (contained in <see cref="N:Aurigma.GraphicsMill.Transforms" /> namespace). Therefore you can write only single line of code to run the transform. For example, instead of this code:</para><code language="CS" source="Samples/Code/Reference.cs#resizeOutOfPlace"></code><para>you can just use this code:</para><code language="CS" source="Samples/Code/Reference.cs#resizeInPlace"></code></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.Bitmap.Transforms" />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.AddNoise(System.Single)" draft="yes">
            <summary>Applies a noise effect to the bitmap using the specified amount (strength) of the noise.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. If 0, no noise added.</param>
            <remarks><para>This method transforms an image by adding a random number to each pixel.</para></remarks>
            <overloads><summary>Applies a noise effect to the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.AddNoise(System.Single,Aurigma.GraphicsMill.Transforms.DistributionKind,System.Boolean)" draft="yes">
            <summary>Applies a noise effect to the bitmap using the specified settings.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. If 0, no noise added.</param>
            <param name="distributionKind">A <see cref="T:Aurigma.GraphicsMill.Transforms.DistributionKind" /> specifying noise distribution law.</param>
            <param name="grayNoise"><c>true</c> if the noise is gray; otherwise, <c>false</c>.</param>
            <remarks><para>This method transforms an image by adding a random number to each pixel.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.AddNoise(System.Single,Aurigma.GraphicsMill.Transforms.DistributionKind,System.Boolean,System.Int32)" draft="yes">
            <summary>Applies a noise effect to the bitmap using the specified settings.</summary>
            <param name="amount">The strength of noise in range [-1, 1]. If 0, no noise added.</param>
            <param name="distributionKind">A <see cref="T:Aurigma.GraphicsMill.Transforms.DistributionKind" /> specifying noise distribution law.</param>
            <param name="grayNoise"><c>true</c> if the noise is gray; otherwise, <c>false</c>.</param>
            <param name="seed">The seed for the noise random generator.</param>
            <remarks><para>This method transforms an image by adding a random number to each pixel.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.AutoCrop(Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Removes a border around an image in the automatic mode.</summary>
            <overloads><summary>Removes a border around an image in the automatic mode.</summary></overloads>
            <param name="borderColor">The color of the border to remove.</param>
			<seealso ref="resizing-and-cropping-images.htm#AutoCroppingImages" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.AutoCrop(Aurigma.GraphicsMill.Color,System.Single)" draft="yes">
            <summary>Removes a border around an image in the automatic mode.</summary>
            <param name="borderColor">The color of the border to remove.</param>
            <param name="threshold">The sensitivity of the auto crop. The higher the value the more color will be cropped.</param>
            <example><code language="CS" source="Samples/Code/Transforms.cs#AutoCropInPlace"></code></example>
			<seealso ref="resizing-and-cropping-images.htm#AutoCroppingImages" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.ApplyBezier(System.Drawing.PointF[])" draft="yes">
            <overloads><summary>Applies a warp transformation based on Bezier surface.</summary></overloads>
            <summary>Applies a warp transformation based on Bezier surface.</summary>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class to apply this effect.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.ApplyBezier(System.Drawing.PointF[],Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <overloads><summary>Applies a warp transformation based on Bezier surface.</summary></overloads>
            <summary>Applies a warp transformation based on Bezier surface.</summary>
            <param name="controlPoints">Sixteen control points that defines a Bezier surface for the transform.</param>
            <param name="backgroundColor">Color to fill empty spaces that can occur as a result of transformation.</param>
            <param name="mode">An <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used during the transformation.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.BezierTransform" /> class to apply this effect.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.ApplyMatrix(Aurigma.GraphicsMill.Transforms.Matrix)" draft="yes">
            <summary>Applies a linear transformation of the bitmap (based on specified matrix).</summary>
            <param name="matrix">A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the linear transformation.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class to apply this effect.</remarks>
            <example><para>Here is an example how to apply skew transform using the affine matrix:</para><code language="CS" source="Samples/Code/Reference.cs#skew"></code></example>
            <seealso href="affine-and-projective-transformations.htm" />
            <overloads><summary>Applies a linear transformation of the bitmap (based on specified matrix).</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.ApplyMatrix(Aurigma.GraphicsMill.Transforms.Matrix,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Applies a linear transformation of the bitmap (based on specified matrix).</summary>
            <param name="matrix">A <see cref="T:Aurigma.GraphicsMill.Transforms.Matrix" /> of the linear transformation.</param>
            <param name="color">The background color for the transformed image.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> algorithm used during transformation.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.MatrixTransform" /> class to apply this effect.</remarks>
            <seealso href="affine-and-projective-transformations.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Blur(System.Single)" draft="yes">
            <summary>Applies a blur effect to the bitmap.</summary>
            <param name="radius">The blur radius must be positive.</param>
            <remarks>Large values of radius makes image more blurry, so you can treat this parameter as "blur strength".</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Crop(System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Crops the bitmap using specified rectangle (which is not obligatory totally inside the bitmap).</summary>
            <param name="x">The x-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the cropping rectangle.</param>
            <param name="width">The width of the cropping rectangle.</param>
            <param name="height">The height of the cropping rectangle.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class to crop the image.</remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#cropInPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
            <overloads><summary>Crops the bitmap using specified rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Crop(System.Drawing.Rectangle)" draft="yes">
            <summary>Crops the bitmap using specified rectangle (which is not obligatory totally inside the bitmap).</summary>
            <param name="rect">The cropping rectangle.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Crop" /> class to crop the image.</remarks>
            <seealso href="resizing-and-cropping-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified slop angle.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
            <overloads><summary>Applies a cylindrize transformation on the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified settings.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <param name="cupColor">The cylinder color.</param>
            <param name="bgColor">The background color.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used in the transform.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single,System.Int32,System.Int32)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified settings.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <param name="cylinderHalfPerimeter">A half-perimeter of the cylinder.</param>
            <param name="cylinderHeight">The height of the cylinder.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single,System.Int32,System.Int32,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified settings.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <param name="cylinderHalfPerimeter">A half-perimeter of the cylinder.</param>
            <param name="cylinderHeight">The height of the cylinder.</param>
            <param name="cupColor">The cylinder color.</param>
            <param name="bgColor">The background color.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used in the transform.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified settings.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <param name="cylinderHalfPerimeter">A half-perimeter of the cylinder.</param>
            <param name="cylinderHeight">The height of the cylinder.</param>
            <param name="horizontalOffset">The horizontal offset of the bitmap on the cylinder.</param>
            <param name="verticalOffset">The vertical offset of the bitmap on the cylinder.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Cylindrize(System.Single,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Applies a cylindrize transformation on the bitmap using the specified settings.</summary>
            <param name="slopeAngle">A slope angle of the cylinder.</param>
            <param name="cylinderHalfPerimeter">A half-perimeter of the cylinder.</param>
            <param name="cylinderHeight">The height of the cylinder.</param>
            <param name="horizontalOffset">The horizontal offset of the bitmap on the cylinder.</param>
            <param name="verticalOffset">The vertical offset of the bitmap on the cylinder.</param>
            <param name="cupColor">The cylinder color.</param>
            <param name="bgColor">The background color.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.InterpolationMode" /> specifying interpolation algorithm used in the transform.</param>
            <remarks><para>This method is useful if you need to emulate the image to be bended on the cylinder surface, for example, mug.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.EdgeDetect(Aurigma.GraphicsMill.Transforms.EdgeDetectMode)" draft="yes">
            <summary>Outlines edges of the bitmap.</summary>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.EdgeDetectMode" /> specifying an edge detector.</param>
            <remarks>This method uses certain spatial filters to detect edges. Using the <i>mode</i> paramater you can specify the edge detector.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Emboss" draft="yes">
            <summary>Applies an emboss effect on the bitmap.</summary>
            <remarks><para>This effect imitates embossed image.</para></remarks>
            <overloads><summary>Applies an emboss effect on the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Emboss(System.Single,System.Int32,System.Int32)" draft="yes">
            <summary>Applies an emboss effect on the bitmap using the specified settings.</summary>
            <param name="angle">The emboss angle (in degrees).</param>
            <param name="height">The embossed image height (in pixels).</param>
            <param name="amount">The emboss amount ("strength" of embossing).</param>
            <remarks><para>This effect imitates embossed image.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Emboss(System.Single,System.Int32,System.Int32,System.Single)" draft="yes">
            <summary>Applies an emboss effect on the bitmap using the specified settings.</summary>
            <param name="angle">The emboss angle (in degrees).</param>
            <param name="height">The embossed image height (in pixels).</param>
            <param name="amount">The emboss amount ("strength" of embossing).</param>
            <param name="brightness">The embossed image brightness in range [-1, 1].</param>
            <remarks><para>This effect imitates embossed image.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Flip(Aurigma.GraphicsMill.Transforms.FlipType)" draft="yes">
            <summary>Flips the bitmap.</summary>
            <param name="flipType">A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> to apply.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Flip" /> class to flip the image.</remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#flipInPlace"></code></example>
            <seealso href="rotating-and-flipping-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Invert" draft="yes">
            <summary>Inverts all colors in an image.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Maximum(System.Int32)" draft="yes">
            <summary>Applies a maximum filter (also known as erosion) to the bitmap.</summary>
            <param name="radius">The radius of the filter in pixels.</param>
            <remarks><para>Maximum filter is a non-linear filter which works in the following way: for each pixel it searches pixel with maximum brightness in "running window" of the radius specified with <i>radius</i> parameter. This pixel is copied to the result bitmap.</para><para>That's why if you apply this filter on the image with has black objects on white background (for example text), they will be <i>erosed</i>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Median(System.Int32)" draft="yes">
            <summary>Applies a median filter to the bitmap.</summary>
            <param name="radius">The radius of the filter in pixels.</param>
            <remarks><para>Median filter is a non-linear filter which works in the following way: for each pixel it searches median pixel in "running window" of the radius specified with <i>radius</i> parameter. This pixel is copied to the result bitmap.</para><para>This filter is good for removing noise (especially impulse noise).</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Minimum(System.Int32)" draft="yes">
            <summary>Applies a minimum filter (also known as dilation) to the bitmap.</summary>
            <param name="radius">The radius of the filter in pixels.</param>
            <remarks><para>Minimum filter is a non-linear filter which works in the following way: for each pixel it searches pixel with minimum brightness in "running window" of the radius specified with <i>radius</i> parameter. This pixel is copied to the result bitmap.</para><para>That's why if you apply this filter on the image with has black objects on white background (for example text), they will be <i>dilated</i>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Mosaic(System.Int32,System.Int32)" draft="yes">
            <summary>Applies a mosaic effect on the bitmap using the spelcified cell size.</summary>
            <param name="cellWidth">The mosaic cell width.</param>
            <param name="cellHeight">The mosaic cell height.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Mosaic(System.Drawing.Size)" draft="yes">
            <summary>Applies a mosaic effect on the bitmap using the spelcified cell size.</summary>
            <param name="cellSize">The mosaic cell size.</param>
            <remarks><para>This effect lies in averaging a block of pixels of specified size.</para></remarks>
            <overloads><summary>Applies a mosaic effect on the bitmap using the spelcified cell size.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.RemoveGreenScreen" draft="yes">
            <summary>Removes green areas in an image.</summary>
            <remarks>This method is required to replace green background with another. Such technique is called color keying.</remarks>
            <seealso href="color-keying.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Int32,System.Int32)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions.</summary>
            <param name="width">The width of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="height">The height of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class to apply this transform.</remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#inPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
            <overloads><summary>Resizes the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given interpolation algorithm.</summary>
            <param name="width">The width of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="height">The height of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the resize.</param>
            <remarks>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class to apply this transform.</remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#resizeInPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given interpolation algorithm and resize mode.</summary>
            <param name="width">The width of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="height">The height of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the resize.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions.</param>
            <remarks><para>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Resize" /> class to apply this transform.</para><note>If certain values of <i>resizeMode</i> are specified, width and height of the result bitmap may be different than <i>width</i> and <i>height</i> arguments.</note></remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#resizeInPlace"></code></example>
            <seealso href="resizing-and-cropping-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given resize mode.</summary>
            <param name="width">The width of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="height">The height of resized bitmap. If 0, it is calculated automatically to preserve the aspect ratio of the source image. Both <i>width</i> and <i>height</i> cannot be 0 at the same time.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Drawing.Size)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given interpolation algorithm.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the resize.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given interpolation algorithm and resize mode.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the resize.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Resize(System.Drawing.Size,Aurigma.GraphicsMill.Transforms.ResizeMode)" draft="yes">
            <summary>Resizes the bitmap to the specified dimensions using a given resize mode.</summary>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure containing width and height of the resulting image.</param>
            <param name="resizeMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeMode" /> which specifies how to interpret the resize dimensions.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Rotate(System.Single)" draft="yes">
            <summary>Rotates the bitmap at arbitrary angle.</summary>
            <param name="angle">The angle to rotate the image at (in degrees).</param>
            <remarks><para>If specified angle is 90, 180, or 270 degrees, a special algorithm which avoids floating-point calculations is used automatically, which yields to higher performance.</para><para>You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class to apply this transform.</para></remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#rotateInPlace"></code></example>
            <seealso href="rotating-and-flipping-images.htm" />
            <overloads><summary>Rotates the bitmap at arbitrary angle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Rotate(System.Single,Aurigma.GraphicsMill.Color,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Rotates the bitmap at arbitrary angle using the specified background color and interpolation algorithm.</summary>
            <param name="angle">The angle to rotate the image at (in degrees).</param>
            <param name="color">The background color for the rotated image.</param>
            <param name="mode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the rotation.</param>
            <remarks><para>If specified angle is 90, 180, or 270 degrees, a special algorithm which avoids floating-point calculations is used automatically, which yields to higher performance.</para><para>
                You can also use <see cref="T:Aurigma.GraphicsMill.Transforms.Rotate" /> class to apply this transform.
              </para></remarks>
            <example><code language="CS" source="Samples/Code/Transforms.cs#rotateInPlace"></code></example>
            <seealso href="rotating-and-flipping-images.htm" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Shadow(Aurigma.GraphicsMill.Color,System.Single,System.Single)" draft="yes">
            <summary>Applies a shadow effect to the bitmap using the specified settings.</summary>
            <param name="shadowColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> of this shadow.</param>
            <param name="horizontalOffset">The horizontal offset of the shadow.</param>
            <param name="verticalOffset">The vertical offset of the shadow.</param>
            <remarks><para>When you apply this effect, the image drops a shadow with specified parameters (taking into account transparent areas of the image). This effect is ideal for creating artistic texts, logos, etc.</para><note>If the bitmap does not have an alpha channel (e.g. its pixel format is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" />), alpha channel is automatically added. So be aware that pixel format of the output bitmap may differ from the input one.</note></remarks>
            <overloads><summary>Applies a shadow effect to the bitmap.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Shadow(Aurigma.GraphicsMill.Color,System.Single,System.Single,System.Single,System.Boolean)" draft="yes">
            <summary>Applies a shadow effect to the bitmap using the specified settings.</summary>
            <param name="shadowColor">A <see cref="T:Aurigma.GraphicsMill.Color" /> of this shadow.</param>
            <param name="horizontalOffset">The horizontal offset of the shadow.</param>
            <param name="verticalOffset">The vertical offset of the shadow.</param>
            <param name="radius">The blur radius used to blur the shadow.</param>
            <param name="enlargeToFit"><c>true</c> if the image fits an entire shadow; otherwise, <c>false</c>.</param>
            <remarks><para>When you apply this effect, the image drops a shadow with specified parameters (taking into account transparent areas of the image). This effect is ideal for creating artistic texts, logos, etc.</para><note>If the bitmap does not have an alpha channel (e.g. its pixel format is <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format24bppRgb" />), alpha channel is automatically added. So be aware that pixel format of the output bitmap may differ from the input one.</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Sharpen(System.Int32)" draft="yes">
            <summary>Applies a simple sharpening algorithm to the bitmap.</summary>
            <param name="strength">The sharpening strength in range <c>[0, 100]</c>.</param>
            <remarks>Sharpen algorithm is quite simple and has a single parameter <i>strength</i>. You can also use more advanced sharpening method - <see cref="M:Aurigma.GraphicsMill.TransformsProvider.UnsharpMask(System.Single,System.Single,System.Single)" />, however it is harder to use.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Spray(System.Int32)" draft="yes">
            <summary>Applies a spray effect to the bitmap using the specified amount.</summary>
            <param name="amount">The amount of the effect (variance of the random number generated by the transform).</param>
            <remarks>Spray effect lies in spreading pixels randomly.</remarks>
            <overloads><summary>Applies a spray effect to the bitmap using the specified amount.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Spray(System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.FadeType,System.Int32,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Applies a spray effect to the bitmap using the specified settings.</summary>
            <param name="amount">The amount of the effect (variance of the random number generated by the transform).</param>
            <param name="frameWidth">The width of the frame.</param>
            <param name="fadeType">A <see cref="T:Aurigma.GraphicsMill.Transforms.FadeType" /> that specifies fade type for the spray effect.</param>
            <param name="seed">Te seed for random generator.</param>
            <param name="bgColor">The background color.</param>
            <remarks>Spray effect lies in spreading pixels randomly.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Transparentize" draft="yes">
			<overloads><summary>Sets alpha values of pixels to transparent.</summary></overloads>
			<overloads><summary>Sets alpha values of white pixels to transparent.</summary></overloads>
            <example><code language="CS" source="Samples/Code/Transforms.cs#transparentizeDefaultColor"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Transparentize(Aurigma.GraphicsMill.Color)" draft="yes">
			<overloads><summary>Sets alpha values of pixels with a background color to transparent.</summary></overloads>
            <param name="backgroundColor">The background color.</param>
            <example><code language="CS" source="Samples/Code/Transforms.cs#transparentizeGivenColor"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Texturize(System.Int32,System.Int32)" draft="yes">
            <summary>Texturizes the bitmap by reducing its size and "gluing" it with its copies seamlessly.</summary>
            <param name="columnsAmount">The number of columns.</param>
            <param name="rowsAmount">The number of rows.</param>
            <remarks>This method creates a texture from the image by reducing its size and "gluing" it with its copies seamlessly.</remarks>
            <overloads><summary>Texturizes the bitmap by reducing its size and "gluing" it with its copies seamlessly.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.Texturize(System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.FlipType,Aurigma.GraphicsMill.Transforms.FadeType,Aurigma.GraphicsMill.Transforms.InterpolationMode)" draft="yes">
            <summary>Texturizes the bitmap by reducing its size and "gluing" it with its copies seamlessly.</summary>
            <param name="columnsAmount">The number of columns.</param>
            <param name="rowsAmount">The number of rows.</param>
            <param name="horizontalIntersection">The value that specifies how much percents of image are overlapped horizontally (at single side).</param>
            <param name="verticalIntersection">The value that specifies how much percents of image are overlapped vertically (at single side).</param>
            <param name="flipMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.FlipType" /> value that specifies how to flip the images one relatively other.</param>
            <param name="fadeType">A <see cref="T:Aurigma.GraphicsMill.Transforms.FadeType" /> value that specifies how to fade out edges to eliminate seams.</param>
            <param name="interpolationMode">A <see cref="T:Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode" /> interpolation algorithm which used during the transformation.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TransformsProvider.UnsharpMask(System.Single,System.Single,System.Single)" draft="yes">
            <summary>Increases a sharpness of the bitmap by using the <i>unsharp mask</i> technique.</summary>
            <param name="amount">The unsharp mask amount.</param>
            <param name="radius">The blur radius used to produce unfocused version of the image.</param>
            <param name="threshold">The threshold value for the unsharp mask in range [0, 1].</param>
            <remarks><para><i>Unsharp mask</i> is a wide-spread technique used by photographers to increase image sharpness even in precomputer times. The idea is to combine the image with the unfocused (blurred) version. This class provides the <i>radius</i> parameter to tune the blur effect. During combining the algorithm calculates the difference between corresponding pixels of original and blurred image. If this difference is greater than value specified with <i>threshold</i> parameter, algorithm adds this N percents of this difference to original pixel (N is set by <i>amount</i> parameter). Otherwise no changes to original pixel are done. As blurred image differs from original ones mainly on the object edges, sharpening effect is achieved.</para><para>Using this technique is quite difficult to untrained user as it requires three non-intuitive parameters (amount, radius, and threshold). That's why if you want to provide user easy way to manipulate image sharpness, you can use <see cref="M:Aurigma.GraphicsMill.TransformsProvider.Sharpen(System.Int32)" /> transform which is less flexible, but much more easy-to-use.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.TrialPeriodTimeException" draft="yes">
            <summary>Represents the error that occurs when the trial version has been expired.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.TrialPeriodTimeException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.TrialPeriodTimeException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.TrialPeriodTimeException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.TrialPeriodTimeException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.TrialPeriodTimeException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TrialPeriodTimeException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.TrialPeriodTimeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.TrialPeriodTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.UnexpectedException" draft="yes">
            <summary>Represents the error that occurs when Graphics Mill has encountered an unexpected problem (mostly caused by some internal bug).</summary>
            <remarks>If you get this exception, it is likely you have discovered some Graphics Mill bug. In this case it would be greatly appreciated if you create <a href="http://www.aurigma.com/account/cases/add">support case</a>. Please provide as much details as possible (code snippet which causes a problem, loaded image, system details, etc).</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.UnexpectedException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnexpectedException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnexpectedException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnexpectedException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnexpectedException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnexpectedException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnexpectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnexpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Unit">
            <summary>Contains unit types. It can be either device-dependent unit (pixel) or device-independent (inches, points, etc).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Cm" draft="yes">
            <summary>Centimeter (100/254 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Column" draft="yes">
            <summary>Column (100/263 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Document" draft="yes">
            <summary>Document unit (1/300 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Inch">
            <summary>Inch.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.M" draft="yes">
            <summary>Meter (10000/254 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Mm" draft="yes">
            <summary>Millimeter (10/254 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Pica" draft="yes">
            <summary>Pica (1/6 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Pixel">
            <summary>Pixel.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Point" draft="yes">
            <summary>Point (1/72 of an inch).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Unit.Twip" draft="yes">
            <summary>Twip (1/20 of a point).</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.UnitConverter" draft="yes">
            <summary>Contains methods and properties intended to convert values from one spatial units to another.</summary>
            <remarks><para>This class provides three static methods which enables you to convert:</para><list type="bullet"><item><description>Device-dependent units (pixels) -&gt; device-independent units (like inches, centimeters, etc). See the method <see cref="M:Aurigma.GraphicsMill.UnitConverter.ConvertPixelsToUnits(System.Single,System.Int32,Aurigma.GraphicsMill.Unit)" />.</description></item><item><description>Device-independent units -&gt; device-dependent units. See the method <see cref="M:Aurigma.GraphicsMill.UnitConverter.ConvertUnitsToPixels(System.Single,System.Single,Aurigma.GraphicsMill.Unit)" />.</description></item><item><description>One device-independent units -&gt; another device-independent units. See the method <see cref="M:Aurigma.GraphicsMill.UnitConverter.ConvertUnitsToUnits(System.Single,System.Single,Aurigma.GraphicsMill.Unit,Aurigma.GraphicsMill.Unit)" />.</description></item></list><para>All these method require a parameter called resolution - a number of pixels in one inch (dots per pixel - DPI). Typically this parameter depends on the resolution you are going to get when printing the image (e.g. 300 or 600 DPI). Also, it can be a screen resolution (as usual, 96 DPI).</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.UnitConverter.ConvertPixelsToUnits(System.Single,System.Int32,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts a value measured in pixels (device-dependent units) to specified device-independent unit.</summary>
            <param name="resolution">A resolution in DPI used to convert pixels to <i>destinationUnit</i>.</param>
            <param name="sourceValue">A value in pixels which should be converted to <i>destinationUnit</i>.</param>
            <param name="destinationUnit">A destination unit.</param>
            <returns>A value converted to <i>destinationUnit</i>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnitConverter.ConvertUnitsToPixels(System.Single,System.Single,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts a value measured in specified device-independent unit to pixels.</summary>
            <param name="resolution">A resolution in DPI used to convert <i>sourceUnit</i> to pixels.</param>
            <param name="sourceValue">A value measured in <i>sourceUnit</i> which should be converted to pixels.</param>
            <param name="sourceUnit">A source unit.</param>
            <returns>A value converted to pixels.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnitConverter.ConvertUnitsToUnits(System.Single,System.Single,Aurigma.GraphicsMill.Unit,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts a value measured in one device-independent unit to another one.</summary>
            <param name="resolution">A resolution in DPI.</param>
            <param name="sourceValue">A value measured in <i>sourceUnit</i> which should be converted to <i>destinationUnit</i>.</param>
            <param name="sourceUnit">A source unit.</param>
            <param name="destinationUnit">A destination unit.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnitConverter.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnitConverter" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnitConverter" /> class.</summary></overloads>
        </member>
        <member name="T:Aurigma.GraphicsMill.UnsignedRational" draft="yes">
            <summary>Represents unsigned rational numbers.</summary>
            <remarks><para>Rational number is a number which may be represented as a division of two natural numbers. For example, 3/4, 2/1, 1/6, etc. Not all fractional numbers are rational. For example, a Pi number is <i>irrational</i> (i.e. cannot be represented as a division of two natural numbers).</para><para>This class provides an access to <see cref="P:Aurigma.GraphicsMill.UnsignedRational.Dividend" /> and <see cref="P:Aurigma.GraphicsMill.UnsignedRational.Divider" />. A <see cref="P:Aurigma.GraphicsMill.UnsignedRational.Divider" /> cannot be zero.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.UnsignedRational.Dividend" draft="yes">
            <summary>Gets or sets a dividend of the rational number.</summary>
            <value>The dividend of the rational number (i.e. if represent rational number as <i>p/q</i>, dividend is <i>p</i>).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.UnsignedRational.Divider" draft="yes">
            <summary>Gets or sets a divider of the rational number.</summary>
            <value>The divider of the rational number (i.e. if represent rational number as <i>p/q</i>, divider is <i>q</i>).</value>
            <remarks>Divider cannot equal to zero.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.Equals(System.Object)" draft="yes">
            <summary>Tests whether the specified object is a <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instance and is equivalent to this <see cref="T:Aurigma.GraphicsMill.UnsignedRational" />.</summary>
            <param name="object">The object to test.</param>
            <returns><c>true</c> if <i>object</i> is a <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instance equivalent to this <see cref="T:Aurigma.GraphicsMill.UnsignedRational" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.GetHashCode" draft="yes">
            <summary>Returns a hash code for this <see cref="T:Aurigma.GraphicsMill.UnsignedRational" />.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Aurigma.GraphicsMill.UnsignedRational" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.#ctor(System.UInt32,System.UInt32)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> class with the specified dividend and divider.</summary>
            <param name="dividend">The dividend of the rational number (i.e. if represent rational number as <i>p/q</i>, dividend is <i>p</i>). You can change it later using <see cref="P:Aurigma.GraphicsMill.UnsignedRational.Dividend" /> property.</param>
            <param name="divider">The divider of the rational number (i.e. if represent rational number as <i>p/q</i>, divider is <i>q</i>). You can change it later using <see cref="P:Aurigma.GraphicsMill.UnsignedRational.Divider" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.op_Equality(Aurigma.GraphicsMill.UnsignedRational,Aurigma.GraphicsMill.UnsignedRational)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instances are equivalent.</summary>
            <param name="l">The <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> that is to the left of the equality operator.</param>
            <param name="r">The <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.op_Inequality(Aurigma.GraphicsMill.UnsignedRational,Aurigma.GraphicsMill.UnsignedRational)" draft="yes">
            <summary>Tests whether two specified <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instances are different.</summary>
            <param name="l">The <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> that is to the left of the inequality operator.</param>
            <param name="r">The <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:Aurigma.GraphicsMill.UnsignedRational" /> instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsignedRational.ToString" draft="yes">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
		
<!-- UnsupportedFontException -->
        <member name="T:Aurigma.GraphicsMill.UnsupportedFontException" draft="yes">
            <summary>Represents the error that occurs when you try to operate with an unsupported font.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedFontException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedFontException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedFontException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedFontException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedFontException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedFontException.#ctor(System.String,System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedFontException" /> class with a specified font family and style.</summary>
            <param name="family">Font family.</param>
            <param name="style">Font style.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedFontException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedFontException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedFontException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- UnsupportedPixelFormatException -->		
        <member name="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" draft="yes">
            <summary>Represents the error that occurs when you try to apply some operation on the bitmap, and this operation cannot handle pixel format of this bitmap.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedPixelFormatException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedPixelFormatException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedPixelFormatException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.UnsupportedPixelFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.Win32Exception" draft="yes">
            <summary>Represents the error that occurs when some WinAPI error returned.</summary>
            <remarks>This exception can be met during file operations, working with GDI, and other system-related problems.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Win32Exception.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Win32Exception" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Win32Exception" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Win32Exception.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Win32Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Win32Exception.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Win32Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Win32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

<!-- Drawing namespace -->
        <member name="N:Aurigma.GraphicsMill.Drawing" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.Drawing" /> namespace contains classes intended to: draw lines, curves, shapes and outlined text; use various pens and brushes to outline and fill shapes.</summary>
        </member>
		
<!-- Drawing.BeginDrawEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Drawing.BeginDrawEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.Drawing.Drawer.BeginDraw" /> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>
		
<!-- Drawing.Brush -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Brush" draft="yes">
            <summary>Represents the base class for Graphics Mill brushes.</summary>
            <remarks><para>This class is abstract, so you cannot directly instantiate it. You should create some of derived classes (e.g. <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> or <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />). You can also cast some brush classes from <see cref="N:System.Drawing">System.Drawing</see> namespace (and vice versa).</para></remarks>
            <!-- <seealso href="pens-and-brushes.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Brush.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Brush.op_Explicit(Aurigma.GraphicsMill.Drawing.Brush)~System.Drawing.Brush" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Brush">Aurigma.GraphicsMill.Drawing.Brush</see> instance to a <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see>.</summary>
            <param name="brush">The <see cref="T:Aurigma.GraphicsMill.Drawing.Brush">Aurigma.GraphicsMill.Drawing.Brush</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Brush.op_Implicit(System.Drawing.Brush)~Aurigma.GraphicsMill.Drawing.Brush" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> instance to a <see cref="T:Aurigma.GraphicsMill.Drawing.Brush">Aurigma.GraphicsMill.Drawing.Brush</see>.</summary>
            <param name="brush">The <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Drawing.Brush">Aurigma.GraphicsMill.Drawing.Brush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Brush.ToGdiPlusBrush" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" />.</summary>
            <returns>A <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" />.</returns>
        </member>

<!-- Drawing.Charset -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Charset">
            <summary>Contains values specifying charsets.</summary>
            <remarks>As usual you should use default charset (which uses charset used in system), but if you have problems with internationalization of your application, you may need to use specific charsets.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Ansi">
            <summary>ANSI charset. Used in the United States and Western Europe.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Arabic">
            <summary>Arabic charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Baltic">
            <summary>Baltic charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.ChineseBig5">
            <summary>Chinese BIG5 charset. Used in Taiwan (Traditional Chinese characters).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Default">
            <summary>The default charset. Actual charset is taken from system settings.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.EastEurope">
            <summary>East Europe charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Gb2312">
            <summary>GB2312 charset. Used in mainland China (Simplified Chinese characters).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Greek">
            <summary>Greek charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Hangul">
            <summary>Hangul charset. Used in Korea (Wansung).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Hebrew">
            <summary>Hebrew charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Johab">
            <summary>Johab charset. Used in Korea (Johab).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Mac">
            <summary>Macintosh charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Oem">
            <summary>OEM charset. Depends on the codepage of the operating system. The same charset is used by MS-DOS.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Russian">
            <summary>CharsetRussianCyrillic charset. Used in Russia, Belarus, Ukraine and some other slavic countries.
Cyrillic charset. Used in Russia, Belarus, Ukraine and some other slavic countries.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.ShiftJis">
            <summary>Shift-JIS (Japanese Industry Standard) charset. Used in Japan.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Symbol">
            <summary>Standard symbol charset. Used to display such fonts as Symbol or Wingdings.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Thai">
            <summary>Thai charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Turkish">
            <summary>Turkish charset.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Charset.Vietnamese">
            <summary>Vietnamese charset.</summary>
        </member>

<!-- Drawing.Drawer -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Drawer" draft="yes">
            <summary>Represents the base class for classes that support drawing within a pipeline.</summary>
            <!-- <seealso href="drawing-on-images-with-pipelines.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="E:Aurigma.GraphicsMill.Drawing.Drawer.BeginDraw" draft="yes">
            <summary>Occurs when the drawing is about to start.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.Drawing.Drawer.EndDraw" draft="yes">
            <summary>Occurs when the drawing is finished.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Drawer.#ctor">
            <exclude />
        </member>

<!-- Drawing.EndDrawEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Drawing.EndDrawEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.Drawing.Drawer.EndDraw" /> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>

<!-- Drawing.Font -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Font" draft="yes">
            <summary>Accumulates font and other text rendering settings. It also provides functionality for retrieving font metrics, and other font-related information.</summary>
            <remarks><para>You can use this class for two intentions.</para><list type="number"><item><description>Specifying text rendering parameters. These settings are used to draw the text. This way you can specify font <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Name" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Size" />, make it <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Bold" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Italic" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Underline" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Strikeout" />, etc. You can also adjust text rendering quality by using <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Antialiased" /> property. Using <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties you specify how to locate text relatively drawing coordinates.</description></item><item><description>Text measurement. If you need to know individual positions of each character in the text string, you can use <see cref="M:Aurigma.GraphicsMill.Drawing.Font.GetCharacterPositions(System.String,System.Single)" /> method. If you need more advanced calculations, this class provides you a number of font metrics, like <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Ascent" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Descent" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.AverageCharWidth" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.ExternalLeading" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Font.InternalLeading" />, and others. </description></item></list><note>If you need to know how much room a text string with given settings will occupy use the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</note></remarks>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
            <!-- <seealso href="drawing-text.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Antialiased" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is antialiased.</summary>
            <value><c>true</c> if the text is antialiased; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
            <remarks><para>Antialiased text is looking smooth, displayed with high quality. However it works slower than displaying text without antialiasing.</para><para>Antialiasing can be applied only to full-color bitmaps. When drawing on indexed bitmaps, antialiasing cannot be used by its nature.</para><note>If the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> was created on the base of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> which has <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppGrayscale" /> pixel format, antialiasing will not be applied for text output. The reason of this issue is that GDI does not support grayscale bitmaps. That's why Graphics Mill represents this image as <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format8bppIndexed" /> bitmap with grayscale palette. </note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Ascent" draft="yes">
            <summary>Get an ascent of the current font.</summary>
            <value>The font ascent.</value>
            <remarks>Ascent is the distance between the top of the character cell and the baseline.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.AverageCharWidth" draft="yes">
            <summary>Gets an average character width of the current font.</summary>
            <value>The average character width of the current font.</value>
            <remarks>As usual it is defined as a width of character "x". This value does not include the overhang required for bold or italic characters.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Bold" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is bold.</summary>
            <value><c>true</c> if the text is bold; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.ClearType" draft="yes">
            <summary>Gets or sets a value that indicates whether the ClearType antialiasing is used for fonts (optimized for LCD monitors).</summary>
            <value><c>true</c> if the ClearType is used during text rendering; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <remarks><para>The following situations do not support ClearType antialiasing:</para><list type="bullet"><item><description>Text is rendered on a printer.</description></item><item><description>A display is set for 256 colors or less.</description></item><item><description>Text is rendered to a terminal server client.</description></item><item><description>The font is not a TrueType or an OpenType with TrueType outlines. For example, the following do not support ClearType antialiasing: Type 1 fonts, Postscript OpenType fonts without TrueType outlines, bitmap fonts, vector fonts, and device fonts.</description></item><item><description>The font has tuned embedded bitmaps, only for the font sizes that contain the embedded bitmaps. For example, this occurs commonly in East Asian fonts.</description></item></list></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.CreateSpecificFont(System.String,System.Boolean,System.Single)" draft="yes">
            <summary>Returns a font with the requested name.</summary>
            <param name="fontName">The name of the font installed on the computer.</param>
            <param name="postScriptName"><c>true</c><paramref name="fontName" /> is in the PostScript format; otherwise, <c>false</c>.</param>
            <param name="size">The size of the requested font.</param>
            <returns>Thr requested font or <c>null</c> if no font with the specified name can be found.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Descent" draft="yes">
            <summary>Get an descent of the current font.</summary>
            <value>The font descent.</value>
            <remarks>Descent is the distance between the baseline and the bottom of the character cell.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.EmHeight" draft="yes">
            <summary>Gets an em height of the font (also known as <i>em square</i> or <i>em size</i>).</summary>
            <value>The em height of the font.</value>
            <remarks><para>This parameter means the size of the glyphs in design units. Width and height of the glyph are always the same, that's why sometimes it is called em square.</para><para>Typically this size is divisible to 1024 (usually 1024 or 2048).</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.ExternalLeading" draft="yes">
            <summary>Gets an external leading of the current font.</summary>
            <value>The external leading of the current font.</value>
            <remarks>This value specifies the amount of extra leading (space) that the application adds between rows. The font designer may set this value to zero.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.Finalize">
            <exclude />
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightBold">
            <summary>Bold weight. Always 700.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightDoNotCare">
            <summary>The default weight. Always 0.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightExtrabold">
            <summary>Extra bold weight. Always 800.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightExtraLight">
            <summary>Extra light weight. Always 200.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightHeavy">
            <summary>Heavy weight. Always 900.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightLight">
            <summary>Light weight. Always 300.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightMedium">
            <summary>Medium weight. Always 500.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightNormal">
            <summary>Normal weight. Always 400.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightSemibold">
            <summary>Semibold weight. Always 600.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightThin">
            <summary>Thin weight. Always 100.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.GdiCharset" draft="yes">
            <summary>Gets or sets a charset for displaying non-Unicode characters.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.Charset" /> for displaying non-Unicode characters. The default value is <see cref="F:Aurigma.GraphicsMill.Drawing.Charset.Default" /> (i.e. charset depends on locale settings).</value>
            <remarks>You can use this property when you have non-Unicode text string (for example, taken from legacy software or database) and need to display it correctly. Otherwise you should not change this property.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetA(System.Char)" draft="yes">
            <summary>Returns an A spacing (from ABC metric) for the given character.</summary>
            <param name="symbol">The character to retrieve the A spacing for.</param>
            <returns>The A spacing from for given character.</returns>
            <remarks><para>ABC metric is defined for TrueType fonts in the following way:</para><list type="bullet"><item><term>A spacing</term><description> - the distance to add to the current position before drawing the glyph.</description></item><item><term>B spacing</term><description> - the width of the drawn portion of the glyph.</description></item><item><term>C spacing</term><description> - the distance to add to the current position to provide white space to the right of the glyph.</description></item></list><para>The total width of a character is the sum of the A, B, and C spaces. Either the A or the C space can be negative to indicate underhangs or overhangs.</para><para>ABC metric makes no sense for non-TrueType fonts.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetB(System.Char)" draft="yes">
            <summary>Returns an B spacing (from ABC metric) for the given character.</summary>
            <param name="symbol">The character to retrieve the B spacing for.</param>
            <returns>The B spacing from for given character.</returns>
            <remarks><para>ABC metric is defined for TrueType fonts in the following way:</para><list type="bullet"><item><term>A spacing</term><description> - the distance to add to the current position before drawing the glyph.</description></item><item><term>B spacing</term><description> - the width of the drawn portion of the glyph.</description></item><item><term>C spacing</term><description> - the distance to add to the current position to provide white space to the right of the glyph.</description></item></list><para>The total width of a character is the sum of the A, B, and C spaces. Either the A or the C space can be negative to indicate underhangs or overhangs.</para><para>ABC metric makes no sense for non-TrueType fonts.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetBlackBox(System.Char)" draft="yes">
            <summary>Returns a rectangle that describes the character black box.</summary>
            <param name="symbol">The character to retrieve a black box for.</param>
            <returns>The rectangle that describes the character black box.</returns>
            <remarks><para>Character black box is a tightest bounding rectangle of the glyph in the character cell. This way you can calculate actual height of the character without any leading whitespaces.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
            <overloads><summary>Returns a rectangle that describes the character black box.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetBlackBox(System.String)" draft="yes">
            <summary>Returns a rectangle that describes the string black box.</summary>
            <param name="string">The string to retrieve a black box for.</param>
            <returns>The rectangle that describes the string black box.</returns>
            <remarks><para>String black box is a tightest bounding rectangle of glyphs in cells of all characters in a string. This way you can calculate actual height of the character without any leading whitespaces.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetBlackBox(System.String,System.Single[])" draft="yes">
            <summary>Returns a rectangle that describes the string black box.</summary>
            <param name="string">The string to retrieve a black box for.</param>
            <param name="kernings">The array of kerning modifiers. The first entry of this array specifies an additional distance (may be negative) between the first and the second characters of the string; the second entry specifies additional distance between second and third character, etc.</param>
            <returns>The string to retrieve a black box for.</returns>
            <remarks><para>String black box is a tightest bounding rectangle of glyphs in cells of all characters in a string. This way you can calculate actual height of the character without any leading whitespaces.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetC(System.Char)" draft="yes">
            <summary>Returns an C spacing (from ABC metric) for the given character.</summary>
            <param name="symbol">The character to retrieve the C spacing for.</param>
            <returns>The character to retrieve the C spacing for.</returns>
            <remarks><para>ABC metric is defined for TrueType fonts in the following way:</para><list type="bullet"><item><term>A spacing</term><description> - the distance to add to the current position before drawing the glyph.</description></item><item><term>B spacing</term><description> - the width of the drawn portion of the glyph.</description></item><item><term>C spacing</term><description> - the distance to add to the current position to provide white space to the right of the glyph.</description></item></list><para>The total width of a character is the sum of the A, B, and C spaces. Either the A or the C space can be negative to indicate underhangs or overhangs.</para><para>ABC metric makes no sense for non-TrueType fonts.</para></remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetCharacterPositions(System.String,System.Single)" draft="yes">
            <summary>Returns an array of x-coordinates of each character in a given text string.</summary>
            <param name="text">The string to retrieve character positions from.</param>
            <param name="startX">The position of the beginning of the string (regardless to the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" />).</param>
            <returns>The array of containing X-coordinates of the characters in a given string.</returns>
            <remarks><note>The <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> can have a <see cref="P:Aurigma.GraphicsMill.Drawing.Graphics.Transform" /> matrix initialized. This way you can draw text rotated or scaled. However this method does not take it into account and returns values as if the <see cref="P:Aurigma.GraphicsMill.Drawing.Graphics.Transform" /> is reset to identity matrix (sets no transformation).</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.GetKerning(System.Char,System.Char)" draft="yes">
            <summary>Returns a kerning value for a given pair of characters.</summary>
            <param name="symbol1">The first character.</param>
            <param name="symbol2">The second character.</param>
            <returns>The kerning value for a given pair of characters.</returns>
            <remarks><para>Fonts can be divided into two groups - fixed fonts and variable fonts. All the characters in the fixed fonts (e.g. <i>Courier New</i>) has the same width and the distance between characters is always the same. Kerning for any pair of characters in such fonts is always 0. Variable fonts (e.g. <i>Times New Roman</i>) has more natural appearance: "narrow" letters like "i", "t", or "l" takes less space than "wide" ones, like "w", "M", or "O". Besides of that, distances between different pairs of characters varies. For example, when you draw "fi" with variable font, the distance between characters is less than when you draw "pi".</para><para>This distance between characters is called kerning. Kerning pairs are specified with font designer and even if font is variable, they may be defined not for all pairs of characters.</para><para>You can provide your own kernings when drawing text by supplying <i>kernings</i> argument in <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Single[])" /> method.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" draft="yes">
            <summary>Gets or sets a horizontal text alignment.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.HorizontalAlignment" /> value. The default value is <see cref="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.Left" />.</value>
            <remarks>Horizontal text alignment is a value specifying how to locate the text string relatively to an X-coordinate of the output point (which is defined in the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32)" /> method).</remarks>
            <example><code language="CS" source="Samples/Code/Text.cs#string2"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.InternalLeading" draft="yes">
            <summary>Gets an internal leading of the current font.</summary>
            <value>The internal leading for the current font.</value>
            <remarks>This value specifies the amount of leading (space) inside the bounds set by the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Size" /> property. Accent marks and other diacritical characters may occur in this area. The font designer may set this value to zero.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Italic" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is italic.</summary>
            <value><c>true</c> if the text is italic; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.LineGap" draft="yes">
            <summary>Gets a line gap of the current font.</summary>
            <value>The line gap of the current font.</value>
            <remarks>Line gap means a spacing between two lines when they are displayed one under another.</remarks>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.MaximumCharWidth" draft="yes">
            <summary>Gets a width of the widest character in the font.</summary>
            <value>The maximum character width for the current font.</value>
            <!-- <seealso href="text-coordinates-and-font-metrics.htm" --> />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Name" draft="yes">
            <summary>Gets a typeface name of the font.</summary>
            <value>The font name. The default value is "Arial".</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.#ctor(Aurigma.GraphicsMill.Drawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> class from the specified existing font.</summary>
            <param name="font">The <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> to be copied.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.#ctor(System.String,System.Single)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> class using the specified font name and size.</summary>
            <param name="familyName">The font typeface name. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Name" /> property.</param>
            <param name="size">The font size. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Size" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.#ctor(System.String,System.Single,System.Boolean,System.Boolean)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> class using the specified font name, size, and values indicating whether it should be bold and/or italic.</summary>
            <param name="familyName">The font typeface name. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Name" /> property.</param>
            <param name="size">The font size. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Size" /> property.</param>
            <param name="bold"><c>true</c> if the font is bold; otherwise, <c>false</c>. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Bold" /> property.</param>
            <param name="italic"><c>true</c> if the font is italic; otherwise, <c>false</c>. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.Font.Italic" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.#ctor(System.Drawing.Font)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> class by copying font settings from the specified <see cref="T:System.Drawing.Font">System.Drawing.Font</see> object.</summary>
            <param name="font">The <see cref="T:System.Drawing.Font">System.Drawing.Font</see> from which to create the new <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.op_Explicit(Aurigma.GraphicsMill.Drawing.Font)~System.Drawing.Font" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font">Aurigma.GraphicsMill.Drawing.Font</see> instance to a <see cref="T:System.Drawing.Font">System.Drawing.Font</see>.</summary>
            <param name="font">The <see cref="T:Aurigma.GraphicsMill.Drawing.Font">Aurigma.GraphicsMill.Drawing.Font</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Font">System.Drawing.Font</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.op_Implicit(System.Drawing.Font)~Aurigma.GraphicsMill.Drawing.Font" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Font">System.Drawing.Font</see> instance to a <see cref="T:Aurigma.GraphicsMill.Drawing.Font">Aurigma.GraphicsMill.Drawing.Font</see>.</summary>
            <param name="font">The <see cref="T:System.Drawing.Font">System.Drawing.Font</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Drawing.Font">Aurigma.GraphicsMill.Drawing.Font</see> to which this operator converts.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Size" draft="yes">
            <summary>Gets or sets a font size.</summary>
            <value>The font size. The default value is 10.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Strikeout" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is stricken out.</summary>
            <value><c>true</c> if the text is stricken out; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Font.ToGdiPlusFont" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Font">System.Drawing.Font</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />.</summary>
            <returns>A <see cref="T:System.Drawing.Font">System.Drawing.Font</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Tracking" draft="yes">
            <summary>Gets or sets a font tracking (also known as intercharacter spacing).</summary>
            <value>The font tracking. The default value is <c>0</c>.</value>
            <remarks>Font tracking is a spacing between characters in the text string. It is added to each character, including break character.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Underline" draft="yes">
            <summary>Gets or sets a value that indicates whether the text is underlined.</summary>
            <value><c>true</c> if the text is underlined; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" draft="yes">
            <summary>Gets or sets a horizontal text alignment.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.HorizontalAlignment" /> value. The default value is <see cref="F:Aurigma.GraphicsMill.Drawing.VerticalAlignment.Top" />.</value>
            <remarks>Vertical text alignment is a value specifying how to locate the text string relatively to an Y-coordinate of the output point (which is defined in the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32)" /> method).</remarks>
            <example><code language="CS" source="Samples/Code/Text.cs#string3"></code></example>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Font.Weight" draft="yes">
            <summary>Gets or sets a font weight.</summary>
            <value>The weight of the font in the range [0, 1000]. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</value>
            <remarks><para>You can use predefined constants for font weight for convenience.</para><list type="table"><listheader><term> Constant </term><description> Weight </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightDoNotCare" /></term><description>0</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightThin" /></term><description>100</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightExtraLight" /></term><description>200</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightLight" /></term><description>300</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightNormal" /></term><description>400</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightMedium" /></term><description>500</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightSemibold" /></term><description>600</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightBold" /></term><description>700</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightExtrabold" /></term><description>800</description></item><item><term><see cref="F:Aurigma.GraphicsMill.Drawing.Font.FontWeightHeavy" /></term><description>900</description></item></list></remarks>
        </member>

<!-- Drawing.GdiGraphicsMode -->
        <member name="T:Aurigma.GraphicsMill.Drawing.GdiGraphicsMode" draft="yes">
            <summary>Contains modes of the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> object.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.GdiGraphicsMode.Bitmap" draft="yes">
            <summary>Bitmap.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.GdiGraphicsMode.Hdc" draft="yes">
            <summary>Handle to device context (HDC).</summary>
        </member>

<!-- Drawing.GdiPlusGraphicsDrawer -->
        <member name="T:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawer" draft="yes">
            <summary>Provides the <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> object for drawing within a pipeline.</summary>
            <!-- <seealso href="drawing-on-images-with-pipelines.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="E:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawer.Draw" draft="yes">
            <summary>Occurs when the drawing is performed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawer.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawer" /> class.</summary>
        </member>

<!-- Drawing.GdiPlusGraphicsDrawEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawer.Draw">GdiPlusGraphicsDrawer.Draw</see> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawEventArgs.Graphics" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> to draw on an image.</summary>
            <value>The <see cref="T:System.Drawing.Graphics">System.Drawing.Graphics</see> providing the GDI+ drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawEventArgs.Height" draft="yes">
            <summary>Gets a height of the drawing surface (in pixels).</summary>
            <value>The height of the drawing surface (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GdiPlusGraphicsDrawEventArgs.Width" draft="yes">
            <summary>Gets a width of the drawing surface (in pixels).</summary>
            <value>The width of the drawing surface (in pixels).</value>
        </member>

<!-- Drawing.Graphics -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Graphics" draft="yes">
            <summary>Represents drawing functionality provided with Graphics Mill.</summary>
            <remarks><para>This class allows you to draw lines, curves, and shapes as well as text at the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> or device context (it can be a window, printer, etc). Drawing methods can be divided into two groups: outlining and filling ones. Outlining methods draw an outline and has a <i>Draw</i> prefix. E.g.</para><list type="bullet"><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawArc" /></term><description> draws an arc.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawBezier" /></term><description> draws a Bezier spline.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse" /></term><description> draws an outline for an ellipse.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawLine" /></term><description> draws a line.</description></item><item><term><see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLines(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])">DrawLines()</see></term><description> draws a polyline.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie" /></term><description> draws an outline for a pie.</description></item><item><term><see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])">DrawPolygon()</see></term><description> draws an outline for a polygon.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle" /></term><description> draws an outline for a rectangle.</description></item></list><para>Filling methods are drawing filled shapes without outline:</para><list type="bullet"><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse" /></term><description> draws a filled ellipse.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.FillPie" /></term><description> draws a filled pie.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.FillPolygon" /></term><description> draws a filled polygon.</description></item><item><term><see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle" /></term><description> draws a filled rectangle.</description></item></list><para>This class also provides a wide functionality for text output. There are a number of overloads of the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawString" /> method: <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32)">draw simple string filled with solid color</see>, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32)">draw outlined text</see>, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Drawing.TextTrimmingMode,System.Boolean,System.Boolean,System.Boolean)">draw multiline text</see>, etc.</para><para>You can also draw a image using this class. It can be done with overloads of the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage" /> method.</para><para>Sometimes you need to prevent some parts of the bitmap or the device context to be drawn at (i.e. clip the drawing that is outside of some region). Fortunately the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> class have a built-in clipping support. You can specify clipping region through the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.SetClip" /> methods, and apply set-theory operations (<see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip" /> and <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip" /> methods), reset clipping region (<see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" />), move it (<see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />), etc.</para><para>If the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> features are not enough for you, you can use a power of Windows GDI. Using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.GetDC" /> method you can get a HDC this graphics represents, and use it in GDI functions.</para><note>GDI cannot handle bitmaps with an alpha channel when it draws anything on it. As the high byte of 4-byte color must be zero in GDI, each pixel drawn with GDI becomes transparent. So now, if you try to call any drawing methods for the bitmaps with an alpha channel when using GDI, the <see cref="T:Aurigma.GraphicsMill.UnsupportedPixelFormatException" /> exception will be thrown.</note></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#penGM"></code></example>
            <!-- <seealso href="gdi-graphics-vs-system-drawing-graphics.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.Clear(Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Clears the entire drawing surface and fills it with the specified background color.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.Clip" draft="yes">
            <summary>Gets a <see cref="T:System.Drawing.Region" /> that limits the drawing region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary>
            <value>A <see cref="T:System.Drawing.Region" /> that limits the portion of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> that is currently available for drawing.</value>
            <remarks>If you modify a <see cref="T:System.Drawing.Region" /> returned with this property, the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> will not be changed. To change a clipping region use such methods as <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />, and <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />. Clip region can be reset with <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" /> method.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.ClipBounds" draft="yes">
            <summary>Gets a <see cref="T:System.Drawing.RectangleF" /> structure that bounds the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary>
            <value>A <see cref="T:System.Drawing.RectangleF" /> structure that represents a bounding rectangle for the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</value>
            <remarks>To check if a clipping region is set to this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />, use the <see cref="P:Aurigma.GraphicsMill.Drawing.Graphics.IsClipEmpty" /> property.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.DpiX" draft="yes">
            <summary>Gets the horizontal resolution of the drawing surface (in pixels per inch).</summary>
            <value>The horizontal resolution of the drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.DpiY" draft="yes">
            <summary>Gets the vertical resolution of the drawing surface (in pixels per inch).</summary>
            <value>The vertical resolution of the drawing surface.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawArc(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">The width of the rectangle that defines the ellipse.</param>
            <param name="height">The height of the rectangle that defines the ellipse.</param>
            <param name="startAngle">The angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">The angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <remarks><para>Arc is a part of the ellipse. In this method arc is defined with a tightest bounding rectangle of this ellipse and two angles which specify necessary ellipse sectors.</para></remarks>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
            <overloads><summary>Draws an arc.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawArc(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" draft="yes">
            <summary>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the arc.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that defines the boundaries of the ellipse.</param>
            <param name="startAngle">The angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">An angle between first and second radial line which defines a sector on the ellipse.</param>
            <remarks><para>Arc is a part of the ellipse. In this method arc is defined with a tightest bounding rectangle of this ellipse and two angles which specify necessary ellipse sectors.</para></remarks>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawBezier" draft="yes">
            <summary>Draws a Bezier spline defined by the given coordinates.</summary>
            <overloads><summary>Draws a Bezier spline.</summary></overloads>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawBezier(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Draws a Bezier spline defined by four ordered pairs of coordinates that represent points.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="x1">The x-coordinate of the starting point of the curve.</param>
            <param name="y1">The y-coordinate of the starting point of the curve.</param>
            <param name="x2">The x-coordinate of the first control point for the curve.</param>
            <param name="y2">The y-coordinate of the first control point for the curve.</param>
            <param name="x3">The x-coordinate of the second control point for the curve.</param>
            <param name="y3">The y-coordinate of the second control point for the curve.</param>
            <param name="x4">The x-coordinate of the ending point of the curve.</param>
            <param name="y4">The y-coordinate of the ending point of the curve.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para></remarks>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawBezier(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" draft="yes">
            <summary>Draws a Bezier spline defined by four <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="pt1">A <see cref="T:System.Drawing.Point" /> structure that represents the starting point of the curve.</param>
            <param name="pt2">A <see cref="T:System.Drawing.Point" /> structure that represents the first control point for the curve.</param>
            <param name="pt3">A <see cref="T:System.Drawing.Point" /> structure that represents the second control point for the curve.</param>
            <param name="pt4">A <see cref="T:System.Drawing.Point" /> structure that represents the ending point of the curve.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para></remarks>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawBeziers(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" draft="yes">
            <summary>Draws a series of Bezier splines from an array of <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the curve.</param>
            <param name="points">An array of <see cref="T:System.Drawing.Point" /> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</param>
            <remarks><para>A Bezier spline is defined with four points: first and last point specify beginning and end of the curve, second and third points specify so-called control points. The control points act as magnets, pulling the curve in certain directions to influence the way the Bezier spline bends.</para><para>The end point of each spline is a start point for the next one. So the <i>points</i> array should have at least 4 points and + 3 points for each extra spline.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#linesGM"></code></example>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse" draft="yes">
            <summary>Draws an ellipse defined by the given bounding rectangle.</summary>
            <overloads><summary>Draws an ellipse.</summary></overloads>
            <!-- <seealso href="graphics.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To fill an ellipse, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para></remarks>
            <!-- <seealso href="drawing-shapes.htm" --> />
			<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" draft="yes">
            <summary>Draws an ellipse defined by a bounding <see cref="T:System.Drawing.Rectangle" />.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the ellipse.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that defines the boundaries of the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To fill an ellipse, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" /> method.</para></remarks>
            <!-- <seealso href="drawing-shapes.htm" --> />
			<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" draft="yes">
            <summary>Draws the specified text in the specified rectangle according to its markup.</summary>
            <param name="s">A marked up text to draw. See <b>Remarks</b> section for details on text markup requirements.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="width">The width of the drawn text.</param>
            <param name="height">The height of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <remarks><para>This method is quite similar to <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawText" /> with the exception of a one difference. The text you want to draw using the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> method must be marked up with XML-like tags. The following tags and document structure are allowed:</para><para><code>
&lt;root&gt;
  &lt;para [style="..."]&gt;
    [some text]
     &lt;span [style="..."]&gt;
       [some text]
         &lt;span [style="..."]&gt;
           [some text]
         &lt;/span&gt;
     &lt;/span&gt;
     ...
     &lt;span [style="..."]&gt;&lt;/span&gt;
  &lt;/para&gt;
  ...
  &lt;para [style="..."]&gt;&lt;/para&gt;
&lt;/root&gt;
</code></para><para>Let us consider it more detailed:</para><para><b>root</b> is a root tag. It is exactly one all over the text and includes all the characters inside. If you place some text ouside the <c>&lt;root&gt;&lt;/root&gt;</c> tags, the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> will throw an exception.</para><para><b>para</b> is a paragraph tag. All the text you want to draw should be divided into paragraphs (at least one) and each of them should be enclosed between <c>&lt;para&gt;</c> and <c>&lt;/para&gt;</c> tags. Otherwise, the text will not be parsed and drawn. It supports the <b>style</b> attribute (see below) to specify some text and color properties of this paragraph.</para><para><b>span</b> is a tag intended to define a new inline area. You can use it to highlight some text inside a paragraph. These tags can be embedded in the existing <c>&lt;span&gt;&lt;/span&gt;</c> tags. It supports the <b>style</b> attribute too.</para><note>All the allowed tags are case insensitive, however, the name of every opening tag must have the same case as that of the corresponding closing tag. It means that <c>&lt;SpAn&gt;&lt;/SpAn&gt;</c> or <c>&lt;rOOt&gt;&lt;/rOOt&gt;</c> pairs will be parsed successfully, but pairs like <c>&lt;Para&gt;&lt;/parA&gt;</c> will cause an error.</note><para>The text layout mechanism used in the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> method is based on CSS and uses <b>style</b> attributes to attach some font, color and text parameters to paragraphs and theirs parts. This attribute accepts a string contained style parameters and corresponded values. Its common syntax is shown below:</para><code>style="style-parameter1:value1; style-parameter2:value2; ...; style-parameterN:valueN"</code><note>The <b>style</b> attribute and its value are case insensitive, i.e. this style setting will be applied correctly: <c>StyLe="fOnT-faMily: CoUriEr NeW; FoNt-siZe: 18; cOlOr:RgB(100,10,10)"</c></note><para>All the supported parameters are described in the following table:</para><list type="table"><listheader><term>Name</term><description>Description</description><description>Examples</description></listheader><item><term><b>font-family</b></term><description><para>Specifies a typeface name of the font.</para><para>If a font with the specified typeface name is not found, system uses the first font which matches other settings (as usual it is "Arial").</para></description><description><c>style="font-family:arial"</c></description></item><item><term><b>font-style</b></term><description><para>Selects between normal and italic faces within a font family.</para></description><description><para><c>style="font-style:normal"</c></para><para><c>style="font-style:italic"</c></para></description></item><item><term><b>font-weight</b></term><description><para>Selects the weight of the font. The values <c>100</c> to <c>900</c> form an ordered sequence, where each number indicates a weight that is at least as dark as its predecessor. The keyword <c>normal</c> is synonymous with <c>400</c>, and <c>bold</c> is synonymous with <c>700</c>.</para></description><description><para><c>style="font-weight:normal"</c></para><para><c>style="font-weight:bold"</c></para><para><c>style="font-weight:600"</c></para></description></item><item><term><b>font-size</b></term><description><para>Specifies the font size.</para></description><description><para><c>style="font-size:12"</c></para></description></item><item><term><b>color</b></term><description><para>Specifies the text color. A numerical RGB specification is used. No keywords (such as <c>red</c>, <c>white</c>, etc) are supported.                  </para></description><description><para><c>style="color:rgb(200, 0, 0)"</c></para></description></item><item><term><b>text-align</b></term><description><para>Specifies the text alignment. The following alignment types are supported:</para><list type="bullet"><item><term>center</term><description> text is centered.</description></item><item><term>left</term><description> text is aligned to the left.</description></item><item><term>right</term><description> text is aligned to the right.
</description></item><item><term>justify</term><description> text is justified.</description></item></list><para>If the <b>justify</b> alignment type is specified the last line of the text can be aligned using the <b>textAlignLast</b> parameter. This parameter can be one of the following values:</para><list type="bullet"><item><term>center</term><description> the last line is centered.
</description></item><item><term>left</term><description> the last line is aligned to the left.</description></item><item><term>right</term><description> the last line is aligned to the right.
</description></item><item><term>justify</term><description> the last line is justified.</description></item></list><para>If the <b>textAlignLast</b> parameter is not specified the last line of the text will be aligned along the left edge.</para></description><description><para><c>style="text-align:left"</c></para><para><c>style="text-align:justify; textAlignLast:right"</c></para></description></item><item><term><b>_line-spacing</b></term><description><para>Specifies the space between two adjacent lines of text.</para></description><description><para><c>style="_line-spacing:10px"</c></para><para><c>style="_line-spacing:-15px"</c></para></description></item></list><para>The <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> supports the following XML predeclared entities:</para><list type="bullet"><item><term><c>&amp;amp;</c></term><description>&amp; ampersand;</description></item><item><term><c>&amp;lt;</c></term><description>&lt; less than;</description></item><item><term><c>&amp;gt;</c></term><description>&gt; greater than.</description></item></list><para>This method parses the tabulation character (<c>\t</c> in C# and <c>vbTab</c> in VB) as a sequence of whitespaces. Number of whitespaces to replace one tabulation character in the text can be specified with the <c>tabSize</c> parameter.</para><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" /> method.</para><note>The <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" />, unlike the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawText" />, does not support the newline character (<c>\n</c> in C# and <c>vbNewLine</c> in VB). To draw a string on a new line enclose it in  <c>&lt;para&gt;&lt;/para&gt;</c> tags.</note></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" />
<!-- <seealso href="drawing-text.htm" --> />
            <overloads><summary>Draws the specified text in the specified rectangle according to its markup.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" draft="yes">
            <summary>Draws the specified text in the specified rectangle according to its markup.</summary>
            <param name="s">A marked up text to draw. See <b>Remarks</b> section for details on text markup requirements.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the bounds of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <remarks><para>This method is quite similar to <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawText" /> with the exception of a one difference. The text you want to draw using the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> method must be marked up with XML-like tags. The following tags and document structure are allowed:</para><para><code>
&lt;root&gt;
  &lt;para [style="..."]&gt;
    [some text]
     &lt;span [style="..."]&gt;
       [some text]
         &lt;span [style="..."]&gt;
           [some text]
         &lt;/span&gt;
     &lt;/span&gt;
     ...
     &lt;span [style="..."]&gt;&lt;/span&gt;
  &lt;/para&gt;
  ...
  &lt;para [style="..."]&gt;&lt;/para&gt;
&lt;/root&gt;
</code></para><para>Let us consider it more detailed:</para><para><b>root</b> is a root tag. It is exactly one all over the text and includes all the characters inside. If you place some text ouside the <c>&lt;root&gt;&lt;/root&gt;</c> tags, the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> will throw an exception.</para><para><b>para</b> is a paragraph tag. All the text you want to draw should be divided into paragraphs (at least one) and each of them should be enclosed between <c>&lt;para&gt;</c> and <c>&lt;/para&gt;</c> tags. Otherwise, the text will not be parsed and drawn. It supports the <b>style</b> attribute (see below) to specify some text and color properties of this paragraph.</para><para><b>span</b> is a tag intended to define a new inline area. You can use it to highlight some text inside a paragraph. These tags can be embedded in the existing <c>&lt;span&gt;&lt;/span&gt;</c> tags. It supports the <b>style</b> attribute too.</para><note>All the allowed tags are case insensitive, however, the name of every opening tag must have the same case as that of the corresponding closing tag. It means that <c>&lt;SpAn&gt;&lt;/SpAn&gt;</c> or <c>&lt;rOOt&gt;&lt;/rOOt&gt;</c> pairs will be parsed successfully, but pairs like <c>&lt;Para&gt;&lt;/parA&gt;</c> will cause an error.</note><para>The text layout mechanism used in the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> method is based on CSS and uses <b>style</b> attributes to attach some font, color and text parameters to paragraphs and theirs parts. This attribute accepts a string contained style parameters and corresponded values. Its common syntax is shown below:</para><code>style="style-parameter1:value1; style-parameter2:value2; ...; style-parameterN:valueN"</code><note>The <b>style</b> attribute and its value are case insensitive, i.e. this style setting will be applied correctly: <c>StyLe="fOnT-faMily: CoUriEr NeW; FoNt-siZe: 18; cOlOr:RgB(100,10,10)"</c></note><para>All the supported parameters are described in the following table:</para><list type="table"><listheader><term>Name</term><description>Description</description><description>Examples</description></listheader><item><term><b>font-family</b></term><description><para>Specifies a typeface name of the font.</para><para>If a font with the specified typeface name is not found, system uses the first font which matches other settings (as usual it is "Arial").</para></description><description><c>style="font-family:arial"</c></description></item><item><term><b>font-style</b></term><description><para>Selects between normal and italic faces within a font family.</para></description><description><para><c>style="font-style:normal"</c></para><para><c>style="font-style:italic"</c></para></description></item><item><term><b>font-weight</b></term><description><para>Selects the weight of the font. The values <c>100</c> to <c>900</c> form an ordered sequence, where each number indicates a weight that is at least as dark as its predecessor. The keyword <c>normal</c> is synonymous with <c>400</c>, and <c>bold</c> is synonymous with <c>700</c>.</para></description><description><para><c>style="font-weight:normal"</c></para><para><c>style="font-weight:bold"</c></para><para><c>style="font-weight:600"</c></para></description></item><item><term><b>font-size</b></term><description><para>Specifies the font size.</para></description><description><para><c>style="font-size:12"</c></para></description></item><item><term><b>color</b></term><description><para>Specifies the text color. A numerical RGB specification is used. No keywords (such as <c>red</c>, <c>white</c>, etc) are supported.                  </para></description><description><para><c>style="color:rgb(200, 0, 0)"</c></para></description></item><item><term><b>text-align</b></term><description><para>Specifies the text alignment. The following alignment types are supported:</para><list type="bullet"><item><term>center</term><description> text is centered.</description></item><item><term>left</term><description> text is aligned to the left.</description></item><item><term>right</term><description> text is aligned to the right.
</description></item><item><term>justify</term><description> text is justified.</description></item></list><para>If the <b>justify</b> alignment type is specified the last line of the text can be aligned using the <b>textAlignLast</b> parameter. This parameter can be one of the following values:</para><list type="bullet"><item><term>center</term><description> the last line is centered.
</description></item><item><term>left</term><description> the last line is aligned to the left.</description></item><item><term>right</term><description> the last line is aligned to the right.
</description></item><item><term>justify</term><description> the last line is justified.</description></item></list><para>If the <b>textAlignLast</b> parameter is not specified the last line of the text will be aligned along the left edge.</para></description><description><para><c>style="text-align:left"</c></para><para><c>style="text-align:justify; textAlignLast:right"</c></para></description></item><item><term><b>_line-spacing</b></term><description><para>Specifies the space between two adjacent lines of text.</para></description><description><para><c>style="_line-spacing:10px"</c></para><para><c>style="_line-spacing:-15px"</c></para></description></item></list><para>The <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" /> supports the following XML predeclared entities:</para><list type="bullet"><item><term><c>&amp;amp;</c></term><description>&amp; ampersand;</description></item><item><term><c>&amp;lt;</c></term><description>&lt; less than;</description></item><item><term><c>&amp;gt;</c></term><description>&gt; greater than.</description></item></list><para>This method parses the tabulation character (<c>\t</c> in C# and <c>vbTab</c> in VB) as a sequence of whitespaces. Number of whitespaces to replace one tabulation character in the text can be specified with the <c>tabSize</c> parameter.</para><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" /> method.</para><note>The <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText" />, unlike the <see cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawText" />, does not support the newline character (<c>\n</c> in C# and <c>vbNewLine</c> in VB). To draw a string on a new line enclose it in  <c>&lt;para&gt;&lt;/para&gt;</c> tags.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" />, using its original physical size, at the location specified by a coordinate pair.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="combine">The image blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc.).</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#watermark2"></code></example>
            <!-- <seealso href="combine-modes.htm" --> />
            <overloads><summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> at the specified location and with the specified size.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="destinationX">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationY">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="destinationWidth">The width of the drawn image.</param>
            <param name="destinationHeight">The height of the drawn image.</param>
            <param name="combine">The image blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc.).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />. If the current bitmap dimensions differ from dimensions of the destination rectangle, it is resized to have the same size as the destination rectangle.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <!-- <seealso href="combine-modes.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Drawing.Point,Aurigma.GraphicsMill.Transforms.CombineMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" />, using its original physical size, at the specified location.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="point">A <see cref="T:System.Drawing.Point" /> structure that represents the location of the upper-left corner of the drawn image.</param>
            <param name="combine">The image blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc.).</param>
            <remarks><para>The bitmap is drawn to the destination rectangle on this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> with dimensions equal to the dimensions of the bitmap.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note></remarks>
            <!-- <seealso href="combine-modes.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> at the specified location and with the specified size.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="destinationRect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="combine">The image blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc.).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />. If the current bitmap dimensions differ from dimensions of the destination rectangle, it is resized to have the same size as the destination rectangle.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <!-- <seealso href="combine-modes.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawImage(Aurigma.GraphicsMill.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle,Aurigma.GraphicsMill.Transforms.CombineMode,System.Single,Aurigma.GraphicsMill.Transforms.ResizeInterpolationMode)" draft="yes">
            <summary>Draws the specified portion of the specified <see cref="T:Aurigma.GraphicsMill.Bitmap" /> at the specified location and with the specified size.</summary>
            <param name="bitmap">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> to draw.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="srcRect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the image object to draw.</param>
            <param name="combine">The image blending algorithm (plain pixels copying, alpha blending, bitwise operations, etc.).</param>
            <param name="opacity">The opacity of the image in range <c>[0, 1]</c>. If <c>0</c>, image is completely transparent, if <c>1</c>, image is completely opaque.</param>
            <param name="interpolationMode">The resize algorithm. Using this parameter you can select between speed and quality of resizing.</param>
            <remarks><para>The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> is drawn to destination rectangle on this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />. If the current bitmap dimensions differ from dimensions of the destination rectangle, it is resized to have the same size as the destination rectangle.</para><note>If the bitmap has pixel format which is not GDI-compatible (e.g. extended pixel formats, CMYK, etc) method will automatically create a copy converted to the <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />. That's why you always get it drawn, but if you are going to call this method multiple times, it is recommended to convert the bitmap to some GDI-compatible format (like <see cref="P:Aurigma.GraphicsMill.PixelFormat.Format32bppArgb" />) to increase the performance.</note><para>If you want this method to calculate width and height automatically, you can pass <c>0</c> to the corresponding arguments. The dimensions will be calculated with the following way:</para><list type="number"><item><description>If both width and heigth are <c>0</c>, it will take source image dimensions (<see cref="P:Aurigma.GraphicsMill.Bitmap.Width" /> and <see cref="P:Aurigma.GraphicsMill.Bitmap.Height" /> properties). This way the image will not be resized during drawing.</description></item><item><description>If only one of arguments is <c>0</c>, it will calculate this argument to save proportion. For example, the source image is <c>800x600</c>, and you pass <c>400</c> as width and <c>0</c> as height. Height will be calculated to preserve aspect ratio of the image, i.e. it will be  <c>300</c>.</description></item></list></remarks>
            <!-- <seealso href="combine-modes.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLine(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Draws a line connecting the two points specified by the coordinate pairs.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the line.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
            <remarks><para>In this method line is defined with two points which should be connected with this line.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#linesGM"></code></example>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
            <overloads><summary>Draws a line connecting the two points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLine(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" draft="yes">
            <summary>Draws a line connecting two <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the line.</param>
            <param name="point1">A <see cref="T:System.Drawing.Point" /> structure that represents the first point to connect.</param>
            <param name="point2">A <see cref="T:System.Drawing.Point" /> structure that represents the second point to connect.</param>
            <remarks><para>In this method line is defined with two points which should be connected with this line.</para></remarks>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLines(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" draft="yes">
            <summary>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the line segments.</param>
            <param name="points">An array of <see cref="T:System.Drawing.Point" /> structures that represent the points to connect.</param>
            <remarks><para>Polyline is a set of connected lines (end point of some polyline segment is a start point of the next segment). It is defined with an array of points which should be connected with this polyline (polyline vertices).</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#linesGM"></code></example>
            <!-- <seealso href="drawing-lines-and-curves.htm" --> />
            <overloads><summary>Draws a series of line segments.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the pie shape.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">The angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">The angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks><para>Pie is an arc and two lines connecting this arc's ends with the center of the ellipse. In other words pie is defined with a tightest bounding rectangle of the ellipse and two angles which specifies necessary ellipse sector.</para><para>To fill a pie shape, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" />
            <overloads><summary>Draws a pie shape defined by an ellipse and two radial lines.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" draft="yes">
            <summary>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the pie shape.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">The angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">The angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks><para>Pie is an arc and two lines connecting this arc's ends with the center of the ellipse. In other words pie is defined with a tightest bounding rectangle of the ellipse and two angles which specifies necessary ellipse sector.</para><para>To fill a pie shape, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" draft="yes">
            <summary>Draws a polygon defined by an array of <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the polygon.</param>
            <param name="points">An array of <see cref="T:System.Drawing.Point" />  structures that represent the vertices of the polygon.</param>
            <remarks><para>Polygon can be treated as closed polyline, where last point is connected with the first one.</para><para>To fill the polygon, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPolygon(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#shapesGM"></code></example>
            <!-- <seealso href="drawing-shapes.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPolygon(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
            <overloads><summary>Draws a polygon defined by an array of points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Draws a rectangle specified by a coordinate pair, a width, and a height.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">The width of the rectangle to draw.</param>
            <param name="height">The height of the rectangle to draw.</param>
            <remarks><para>To fill a rectangle, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#shapesGM"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
<!-- <seealso href="drawing-shapes.htm" --> />
            <overloads><summary>Draws a rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" draft="yes">
            <summary>Draws a rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the rectangle.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to draw.</param>
            <remarks><para>To fill a rectangle, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" />
<!-- <seealso href="drawing-shapes.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32)" draft="yes">
            <summary>Draws the outlined text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />, <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />, and <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the text outline.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text. Actual position of the text is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
            <overloads><summary>Draws the specified text string at the specified location.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Single[])" draft="yes">
            <summary>Draws the outlined text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />, <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />, and <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the text outline.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text. Actual position of the text is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="kernings">An array of kerning modifiers. The first entry of this array specifies an additional distance (may be negative) between the first and the second character of the string; the second entry specifies an additional distance between the second and the third character, etc.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point)" draft="yes">
            <summary>Draws the outlined text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />, <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />, and <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the text outline.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the color and texture of the drawn text.</param>
            <param name="point">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.Pen,Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point,System.Single[])" draft="yes">
            <summary>Draws the outlined text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />, <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />, and <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="pen">A <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> that determines the color, width, and style of the text outline.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the color and texture of the drawn text.</param>
            <param name="point">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="kernings">An array of kerning modifiers. The first entry of this array specifies an additional distance (may be negative) between the first and the second character of the string; the second entry specifies an additional distance between the second and the third character, etc.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32)" draft="yes">
            <summary>Draws the specified text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text. Actual position of the text is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <example><code language="CS" source="Samples/Code/Text.cs#string1"></code></example>
            <!-- <seealso href="simple-text-string.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,Aurigma.GraphicsMill.Drawing.TextTrimmingMode,System.Boolean,System.Boolean,System.Boolean)" draft="yes">
            <summary>Draws the specified text string in the specified rectangle with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="width">The width of the drawn text.</param>
            <param name="height">The height of the drawn text.</param>
            <param name="trim">A <see cref="T:Aurigma.GraphicsMill.Drawing.TextTrimmingMode" /> specifying how to handle the situation when a text does not fit a given rectangle (where to insert ellipsis).</param>
            <param name="hotkeyPrefix"><c>true</c> if the hotkey prefix (ampersand sign) is removed from the string and next character is underlined; otherwise, <c>false</c>.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="wordWrap"><c>true</c> if the wrapped inside the bounding rectangle; otherwise, <c>false</c>.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Single[])" draft="yes">
            <summary>Draws the specified text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text. Actual position of the text is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="kernings">An array of kerning modifiers. The first entry of this array specifies an additional distance (may be negative) between the first and the second character of the string; the second entry specifies an additional distance between the second and the third character, etc.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Point)" draft="yes">
            <summary>Draws the specified text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="point">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Point,System.Single[])" draft="yes">
            <summary>Draws the specified text string at the specified location with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="point">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn text. Actual position of the text relatively this point is defined with <see cref="P:Aurigma.GraphicsMill.Drawing.Font.HorizontalAlignment" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Font.VerticalAlignment" /> properties of the <i>font</i> argument.</param>
            <param name="kernings">An array of kerning modifiers. The first entry of this array specifies an additional distance (may be negative) between the first and the second character of the string; the second entry specifies an additional distance between the second and the third character, etc.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,Aurigma.GraphicsMill.Drawing.TextTrimmingMode,System.Boolean,System.Boolean,System.Boolean)" draft="yes">
            <summary>Draws the specified text string in the specified rectangle with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> and <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> settings.</summary>
            <param name="string">A string to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the bounds of the drawn text.</param>
            <param name="trim">A <see cref="T:Aurigma.GraphicsMill.Drawing.TextTrimmingMode" /> specifying how to handle the situation when a text does not fit a given rectangle (where to insert ellipsis).</param>
            <param name="hotkeyPrefix"><c>true</c> if the hotkey prefix (ampersand sign) is removed from the string and next character is underlined; otherwise, <c>false</c>.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="wordWrap"><c>true</c> if the wrapped inside the bounding rectangle; otherwise, <c>false</c>.</param>
            <remarks><para>The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" /> method.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" draft="yes">
            <summary>Draws the specified text in the specified rectangle taking into account its line breaks and justification.</summary>
            <param name="text">A text to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="width">The width of the drawn text.</param>
            <param name="height">The height of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <remarks><para>If the destination rectangle width is 0 the text will not be wrapped during the drawing. The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" /> method.</para><para>This method supports newline (<c>\n</c> in C# and <c>vbNewLine</c> in VB) and tabulation (<c>\t</c> in C# and <c>vbTab</c> in VB) characters. It makes the characters after the newline symbol be displayed in a new line and replaces the tabulation character with the specified number of whitespaces.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" />
            <overloads><summary>Draws the specified text in the specified rectangle taking into account its line breaks and justification.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" draft="yes">
            <summary>Draws the specified text in the specified rectangle taking into account its line breaks and justification.</summary>
            <param name="text">A text to draw.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> that determines the color of the drawn text.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the bounds of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <remarks><para>If the destination rectangle width is 0 the text will not be wrapped during the drawing. The extent of the text drawn by this method can be measured using the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" /> method.</para><para>This method supports newline (<c>\n</c> in C# and <c>vbNewLine</c> in VB) and tabulation (<c>\t</c> in C# and <c>vbTab</c> in VB) characters. It makes the characters after the newline symbol be displayed in a new line and replaces the tabulation character with the specified number of whitespaces.</para><note>When you try to draw text on a grayscale bitmap, you will notice that the text is not antialiased. The reason of this problem is that neither GDI nor GDI+ support grayscale bitmaps, therefore Graphics Mill has to imitate it as indexed bitmap with grayscale palette. However, antialiasing is impossible on indexed bitmaps.</note></remarks>
            <!-- <seealso href="drawing-text.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" draft="yes">
            <summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to exclude the area specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="clipRectangle">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the rectangle to exclude from the clip region.</param>
            <overloads><summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> by excluding a given area.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" draft="yes">
            <summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to exclude the area specified by a <see cref="T:System.Drawing.Region" />.</summary>
            <param name="clipRegion">A <see cref="T:System.Drawing.Region" /> that specifies the region to exclude from the clip region.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To outline an ellipse, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#shapesGM"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
<!-- <seealso href="drawing-shapes.htm" --> />
            <overloads><summary>Fills the interior of an ellipse defined by a bounding rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillEllipse(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" draft="yes">
            <summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse.</param>
            <remarks><para>Ellipse is defined by its tightest bounding rectangle.</para><para>To outline an ellipse, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" /> method.</para></remarks>
            <!-- <seealso href="drawing-shapes.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawEllipse(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="left">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
            <param name="top">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
            <param name="width">The width of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
            <param name="height">The height of the bounding rectangle that defines the ellipse from which the pie section comes.</param>
            <param name="startAngle">The angle in degrees measured clockwise from the x-axis to the first side of the pie section.</param>
            <param name="sweepAngle">The angle in degrees measured clockwise from the startAngle parameter to the second side of the pie section.</param>
            <remarks><para>Pie is an arc and two lines connecting this arc's ends with the center of the ellipse. In other words pie is defined with a tightest bounding rectangle of the ellipse and two angles which specifies necessary ellipse sector.</para><para>To outline a pie shape, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" /> method.</para></remarks>
            <overloads><summary>Fills the interior of a pie section defined by an ellipse and two radial lines.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPie(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" draft="yes">
            <summary>Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.</param>
            <param name="startAngle">The angle in degrees measured clockwise from the x-axis to the first side of the pie section.</param>
            <param name="sweepAngle">An angle between first and second radial line which defines a sector on the ellipse.</param>
            <remarks><para>Pie is an arc and two lines connecting this arc's ends with the center of the ellipse. In other words pie is defined with a tightest bounding rectangle of the ellipse and two angles which specifies necessary ellipse sector.</para><para>To outline a pie shape, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPie(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPolygon(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point[])" draft="yes">
            <summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" /> structures.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="points">An array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon to fill.</param>
            <remarks><para>Polygon can be treated as closed polyline, where last point is connected with the first one.</para><para>To outline the polygon, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" /> method.</para><para>By default it uses <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" /> fill mode.</para></remarks>
            <!-- <seealso href="drawing-shapes.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" />
            <overloads><summary>Fills the interior of a polygon defined by an array of points.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillPolygon(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" draft="yes">
            <summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" /> structures using the specified fill mode.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="points">An array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon to fill.</param>
            <param name="fillMode">A member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines the style of the fill.</param>
            <remarks><para>Polygon can be treated as closed polyline, where last point is connected with the first one.</para><para>To outline the polygon, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawPolygon(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" draft="yes">
            <summary>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">The x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">The width of the rectangle to fill.</param>
            <param name="height">The height of the rectangle to fill.</param>
            <remarks><para>To outline a rectangle, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#shapesGM"></code></example>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
<!-- <seealso href="drawing-shapes.htm" --> />
            <overloads><summary>Fills the interior of a rectangle.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FillRectangle(Aurigma.GraphicsMill.Drawing.Brush,System.Drawing.Rectangle)" draft="yes">
            <summary>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="brush">A <see cref="T:Aurigma.GraphicsMill.Drawing.Brush" /> that determines the characteristics of the fill.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to fill.</param>
            <remarks><para>To outline a rectangle, use <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" /> method.</para></remarks>
            <!-- <seealso href="drawing-shapes.htm" --> />
<seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawRectangle(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Rectangle)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.Finalize">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FromHdc(System.IntPtr)" draft="yes">
            <summary>Creates a new <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> from the specified handle to a device context.</summary>
            <param name="hdc">Handle to a device context.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> for the specified device context.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.FromHwnd(System.IntPtr)" draft="yes">
            <summary>Creates a new <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> from the specified handle to a window.</summary>
            <param name="hwnd">Handle to a window.</param>
            <returns>A new <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> for the specified window handle.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.GetDC" draft="yes">
            <summary>Gets the handle to the device context associated with this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary>
            <returns>Handle to the device context associated with this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</returns>
            <remarks><para>Using this method you can get an access to Windows GDI-based structure called device context. It enables you to use the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> object with WinAPI functions.</para><para>You should never release this HDC with external means. This <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> will release it internally when being freed. It also means that this HDC is valid only while this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> class instance is alive. If the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is created at the <see cref="T:Aurigma.GraphicsMill.Bitmap" />, this bitmap also should be alive.</para><para>Unlike analogue method in <see cref="T:System.Drawing.Graphics" />, you still can call other methods of <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />. Moreover you can call this method multiple times (it will return the same value). However you should provide thread safety for access to this HDC.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.GetPixel(System.Int32,System.Int32)" draft="yes">
            <summary>Gets the color of the specified pixel.</summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:Aurigma.GraphicsMill.Color" /> that represents the color of the specified pixel.</returns>
            <remarks><para>If the current <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> instance is opened for a device context, you should remember than not all devices have per-pixel access support. The coordinates must be inside the clipping region.</para><note>This method works quite slow. It is ok to use it to get one color value, but if you need to process multiple pixels, it would be much faster to use direct access to memory.</note></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.SetPixel(System.Int32,System.Int32,Aurigma.GraphicsMill.Color)" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.Height" draft="yes">
            <summary>Gets a height of the drawing surface (in pixels).</summary>
            <value>The height of the drawing surface (in pixels).</value>
            <remarks>If this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is associated with a <see cref="T:Aurigma.GraphicsMill.Bitmap" />, pixel height of this bitmap is returned. If it is associated with device context (DC), it returns DC pixel height.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" draft="yes">
            <summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="clipRectangle">A <see cref="T:System.Drawing.Rectangle" /> structure to intersect with the current clip region.</param>
            <overloads><summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the intersection of the current clip region and the specified one.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Region)" draft="yes">
            <summary>Updates the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Region" /> structure.</summary>
            <param name="clipRegion">A <see cref="T:System.Drawing.Region" /> to intersect with the current clip region.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.IsClipEmpty" draft="yes">
            <summary>Gets a value indicating whether the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is empty.</summary>
            <value><c>true</c> if the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is empty; otherwise, <c>false</c>.</value>
            <remarks><para>When clipping region is empty, all the drawing functions do nothing.</para><para>To check whether a clipping region is larger than a drawing surface (thus it does not affect nothing) use the <see cref="P:Aurigma.GraphicsMill.Drawing.Graphics.IsClipInfinite" /> property.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.IsClipInfinite" draft="yes">
            <summary>Gets a value indicating whether the clipping region is larger than a drawing surface.</summary>
            <value><c>true</c> if no clipping region is infinite; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" draft="yes">
            <summary>Measures the specified formatted test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary>
            <param name="text">A formatted text you want to measure.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="width">The width of the drawn text.</param>
            <param name="height">The height of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <returns>A <see cref="T:System.Drawing.SizeF" /> structure that represents the size of the given text.</returns>
            <remarks><para>Width and height parameters specify the desired rectangle you want to display the text inside. The return value is the actual dimensions of the rectangle the text will occupy when displaying.</para><para>To get a valid text size, parameters values passed to this method should be identical to the respective parameters of the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" />
            <overloads><summary>Measures the specified formatted test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" draft="yes">
            <summary>Measures the specified formatted test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary>
            <param name="text">A formatted text you want to measure.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure that specifies the size of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <returns>The number of whitespaces to replace one tabulation character in the text.</returns>
            <remarks><para>The size parameter specifies the desired rectangle you want to display the text inside. The return value is the actual dimensions of the rectangle the text will occupy when displaying.</para><para>To get a valid text size, parameters values passed to this method should be identical to the respective parameters of the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawFormattedText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureString(System.String,Aurigma.GraphicsMill.Drawing.Font)" draft="yes">
            <summary>Measures the specified string when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" />.</summary>
            <param name="text">A string to measure.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format of the string.</param>
            <returns>A <see cref="T:System.Drawing.SizeF" /> structure that represents the size of the given string.</returns>
            <seealso cref="Overload:Aurigma.GraphicsMill.Drawing.Graphics.DrawString" />
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Int32,System.Int32,System.Boolean,System.Int32)" draft="yes">
            <summary>Measures the specified test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary>
            <param name="text">A text you want to measure.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="width">The width of the drawn text.</param>
            <param name="height">The height of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <returns>A <see cref="T:System.Drawing.SizeF" /> structure that represents the size of the given text.</returns>
            <remarks><para>Width and height parameters specify the desired rectangle you want to display the text inside. The return value is the actual dimensions of the rectangle the text will occupy when displaying.</para><para>To get a valid text size, parameters values passed to this method should be identical to the respective parameters of the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)" />
            <overloads><summary>Measures the specified test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.MeasureText(System.String,Aurigma.GraphicsMill.Drawing.Font,System.Drawing.Size,System.Boolean,System.Int32)" draft="yes">
            <summary>Measures the specified test when drawn with the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> within the specified region.</summary>
            <param name="text">A text you want to measure.</param>
            <param name="font">A <see cref="T:Aurigma.GraphicsMill.Drawing.Font" /> that defines the text format.</param>
            <param name="size">A <see cref="T:System.Drawing.Size" /> structure that specifies the size of the drawn text.</param>
            <param name="clipping"><c>true</c> if the string is clipped when it does not fit the bounding rectangle; otherwise, <c>false</c>.</param>
            <param name="tabSize">The number of whitespaces to replace one tabulation character in the text.</param>
            <returns>A <see cref="T:System.Drawing.SizeF" /> structure that represents the size of the given text.</returns>
            <remarks><para>The size parameter specifies the desired rectangle you want to display the text inside. The return value is the actual dimensions of the rectangle the text will occupy when displaying.</para><para>To get a valid text size, parameters values passed to this method should be identical to the respective parameters of the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" /> method.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawText(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,System.Boolean,System.Int32)" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.Mode" draft="yes">
            <summary>Gets the value that specifies whether the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> where opened at HDC or <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.GdiGraphicsMode" /> value that specifies whether the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> where opened at HDC or <see cref="T:Aurigma.GraphicsMill.Bitmap" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" draft="yes">
            <summary>Resets the clip region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to an infinite region.</summary>
            <remarks>When the clipping region of a <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is infinite, items that this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> draws are not clipped.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" draft="yes">
            <summary>Sets the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="clipRectangle">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the new clip region.</param>
            <remarks><para>You can modify new clipping region later through <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />, and <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" /> methods. It also can be discarded with the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" /> method.</para></remarks>
            <overloads><summary>Sets the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" draft="yes">
            <summary>Sets the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</summary>
            <param name="clipRectangle">A <see cref="T:System.Drawing.Rectangle" /> structure to combine.</param>
            <param name="combineMode">A member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use.</param>
            <remarks><para>You can modify new clipping region later through <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />, and <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" /> methods. It also can be discarded with the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.SetClip(System.Drawing.Region)" draft="yes">
            <summary>Sets the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the rectangle specified by a <see cref="T:System.Drawing.Region" />.</summary>
            <param name="clipRegion">A <see cref="T:System.Drawing.Region" /> that represents the new clip region.</param>
            <remarks><para>You can modify new clipping region later through <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />, and <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" /> methods. It also can be discarded with the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" draft="yes">
            <summary>Sets the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Region" />.</summary>
            <param name="clipRegion">A <see cref="T:System.Drawing.Region" /> to combine.</param>
            <param name="combineMode">A member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use.</param>
            <remarks><para>You can modify new clipping region later through <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />, <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />, and <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" /> methods. It also can be discarded with the <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.ResetClip" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.SetPixel(System.Int32,System.Int32,Aurigma.GraphicsMill.Color)" draft="yes">
            <summary>Sets the color of the specified pixel.</summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.Color" /> that represents the color to assign to the specified pixel.</param>
            <remarks><para>If the current <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> instance is opened for a device context, you should remember than not all devices have per-pixel access support. The coordinates must be inside the clipping region.</para><note>This method works quite slow. It is ok to use it to set one color value, but if you need to process multiple pixels, it would be much faster to use direct access to memory.</note></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.Drawing.Graphics.GetPixel(System.Int32,System.Int32)" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.Transform" draft="yes">
            <summary>Gets or sets a copy of the geometric world transformation for this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that represents the geometric world transformation for this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</value>
            <remarks>This transformation can be used to scale, rotate, shear, or translate graphics output. All the coordinates passed to drawing functions are multiplied on the matrix defining this transform.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" draft="yes">
            <summary>Translates the clipping region of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> by specified amounts in the horizontal and vertical directions.</summary>
            <param name="dx">The x-coordinate of the translation.</param>
            <param name="dy">The y-coordinate of the translation.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Graphics.Width" draft="yes">
            <summary>Gets a width of the drawing surface (in pixels).</summary>
            <value>The width of the drawing surface (in pixels).</value>
            <remarks>If this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> is associated with a <see cref="T:Aurigma.GraphicsMill.Bitmap" />, pixel width of this bitmap is returned. If it is associated with device context (DC), it returns DC pixel width.</remarks>
        </member>

<!-- Drawing.GraphicsDrawer -->
        <member name="T:Aurigma.GraphicsMill.Drawing.GraphicsDrawer" draft="yes">
            <summary>Provides the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics">Aurigma.GraphicsMill.Drawing.Graphics</see> object for drawing within a pipeline.</summary>
            <!-- <seealso href="drawing-on-images-with-pipelines.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="E:Aurigma.GraphicsMill.Drawing.GraphicsDrawer.Draw" draft="yes">
            <summary>Occurs when the drawing is performed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.GraphicsDrawer.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.GraphicsDrawer" /> class.</summary>
        </member>

<!-- Drawing.GraphicsDrawEventArgs -->
        <member name="T:Aurigma.GraphicsMill.Drawing.GraphicsDrawEventArgs" draft="yes">
            <summary>Provides data for the <see cref="E:Aurigma.GraphicsMill.Drawing.GraphicsDrawer.Draw">GraphicsDrawer.Draw</see> event.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GraphicsDrawEventArgs.Graphics" draft="yes">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics">Aurigma.GraphicsMill.Drawing.Graphics</see> to draw on an image.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics">Aurigma.GraphicsMill.Drawing.Graphics</see> providing the GDI drawing surface.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GraphicsDrawEventArgs.Height" draft="yes">
            <summary>Gets a height of the drawing surface (in pixels).</summary>
            <value>The height of the drawing surface (in pixels).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.GraphicsDrawEventArgs.Width" draft="yes">
            <summary>Gets a width of the drawing surface (in pixels).</summary>
            <value>The width of the drawing surface (in pixels).</value>
        </member>

<!-- Drawing.HatchBrush -->
        <member name="T:Aurigma.GraphicsMill.Drawing.HatchBrush" draft="yes">
            <summary>Represents a brush which fills the shape with a predefined pattern.</summary>
            <remarks><para>Hatch brush is defined with three parameters:</para><list type="number"><item><description>Hatch style or pattern (<see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.HatchStyle" />)</description></item><item><description>Foreground color, i.e. a pattern color (<see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.ForegroundColor" />)</description></item><item><description>Background color (<see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.BackgroundColor" />)</description></item></list><para>Besides of this, you can disable a background with <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.TransparentBackground" /> property. In this case only pattern will be drawing with foreground on the underlying image.</para><para>You can convert this brush instance into its analogue from <see cref="N:System.Drawing">System.Drawing</see> namespace using method <see cref="M:Aurigma.GraphicsMill.Drawing.HatchBrush.ToGdiPlusBrush" />, or an appropriate <see cref="M:Aurigma.GraphicsMill.Drawing.HatchBrush.op_Implicit(System.Drawing.Drawing2D.HatchBrush)~Aurigma.GraphicsMill.Drawing.HatchBrush">cast operator</see>.</para></remarks>
            <!-- <seealso href="pens-and-brushes.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.HatchBrush.BackgroundColor" draft="yes">
            <summary>Gets or sets a background color for this hatch brush.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> that represents the background color for this <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />. The default value is white color.</value>
            <remarks><para>This value is used only if <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.TransparentBackground" /> property is set to <c>false</c>.</para><para>Classic GDI does not handle transparency, so it makes no sense to specify alpha channel for this color.</para><note type="caution">For the same reason it is not recommended to draw with GDI on the images with 32-bit ARGB pixel format. It will fill alpha channel (which is treated with GDI as meaningless) with zeros.</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.HatchBrush.ForegroundColor" draft="yes">
            <summary>Gets or sets a foreground color for this hatch brush.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> that represents the background color for this <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />. The default value is black color.</value>
            <remarks><para>Classic GDI does not handle transparency, so it makes no sense to specify alpha channel for this color.</para><note type="caution">For the same reason it is not recommended to draw with GDI on the images with 32-bit ARGB pixel format. It will fill alpha channel (which is treated with GDI as meaningless) with zeros.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.HatchBrush.HatchStyle" draft="yes">
            <summary>Gets or sets a hatch style for this brush.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.HatchStyle" /> value specifying a hatch style of the current brush. The default value is <see cref="F:Aurigma.GraphicsMill.Drawing.HatchStyle.Horizontal" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.#ctor(Aurigma.GraphicsMill.Drawing.HatchBrush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class from the specified existing hatch brush.</summary>
            <param name="hatchBrush">The <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> to be copied.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.#ctor(Aurigma.GraphicsMill.Drawing.HatchStyle,Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class using the specified style and foreground color.</summary>
            <param name="hatchStyle">A <see cref="T:Aurigma.GraphicsMill.Drawing.HatchStyle" /> value specifying a hatch style of the brush. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.HatchStyle" /> property.</param>
            <param name="foreColor">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> value specifying a foreground color of the brush. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.ForegroundColor" /> property.</param>
            <remarks>When you create a brush with this constructor, background is disabled. You can change this later by setting the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.TransparentBackground" /> property to <c>false</c> and specifying a necessary value to the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.BackgroundColor" />.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.#ctor(Aurigma.GraphicsMill.Drawing.HatchStyle,Aurigma.GraphicsMill.RgbColor,Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class using the specified style and foreground and background colors.</summary>
            <param name="hatchStyle">A <see cref="T:Aurigma.GraphicsMill.Drawing.HatchStyle" /> value specifying a hatch style of the brush. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.HatchStyle" /> property.</param>
            <param name="foreColor">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> value specifying a foreground color of the brush. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.ForegroundColor" /> property.</param>
            <param name="backColor">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> value specifying a background color of the brush. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.BackgroundColor" /> property.</param>
            <remarks>When you create a brush with this constructor, background is enabled. You can change this later by setting the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.TransparentBackground" /> property to <c>true</c>.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.#ctor(System.Drawing.Drawing2D.HatchBrush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class by copying brush settings from the specified <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see> object.</summary>
            <param name="brush">The <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see> from which to create the new <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.op_Explicit(Aurigma.GraphicsMill.Drawing.HatchBrush)~System.Drawing.Drawing2D.HatchBrush" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush">Aurigma.GraphicsMill.Drawing.HatchBrush</see> instance to a <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see>.</summary>
            <param name="brush">The <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush">Aurigma.GraphicsMill.Drawing.HatchBrush</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.op_Implicit(System.Drawing.Drawing2D.HatchBrush)~Aurigma.GraphicsMill.Drawing.HatchBrush" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see> instance to a <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush">Aurigma.GraphicsMill.Drawing.HatchBrush</see>.</summary>
            <param name="brush">The <see cref="T:System.Drawing.Drawing2D.HatchBrush">System.Drawing.Drawing2D.HatchBrush</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush">Aurigma.GraphicsMill.Drawing.HatchBrush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.HatchBrush.ToGdiPlusBrush" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />.</summary>
            <returns>A <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.HatchBrush.TransparentBackground" draft="yes">
            <summary>Gets or sets a value that indicates whether to fill underlying image with the <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.BackgroundColor" />.</summary>
            <value><c>true</c> if the brush draws only hatch with <see cref="P:Aurigma.GraphicsMill.Drawing.HatchBrush.ForegroundColor" />; otherwise, <c>false</c>.</value>
        </member>

<!-- Drawing.HatchBrush -->
        <member name="T:Aurigma.GraphicsMill.Drawing.HatchStyle" draft="yes">
            <summary>Contains different patterns available for <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> objects.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.BackwardDiagonal" draft="yes">
            <summary>A pattern of lines on a diagonal from upper right to lower left.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.Cross" draft="yes">
            <summary>A pattern of horizontal and vertical lines that cross.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.DiagonalCross" draft="yes">
            <summary>A pattern of crisscross diagonal lines.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.ForwardDiagonal" draft="yes">
            <summary>A pattern of lines on a diagonal from upper left to lower right.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.Horizontal" draft="yes">
            <summary>A pattern of horizontal lines.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HatchStyle.Vertical" draft="yes">
            <summary>A pattern of vertical lines.</summary>
        </member>

<!-- Drawing.HorizontalAlignment -->
        <member name="T:Aurigma.GraphicsMill.Drawing.HorizontalAlignment">
            <summary>Contains horizontal alignment types.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.Center" draft="yes">
            <summary>Text is centered.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.JustifyAll" draft="yes">
            <summary>Text is justified.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.JustifyCenter" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is centered.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.JustifyLeft" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is aligned to the left.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.JustifyRight" draft="yes">
            <summary>Text is justified, except the last line of each paragraph. The last line is aligned to the right.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.Left" draft="yes">
            <summary>Text is aligned to the left.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.None" draft="yes">
            <summary>No alignment.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.HorizontalAlignment.Right" draft="yes">
            <summary>Text is aligned to the right.</summary>
        </member>

<!-- Drawing.LineCap -->
        <member name="T:Aurigma.GraphicsMill.Drawing.LineCap" draft="yes">
            <summary>Contains the available cap styles with which a <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> object can end a line.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.LineCap.Flat" draft="yes">
            <summary>A flat line cap.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.LineCap.Round" draft="yes">
            <summary>A round line cap.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.LineCap.Square" draft="yes">
            <summary>A square line cap.</summary>
        </member>

<!-- Drawing.Pen -->
        <member name="T:Aurigma.GraphicsMill.Drawing.Pen" draft="yes">
            <summary>Defines an object used to draw lines and curves.</summary>
            <remarks><para>Pen is an object which is used to draw lines, curves, and outline shapes. You can specify a number of pen settings: <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Color" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Width" />, <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.DashStyle" />. Some properties are used to determine a behaviour of lines conjunctions, such as <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.LineJoin" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.MiterLimit" />. To specify a shape of the line ends, use <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.StartCap" /> and <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.EndCap" /> properties.</para><para>When you draw closed shapes such as rectangles, ellipses, etc. with a pen of large width (which is more than 1), there is an important parameter <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Alignment" /> that specifies the direction to widen the line (both directions evenly or inside the shape).
</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#dashStyles"></code></example>
            <!-- <seealso href="pens-and-brushes.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.Alignment" draft="yes">
            <summary>Gets or sets the alignment for this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.PenAlignment">System.Drawing.Drawing2D.PenAlignment</see> that represents the alignment for this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />. The default value is <see cref="F:System.Drawing.Drawing2D.PenAlignment.Center" />.</value>
            <remarks>Pen alignment is necessary when pen <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Width" /> is more than 1. It means how line is positioned relatively to the pen center. Although <see cref="T:System.Drawing.Drawing2D.PenAlignment">System.Drawing.Drawing2D.PenAlignment</see> has five possible values, both GDI+ and Graphics Mill support only <see cref="F:System.Drawing.Drawing2D.PenAlignment.Center" /> and <see cref="F:System.Drawing.Drawing2D.PenAlignment.Inset" /> members.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.Color" draft="yes">
            <summary>Gets or sets the color of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> that represents the color of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />. The default pen color is black.</value>
            <remarks><para>Classic GDI does not handle transparency, so it makes no sense to specify alpha channel for this color.</para><note type="caution">For the same reason it is not recommended to draw with GDI on the images with 32-bit ARGB pixel format. It will fill alpha channel (which is treated with GDI as meaningless) with zeros. From the other hand you can use it to emulate eraser tool functionality.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.DashStyle" draft="yes">
            <summary>Gets or sets the style used for dashed lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle">System.Drawing.Drawing2D.DashStyle</see> that represents the style used for dashed lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />. The default value is <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid" />.</value>
            <remarks>Due to GDI limitation you cannot use other dash style than <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid" /> when pen width differs from 1.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.Dispose" draft="yes">
            <summary>Releases all resources used by this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.EndCap" draft="yes">
            <summary>Gets or sets the cap style used at the end of lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.Drawing.LineCap" /> that represents the cap style used at the end of lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />. The default value is <see cref="F:Aurigma.GraphicsMill.Drawing.LineCap.Flat" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.LineJoin" draft="yes">
            <summary>Gets or sets the join style for the ends of two consecutive lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.LineJoin">System.Drawing.Drawing2D.LineJoin</see> that represents the join style for the ends of two consecutive lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</value>
            <remarks>This property affects only those lines which are drawn with a single call (e.g. <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLines(Aurigma.GraphicsMill.Drawing.Pen,System.Drawing.Point[])" />). If you call <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawLine(Aurigma.GraphicsMill.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" /> multiple times, lines will not be joined. <see cref="F:System.Drawing.Drawing2D.LineJoin.MiterClipped" /> value is not supported.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.MiterLimit" draft="yes">
            <summary>Gets or sets the limit of the thickness of the join on a mitered corner.</summary>
            <value>The limit of the thickness of the join on a mitered corner. The default value is 10.0.</value>
            <remarks><para>The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width.</para><para>If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.#ctor(Aurigma.GraphicsMill.Drawing.Pen)" draft="yes">
            <summary>Constructs new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> class instance from the specified existing pen.</summary>
            <param name="pen">The <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> to be copied.</param>
            <overloads><summary>Constructs new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> class instance.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.#ctor(Aurigma.GraphicsMill.RgbColor,System.Single)">
            <summary>Constructs new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> class instance. Such main pen settings of pen as width and color can be specified here.</summary>
            <param name="color">Color of the pen. You can change this value later through property <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Color" />.</param>
            <param name="width">Width of the pen. You can change this value later through property <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Width" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.#ctor(Aurigma.GraphicsMill.RgbColor,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>Constructs new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> class instance. You can set such parameters as pen width, color, and dash style.</summary>
            <param name="color">Color of the pen. You can change this value later through property <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Color" />.</param>
            <param name="width">Width of the pen. You can change this value later through property <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.Width" />.</param>
            <param name="style">Dash style of the pen. You can change this value later through property <see cref="P:Aurigma.GraphicsMill.Drawing.Pen.DashStyle" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.#ctor(System.Drawing.Pen)">
            <summary>Constructs new <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" /> class instance. All pen settings are taken from standard <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> object.</summary>
            <param name="pen"><see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> class instance which is used to take settings from.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.op_Explicit(Aurigma.GraphicsMill.Drawing.Pen)~System.Drawing.Pen" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Drawing.Pen">Aurigma.GraphicsMill.Drawing.Pen</see> instance to a <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see>.</summary>
            <param name="pen">The <see cref="T:Aurigma.GraphicsMill.Drawing.Pen">Aurigma.GraphicsMill.Drawing.Pen</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.op_Implicit(System.Drawing.Pen)~Aurigma.GraphicsMill.Drawing.Pen" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> instance to a <see cref="T:Aurigma.GraphicsMill.Drawing.Pen">Aurigma.GraphicsMill.Drawing.Pen</see>.</summary>
            <param name="pen">The <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Drawing.Pen">Aurigma.GraphicsMill.Drawing.Pen</see> to which this operator converts.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.StartCap" draft="yes">
            <summary>Gets or sets the cap style used at the beginning of lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>One of the <see cref="T:Aurigma.GraphicsMill.Drawing.LineCap" /> values that represents the cap style used at the beginning of lines drawn with this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.Pen.ToGdiPlusPen" draft="yes">
            <summary>Gets the <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <returns>A <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> containing a copy of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.Pen.Width" draft="yes">
            <summary>Gets or sets the width of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />.</summary>
            <value>The width of this <see cref="T:Aurigma.GraphicsMill.Drawing.Pen" />. The default value is 1.</value>
            <remarks><para>The width is measured in the same units as the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> it is used at. It also uses the resolution of this <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" />.</para><para>Due to GDI limitation you can use other dash style than <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid" /> only when pen width is 1.</para></remarks>
        </member>

<!-- Drawing.SolidBrush -->
        <member name="T:Aurigma.GraphicsMill.Drawing.SolidBrush" draft="yes">
            <summary>Represents a brush of a single color.</summary>
            <remarks><para>Solid brush is the simplest kind of brush. It fills the shape with a solid color. This color is specified by property <see cref="P:Aurigma.GraphicsMill.Drawing.SolidBrush.Color" />.</para>
			<para>You can convert this brush instance into its analogue from <see cref="N:System.Drawing">System.Drawing</see> namespace using method <see cref="M:Aurigma.GraphicsMill.Drawing.SolidBrush.ToGdiPlusBrush" />, or an appropriate <see cref="M:Aurigma.GraphicsMill.Drawing.SolidBrush.op_Implicit(System.Drawing.SolidBrush)~Aurigma.GraphicsMill.Drawing.SolidBrush">cast operator</see>.</para></remarks>
            <example><code language="CS" source="Samples/Code/Drawing.cs#brushGM"></code></example>
            <!-- <seealso href="pens-and-brushes.htm" --> />
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.Drawing.SolidBrush.Color" draft="yes">
            <summary>Gets or sets the color of this <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> object.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> that represents the color of this brush. The default value is black color.</value>
            <remarks><para>Classic GDI does not handle transparency, so it makes no sense to specify alpha channel for this color.</para><note type="caution">For the same reason it is not recommended to draw with GDI on the images with 32-bit ARGB pixel format. It will fill alpha channel (which is treated with GDI as meaningless) with zeros. From the other hand you can use it to emulate eraser tool functionality.</note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.#ctor(Aurigma.GraphicsMill.Drawing.SolidBrush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> class from the specified existing solid brush.</summary>
            <param name="brush">The <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> to be copied.</param>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.#ctor(Aurigma.GraphicsMill.RgbColor)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.HatchBrush" /> class using the specified color.</summary>
            <param name="color">A <see cref="T:Aurigma.GraphicsMill.RgbColor" /> value specifying a brush color. You can change this value later through the <see cref="P:Aurigma.GraphicsMill.Drawing.SolidBrush.Color" /> property.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.#ctor(System.Drawing.SolidBrush)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" /> class by copying brush settings from the specified <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> object.</summary>
            <param name="brush">The <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> from which to create the new <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.op_Explicit(Aurigma.GraphicsMill.Drawing.SolidBrush)~System.Drawing.SolidBrush" draft="yes">
            <summary>Converts the specified <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush">Aurigma.GraphicsMill.Drawing.SolidBrush</see> instance to a <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see>.</summary>
            <param name="brush">The <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush">Aurigma.GraphicsMill.Drawing.SolidBrush</see> to convert.</param>
            <returns>The <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.op_Implicit(System.Drawing.SolidBrush)~Aurigma.GraphicsMill.Drawing.SolidBrush" draft="yes">
            <summary>Converts the specified <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> instance to a <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush">Aurigma.GraphicsMill.Drawing.SolidBrush</see>.</summary>
            <param name="brush">The <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> to convert.</param>
            <returns>The <see cref="T:Aurigma.GraphicsMill.Drawing.SolidBrush">Aurigma.GraphicsMill.Drawing.SolidBrush</see> to which this operator converts.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.Drawing.SolidBrush.ToGdiPlusBrush">
            <summary>Converts the brush to <see cref="T:System.Drawing.Pen">System.Drawing.Brush</see> class.</summary>
            <returns>Brush converted to <see cref="T:System.Drawing.Pen">System.Drawing.Brush</see> class.</returns>
        </member>

<!-- Drawing.TextTrimmingMode -->
        <member name="T:Aurigma.GraphicsMill.Drawing.TextTrimmingMode" draft="yes">
            <summary>Contains the available trimming modes which defines how to trim a text when it overflows the edge of its containing rectangle (in <see cref="M:Aurigma.GraphicsMill.Drawing.Graphics.DrawString(System.String,Aurigma.GraphicsMill.Drawing.Font,Aurigma.GraphicsMill.Drawing.SolidBrush,System.Drawing.Rectangle,Aurigma.GraphicsMill.Drawing.TextTrimmingMode,System.Boolean,System.Boolean,System.Boolean)" /> method).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.TextTrimmingMode.EndEllipsis">
            <summary>If the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.TextTrimmingMode.None" draft="yes">
            <summary>Text is not trimmed.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.TextTrimmingMode.PathEllipsis">
            <summary>Replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\) characters, this value preserves as much as possible of the text after the last backslash.</summary>
        </member>

<!-- Drawing.VerticalAlignment -->
        <member name="T:Aurigma.GraphicsMill.Drawing.VerticalAlignment">
            <summary>Contains vertical alignment types.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.VerticalAlignment.Baseline">
            <summary>Baseline alignment.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.VerticalAlignment.Bottom">
            <summary>Bottom alignment.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.VerticalAlignment.Center">
            <summary>Center alignment.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.Drawing.VerticalAlignment.Top">
            <summary>Top alignment.</summary>
        </member>

<!-- FontException -->		
        <member name="T:Aurigma.GraphicsMill.FontException" draft="yes">
            <summary>Represents the error that occurs when you work with fonts.</summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.FontException.#ctor" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontException" /> class.</summary>
            <overloads><summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontException" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontException.#ctor(System.String)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontException.#ctor(System.String,System.Exception)" draft="yes">
            <summary>Initializes a new instance of the <see cref="T:Aurigma.GraphicsMill.FontException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.FontException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>

		
    </members>
</doc>
